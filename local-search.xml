<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>StackWalker：深入调用栈的探索工具</title>
    <link href="/2024/07/11/Win32_Api/StackWalker%EF%BC%9A%E6%B7%B1%E5%85%A5%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E6%8E%A2%E7%B4%A2%E5%B7%A5%E5%85%B7/"/>
    <url>/2024/07/11/Win32_Api/StackWalker%EF%BC%9A%E6%B7%B1%E5%85%A5%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E6%8E%A2%E7%B4%A2%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>StackWalker 是一个轻量级但功能强大的库，它允许您在任何线程（包括自己的、其他线程和远程线程）上查看和分析调用栈。这个项目最初发布在 CodeProject 上，但由于维护需求，作者将其迁移到了更易于管理的 GitHub 平台。StackWalker 支持 x86, x64 和 IA64 架构，并提供了一个简单的接口来生成调用栈，同时隐藏了复杂的实现细节。</p><h3 id="技术剖析"><a href="#技术剖析" class="headerlink" title="技术剖析"></a>技术剖析</h3><p>StackWalker 使用 Microsoft 的 StackWalk64 API，该 API 在 dbghelp.dll 库中提供。它适用于从 Windows 9x 到最新操作系统的广泛范围，确保了广泛的平台兼容性。为了使代码更具灵活性，StackWalker 以 C++ 编写，允许用户重写多种方法。此外，它还支持自定义读取内存函数，以及通过调试器输出窗口显示信息，或者自定义输出机制。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>StackWalker 可用于以下场景：</p><ol><li>故障排查：当应用程序出现错误或异常时，可以快速查看调用栈以确定问题所在。</li><li>性能优化：通过分析调用栈，了解函数调用关系，从而定位可能的性能瓶颈。</li><li>开发工具集成：可以在自定义的IDE插件或调试工具中嵌入 StackWalker 来增强调用栈显示功能。</li><li>异常处理：配合异常处理器，提供详细的调用堆栈信息，帮助理解和处理运行时异常。</li></ol><h3 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h3><ol><li>简单易用：提供直观的类接口，只需几行代码即可展示当前线程的调用栈。</li><li>跨架构支持：涵盖 x86, x64, IA64 三种主流架构，适应不同环境的需求。</li><li>可扩展性：通过继承 StackWalker 类并覆写其方法，可定制输出机制和获取详细调用栈信息。</li><li>内置抽象层：隐藏底层 API 实现，使得开发者专注于应用逻辑而非底层细节。</li><li>调试友好：默认输出到调试器输出窗口，方便调试时查看调用栈信息，也可以双击跳转至源文件。</li></ol><p>要构建和使用该项目，只需遵循 README 中提供的命令，通过 CMake 配置和编译，然后在你的代码中实例化 StackWalker 对象并调用 ShowCallstack 方法，即可轻松查看调用栈信息。</p><p>总之，无论你是开发者还是技术支持人员，StackWalker 都是一个强大且实用的工具，值得在你的工具箱中占有一席之地。立即尝试 StackWalker，让调用栈分析变得轻松自如！</p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++操作注册表</title>
    <link href="/2024/06/26/Win32_Api/C++%E6%93%8D%E4%BD%9C%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    <url>/2024/06/26/Win32_Api/C++%E6%93%8D%E4%BD%9C%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-注册表简介"><a href="#1-注册表简介" class="headerlink" title="1.注册表简介"></a>1.注册表简介</h1><p>注册表是为Windows NT和Windows95中所有32位硬件&#x2F;驱动和32位应用程序设计的数据文件，用于存储系统和应用程序的设置信息。16位驱动在Winnt (Windows New Technology)下无法工作，所以所有设备都通过注册表来控制，一般这些是通过BIOS（基本输入输出系统）来控制的。在Win95下，16位驱动会继续以实模式方式设备工作，它们使用system.ini来控制。16位应用程序会工作在NT或者Win95 下，它们的程序仍然会参考win.ini和system.ini文件获得信息和控制。</p><h1 id="2-注册表结构"><a href="#2-注册表结构" class="headerlink" title="2. 注册表结构"></a>2. 注册表结构</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1.简介"></a>2.1.简介</h2><p>注册表是是Microsoft Windows中的一个重要而又复杂的信息数据库，它是多层次式的。在不同系统上注册表的基本结构相同。其中的复杂数据会在不同方式上结合，从而产生出一个绝对唯一的注册表。从用户的角度看，注册表系统由两个部分组成：注册表数据库和注册表编辑器。注册表数据库包括两个文件：system.dat和user.dat。system.dat用来保存微机的系统信息，如安装的硬件和调和驱动程序的有关信息等。user.dat用来保存每个用户特有的信息，如桌面设置、墙纸或窗口的颜色设置等。由于注册表是最重要的系统文件之一，因此对于它的保护和备份就特别重要。系统在每次成功启动之后都将此次启动时的注册表作一个备份。system.dat的备份文件为system.dao，user.dat的备份文件为user.dao。如果由于某种原因注册表受到破坏，则可以用这两个备份文件来恢复注册表。Win 98&#x2F;Win Me备份的注册表文件保存在C:&#x2F;WINDOWS&#x2F;SYSBCKUP文件夹(这是个隐藏文件夹)中，文件名称是rb000.cab、rb002.cab、rb003.cab、rb004.cab、rb005.cab（通常为五个）。</p><h2 id="2-2-数据结构"><a href="#2-2-数据结构" class="headerlink" title="2.2.数据结构"></a>2.2.数据结构</h2><p>注册表由键（或称“项”）、子键（子项）和值项构成。一个键就是分支中的一个文件夹，而子键就是这个文件夹中的子文件夹，子键同样是一个键。一个值项则是一个键的当前定义，由名称、数据类型以及分配的值组成。一个键可以有一个或多个值，每个值的名称各不相同，如果一个值的名称为空，则该值为该键的默认值。</p><p>注册表的数据类型主要有以下四种：</p><table><thead><tr><th>显示类型（在编辑器中）</th><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>REG_SZ</td><td>字符串</td><td>文本字符串</td></tr><tr><td>REG_MULTI_SZ</td><td>多字符串</td><td>含有多个文本值的字符串</td></tr><tr><td>REG_BINARY</td><td>二进制数</td><td>二进制值，以十六进制显示</td></tr><tr><td>REG_DWORD</td><td>双字</td><td>一个32位的二进制值，显示为8位的十六进制值</td></tr></tbody></table><h2 id="2-3-几个主键简介"><a href="#2-3-几个主键简介" class="headerlink" title="2.3.几个主键简介"></a>2.3.几个主键简介</h2><p>（1）<code>HKEY_CLASSES_ROOT</code></p><p>在注册表中HKEY_CLASSES_ROOT是系统中控制所有数据文件的项。HKEY_CLASSES_ROOT控制键包括了所有文件扩展和所有和执行文件相关的文件。它同样也决定了当一个文件被双击时起反应的相关应用程序。 HKEY_CLASSES_ROOT被用作程序员在安装软件时方便的发送信息，在Win95和Winnt中，HKEY_CLASSES_ROOT和HKEY_LOCAL_MACHINE&#x2F;Software&#x2F;Classes是相同的。程序员在运行他们的启动程序时不需要担忧实际的位置，相反的，他们只需要在HKEY_CLASSES_ROOT中加入数据就可以了。</p><p>（2）<code>HKEY_CURRENT_CONFIG</code></p><p>win95一般只使用一个硬件配置文件。如果有多个硬件配置文件。HKEY_LOCAL_MACHINE&#x2F;Config中就会添加一个键。HKEY_LOCAL_MACHINE&#x2F;Config包含了HKEY_LOCAL_MACHINE中相同的数据。</p><p>在启动时，你可以选择你愿意使用的配置文件。如果有多个安装，每次系统重新启动时，你就必须选择。HKEY_CURRENT_CONFIG是在启动时控制目前硬件配置的键。在系统启动以后，任何地方的变化都会自动影响到它。程序员经常使用HKEY_CURRENT_CONFIG方便的来存取配置信息。HKEY_CURRENT_CONFIG包括了系统中现有的所有配置文件的细节。你的选择影响了哪一个硬件配置文件成为现在的。举例来说，如果配置0002被选择了，所有0002的配置信息会被映射到这些键上。HKEY_CURRENT_CONFIG允许软件和设备驱动程序员很方便的更新注册表，而不涉及到多个配置文件信息。 HKEY_LOCAL_MACHINE中同样的数据和任何注册表的变化都会同时的变化。</p><p>（3）<code>HKEY_USERS</code></p><p>HKEY_USERS将缺省用户和目前登陆用户的信息输入到注册表编辑器，在win95中，它仅被那些配置文件激活的登陆用户使用，同样在winnt下，它也是这样。 win95从user.dat中取得他们的信息，winnt从ntuser.dat中取得信息。.dat文件包含了所有基于用户的注册表设置并且允许你取配置这些用户的环境。如果你改变了缺省用户的设置，所有新用户会继承同样的设置。而且，那些已经被建立的用户变的失效。</p><p>（4）<code>HKEY_LOCAL_MACHINE</code></p><p>HKEY_LOCAL_MACHINE是一个显示控制系统和软件的处理键。HKLM键保存着计算机的系统信息。它包括网络和硬件上所有的软件设置。（比如文件的位置，注册和未注册的状态，版本号等等）这些设置和用户无关，因为这些设置是针对使用这个系统的所有用户的。</p><p>（5）<code>HKEY_CURRENT_USER</code></p><p>HKEY_CURRENT_USER包含着在HKEY_USERS安全辨别里列出的同样信息。任何在HKEY_CURRENT_USER里的改动也都会立即HKEY_USERS改动。相反也是这样。 HKEY_CURRENT_USER允许程序员和开发者易于存取目前登陆用户的设置。通过建立这个键，微软很容易在不涉及到用户的SID下改变，添加和设置。也就是说，所有当前的操作改变只是针对当前用户而改变，并不影响其他用户。</p><h1 id="3-C-操作注册表"><a href="#3-C-操作注册表" class="headerlink" title="3. C++操作注册表"></a>3. C++操作注册表</h1><p>Windows注册表（Registry）是Windows操作系统中用于存储系统配置信息、用户设置和应用程序数据的一个集中式数据库。它是一个层次结构的数据库，由键（Key）和值（Value）组成，这些键和值被用于存储各种系统和应用程序的配置信息。</p><p>以下是注册表的一些基本概念：</p><ol><li>键（Key）： 注册表中的数据结构，类似于文件夹，用于组织和存储相关的信息。每个键可以包含子键和&#x2F;或值。</li><li>子键（Subkey）： 位于注册表中的键的层次结构中的更深一层的键。子键可以包含其他子键或值。</li><li>值（Value）： 存储在注册表中的数据单元，通常与键相关联。值可以包含配置信息、用户设置等数据。</li><li>数据类型（Data Type）： 值的数据类型定义了值的内容和用途。常见的数据类型包括字符串、整数、二进制数据等。</li><li>根键（Root Key）： 注册表的最顶层，有几个根键，常见的包括 <code>HKEY_CLASSES_ROOT</code>、<code>HKEY_CURRENT_USER</code>、<code>HKEY_LOCAL_MACHINE</code> 等。</li></ol><p>Windows注册表的作用包括：</p><ul><li>存储系统配置信息： 注册表中存储了操作系统的配置信息，包括系统启动时需要加载的驱动程序、系统服务、文件关联等。</li><li>存储用户设置： 注册表中存储了用户特定的设置，如桌面背景、主题、鼠标指针样式等。</li><li>应用程序配置： 许多应用程序使用注册表存储其配置信息。当应用程序安装时，它可能会在注册表中创建相关的键和值来保存配置。</li><li>组织系统和应用程序数据： 注册表提供了一个结构化的方式来组织系统和应用程序需要存储的数据，使得操作系统和应用程序可以轻松地检索和修改配置信息。</li><li>提供对系统设置的访问： 通过注册表，用户和系统管理员可以访问和修改系统的各种设置，从而对系统行为进行调整和优化。</li></ul><h3 id="枚举注册表项"><a href="#枚举注册表项" class="headerlink" title="枚举注册表项"></a>枚举注册表项</h3><p><code>RegOpenKeyEx</code> 是一个用于打开指定的注册表键的 Windows API 函数。它允许应用程序访问和操作 Windows 注册表的子键。在较新的 Windows 版本中，例如 Windows 10，<code>RegOpenKeyEx</code> 已被推荐的函数 <code>RegOpenKey</code> 和 <code>RegOpenKeyEx</code> 代替。以下是 <code>RegOpenKeyEx</code> 的一般用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LSTATUS <span class="hljs-title">RegOpenKeyEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    HKEY    hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPCTSTR lpSubKey,</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD   ulOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    REGSAM  samDesired,</span></span><br><span class="hljs-params"><span class="hljs-function">    PHKEY   phkResult</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>hKey</code>: 指定要打开的基础键的句柄，可以是 <code>HKEY_CLASSES_ROOT</code>、<code>HKEY_CURRENT_USER</code>、<code>HKEY_LOCAL_MACHINE</code> 等。</li><li><code>lpSubKey</code>: 指定相对于 <code>hKey</code> 的子键路径。</li><li><code>ulOptions</code>: 保留参数，通常可以设置为 0。</li><li><code>samDesired</code>: 指定键的访问权限，例如 <code>KEY_READ</code> 或 <code>KEY_WRITE</code>。</li><li><code>phkResult</code>: 接收指向打开的注册表键的句柄的指针。</li></ul><p>函数返回值：</p><ul><li>如果函数调用成功，返回 <code>ERROR_SUCCESS</code>。</li><li>如果函数调用失败，返回一个错误代码。</li></ul><p><code>RegEnumValue</code> 用于列举指定注册表键中的值。它可以用来遍历注册表键中的所有值，以便你可以获取键中包含的信息。以下是 <code>RegEnumValue</code> 的一般用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LSTATUS <span class="hljs-title">RegEnumValue</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    HKEY    hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD   dwIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPTSTR  lpValueName,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPDWORD lpcchValueName,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPDWORD lpReserved,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPDWORD lpType,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPBYTE  lpData,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPDWORD lpcbData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>hKey</code>: 指定要列举值的注册表键的句柄。</li><li><code>dwIndex</code>: 指定要检索的值的索引。从 0 开始，逐渐递增。</li><li><code>lpValueName</code>: 接收值的名称的缓冲区。</li><li><code>lpcchValueName</code>: 接收值名称的缓冲区大小的指针。在调用函数之前，你应该将其设置为缓冲区大小。</li><li><code>lpReserved</code>: 保留参数，通常可以设置为 NULL。</li><li><code>lpType</code>: 接收值的数据类型的指针。</li><li><code>lpData</code>: 接收值的数据的缓冲区。</li><li><code>lpcbData</code>: 接收数据缓冲区大小的指针。在调用函数之前，你应该将其设置为缓冲区大小。</li></ul><p>函数返回值：</p><ul><li>如果函数调用成功，返回 <code>ERROR_SUCCESS</code>。</li><li>如果函数调用失败，返回一个错误代码。</li></ul><p>枚举指定键值对中是否存在值，如果存在则循环将其输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Enum_Regedit</span><span class="hljs-params">(HKEY Reg_Root,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Reg_Path)</span></span><br><span class="hljs-function"></span>&#123;<br>    HKEY hKey = <span class="hljs-literal">NULL</span>;<br>    DWORD dwType = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> szValueName[MAXBYTE], szValueKey[MAXBYTE] = &#123; <span class="hljs-number">0</span> &#125;;<br>    DWORD dwBufferSize = MAXBYTE, dwKeySize = MAXBYTE;<br><br>    <span class="hljs-comment">// 打开注册表项</span><br>    LONG lRet = <span class="hljs-built_in">RegOpenKeyEx</span>(Reg_Root, Reg_Path, <span class="hljs-number">0</span>, KEY_ALL_ACCESS, &amp;hKey);<br><br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-comment">// 枚举注册表键项</span><br>            lRet = <span class="hljs-built_in">RegEnumValue</span>(hKey, index, szValueName, &amp;dwBufferSize, <span class="hljs-literal">NULL</span>,<br>                &amp;dwType, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)szValueKey, &amp;dwKeySize);<br><br>            <span class="hljs-keyword">if</span> (lRet == ERROR_NO_MORE_ITEMS)<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;序号: %3d 名称: %-25s 值: %-50s 类型: &quot;</span>, index, szValueName, szValueKey);<br>            <span class="hljs-keyword">switch</span> (dwType)<br>                &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;REG_SZ \n&quot;</span>); <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;REG_EXPAND_SZ \n&quot;</span>); <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;REG_DWORD \n&quot;</span>); <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;REG_MULTI_SZ \n&quot;</span>); <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>: <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;None \n&quot;</span>); <span class="hljs-keyword">break</span>;<br>                &#125;<br>            dwBufferSize = MAXBYTE;<br>            dwKeySize = MAXBYTE;<br>            index++;<br>        &#125;<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 枚举普通启动项</span><br>    <span class="hljs-built_in">Enum_Regedit</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>);<br>    <span class="hljs-built_in">Enum_Regedit</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>);<br><br>    <span class="hljs-comment">// 枚举Boot启动项</span><br>    <span class="hljs-comment">// HKLM\System\CurrentControlSet\Control\Session Manager\BootExecute</span><br>    <span class="hljs-built_in">Enum_Regedit</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;System\\CurrentControlSet\\Control\\Session Manager\\&quot;</span>);<br><br>    <span class="hljs-comment">// 枚举ActiveX启动项,在子键中添加SubPath即可完成开机自启动.</span><br>    <span class="hljs-built_in">Enum_Regedit</span>(HKEY_LOCAL_MACHINE, <span class="hljs-string">&quot;SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\&quot;</span>);<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="添加注册表项"><a href="#添加注册表项" class="headerlink" title="添加注册表项"></a>添加注册表项</h3><p><code>RegCreateKey</code> 是用于创建或打开指定的注册表键。如果键不存在，则它将被创建；如果存在，则它将被打开。以下是 <code>RegCreateKey</code> 的一般用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LSTATUS <span class="hljs-title">RegCreateKey</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY    hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpSubKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  PHKEY   phkResult</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>hKey</code>: 指定要创建或打开的基础键的句柄，可以是 <code>HKEY_CLASSES_ROOT</code>、<code>HKEY_CURRENT_USER</code>、<code>HKEY_LOCAL_MACHINE</code> 等。</li><li><code>lpSubKey</code>: 指定相对于 <code>hKey</code> 的子键路径。</li><li><code>phkResult</code>: 接收指向创建或打开的注册表键的句柄的指针。</li></ul><p>函数返回值：</p><ul><li>如果函数调用成功，返回 <code>ERROR_SUCCESS</code>。</li><li>如果函数调用失败，返回一个错误代码。</li></ul><p><code>RegSetValueEx</code> 是用于在指定的注册表键中设置一个值。它可以用于创建新的键值，也可以用于修改现有键值。以下是 <code>RegSetValueEx</code> 的一般用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LSTATUS <span class="hljs-title">RegSetValueEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY       hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR    lpValueName,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD      Reserved,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD      dwType,</span></span><br><span class="hljs-params"><span class="hljs-function">  <span class="hljs-type">const</span> BYTE *lpData,</span></span><br><span class="hljs-params"><span class="hljs-function">  DWORD      cbData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>hKey</code>: 指定要设置值的注册表键的句柄。</li><li><code>lpValueName</code>: 指定要设置的值的名称。</li><li><code>Reserved</code>: 保留参数，通常可以设置为 0。</li><li><code>dwType</code>: 指定值的数据类型，例如 <code>REG_SZ</code> 表示字符串。</li><li><code>lpData</code>: 指定要设置的值的数据。</li><li><code>cbData</code>: 指定数据的大小。</li></ul><p>函数返回值：</p><ul><li>如果函数调用成功，返回 <code>ERROR_SUCCESS</code>。</li><li>如果函数调用失败，返回一个错误代码。</li></ul><p>通过获取自身进程名称，并将该进程路径写入到<code>CurrentVersion</code>变量中实现开机自启。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Reg_Path <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">Reg_Regedit</span><span class="hljs-params">(HKEY Reg_Root,<span class="hljs-type">char</span> *lpszFileName, <span class="hljs-type">char</span> *lpszValueName)</span></span><br><span class="hljs-function"></span>&#123;<br>    HKEY hKey;<br>    <span class="hljs-keyword">if</span> (ERROR_SUCCESS != <span class="hljs-built_in">RegOpenKeyEx</span>(Reg_Root, Reg_Path, <span class="hljs-number">0</span>, KEY_WRITE, &amp;hKey))<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ERROR_SUCCESS != <span class="hljs-built_in">RegSetValueEx</span>(hKey, lpszValueName, <span class="hljs-number">0</span>, REG_SZ, (BYTE *)lpszFileName, (<span class="hljs-number">1</span> + ::<span class="hljs-built_in">lstrlen</span>(lpszFileName))))<br>    &#123;<br>        <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    TCHAR szPath[MAX_PATH] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-literal">NULL</span>, szPath, MAX_PATH))<br>    &#123;<br>        <span class="hljs-type">int</span> ret = <span class="hljs-built_in">Reg_Regedit</span>(HKEY_CURRENT_USER, szPath, <span class="hljs-string">&quot;main&quot;</span>);<br>        <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;添加自身启动项成功 \n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注册表项不仅可以实现开机自启动，由于Win系统都是在注册表之上工作的，只要向指定位置写入键值,即可实现许多不可思议的功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 禁用系统任务管理器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RegTaskmanagerForbidden</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HKEY hkey;<br>    DWORD value = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">RegCreateKey</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System&quot;</span>, &amp;hkey);<br>    <span class="hljs-built_in">RegSetValueEx</span>(hkey, <span class="hljs-string">&quot;DisableTaskMgr&quot;</span>, <span class="hljs-literal">NULL</span>, REG_DWORD, (LPBYTE)&amp;value, <span class="hljs-built_in">sizeof</span>(DWORD));<br>    <span class="hljs-built_in">RegCloseKey</span>(hkey);<br>&#125;<br><br><span class="hljs-comment">// 禁用注册表编辑器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RegEditForbidden</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HKEY hkey;<br>    DWORD value = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">RegCreateKey</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System&quot;</span>, &amp;hkey);<br>    <span class="hljs-built_in">RegSetValueEx</span>(hkey, <span class="hljs-string">&quot;DisableRegistryTools&quot;</span>, <span class="hljs-literal">NULL</span>, REG_DWORD, (LPBYTE)&amp;value, <span class="hljs-built_in">sizeof</span>(DWORD));<br>    <span class="hljs-built_in">RegCloseKey</span>(hkey);<br>&#125;<br><br><span class="hljs-comment">// 干掉桌面壁纸</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RegModifyBackroud</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD value = <span class="hljs-number">1</span>;<br>    HKEY hkey;<br>    <span class="hljs-built_in">RegCreateKey</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System&quot;</span>, &amp;hkey);<br>    <span class="hljs-built_in">RegSetValueEx</span>(hkey, <span class="hljs-string">&quot;Wallpaper&quot;</span>, <span class="hljs-literal">NULL</span>, REG_SZ, (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)<span class="hljs-string">&quot;c://&quot;</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">RegSetValueEx</span>(hkey, <span class="hljs-string">&quot;WallpaperStyle&quot;</span>, <span class="hljs-literal">NULL</span>, REG_DWORD, (LPBYTE)&amp;value, <span class="hljs-built_in">sizeof</span>(DWORD));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断键值状态"><a href="#判断键值状态" class="headerlink" title="判断键值状态"></a>判断键值状态</h3><p><code>RegQueryValueEx</code> 是用于检索指定注册表键中的指定值。它可以用来获取注册表键中的数据，例如字符串、整数等。以下是 <code>RegQueryValueEx</code> 的一般用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LSTATUS <span class="hljs-title">RegQueryValueEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY    hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpValueName,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpReserved,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpType,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPBYTE  lpData,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPDWORD lpcbData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>hKey</code>: 指定要查询值的注册表键的句柄。</li><li><code>lpValueName</code>: 指定要查询的值的名称。</li><li><code>lpReserved</code>: 保留参数，通常可以设置为 NULL。</li><li><code>lpType</code>: 接收值的数据类型的指针。</li><li><code>lpData</code>: 接收值的数据的缓冲区。</li><li><code>lpcbData</code>: 接收数据缓冲区大小的指针。在调用函数之前，你应该将其设置为缓冲区大小。</li></ul><p>函数返回值：</p><ul><li>如果函数调用成功，返回 <code>ERROR_SUCCESS</code>。</li><li>如果函数调用失败，返回一个错误代码。</li></ul><p>判断指定键值对是否存在,是否被设置过.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Reg_Path <span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">Check_Regedit</span><span class="hljs-params">(HKEY Reg_Root,<span class="hljs-type">char</span> * name)</span></span><br><span class="hljs-function"></span>&#123;<br>    HKEY hKey;<br>    <span class="hljs-keyword">if</span> (ERROR_SUCCESS == <span class="hljs-built_in">RegOpenKeyEx</span>(Reg_Root, Reg_Path, <span class="hljs-literal">NULL</span>, KEY_ALL_ACCESS, &amp;hKey))<br>    &#123;<br>        DWORD dwSize = <span class="hljs-number">255</span>, dwType = REG_SZ;<br>        <span class="hljs-type">char</span> String[<span class="hljs-number">256</span>];<br>        <span class="hljs-keyword">if</span> (ERROR_SUCCESS == <span class="hljs-built_in">RegQueryValueEx</span>(hKey, name, <span class="hljs-number">0</span>, &amp;dwType, (BYTE *)String, &amp;dwSize))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-built_in">Check_Regedit</span>(HKEY_CURRENT_USER, <span class="hljs-string">&quot;ctfmon&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;启动项存在: %d \n&quot;</span>, ret);<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h3><p><code>RegDeleteValue</code> 是用于删除指定注册表键中的指定值。它可以用来删除注册表键中的数据值。以下是 <code>RegDeleteValue</code> 的一般用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LSTATUS <span class="hljs-title">RegDeleteValue</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HKEY    hKey,</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpValueName</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>hKey</code>: 指定要删除值的注册表键的句柄。</li><li><code>lpValueName</code>: 指定要删除的值的名称。</li></ul><p>函数返回值：</p><ul><li>如果函数调用成功，返回 <code>ERROR_SUCCESS</code>。</li><li>如果函数调用失败，返回一个错误代码。</li></ul><p>传入需要删除的注册表位置，以及该表中键值对的名字即可完成删除。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete_Regedit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Reg_Path,<span class="hljs-type">const</span> <span class="hljs-type">char</span> *Key_Name)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> szKeyName[MAXBYTE] = &#123; <span class="hljs-number">0</span> &#125;;<br>    HKEY hKey = <span class="hljs-literal">NULL</span>;<br>    LONG lRet = <span class="hljs-built_in">RegOpenKeyEx</span>(HKEY_LOCAL_MACHINE, Reg_Path, <span class="hljs-number">0</span>, KEY_ALL_ACCESS, &amp;hKey);<br>    <span class="hljs-built_in">RegDeleteValue</span>(hKey, Key_Name);<br>    <span class="hljs-built_in">RegCloseKey</span>(hKey);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Delete_Regedit</span>(<span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span>, <span class="hljs-string">&quot;main1&quot;</span>);<br><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>文章出处：<a href="https://www.cnblogs.com/LyShark/p/17850186.html">https://www.cnblogs.com/LyShark/p/17850186.html</a>  </p></blockquote><blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>找不到映射的网络驱动器</title>
    <link href="/2024/06/26/Win32_Api/%E6%89%BE%E4%B8%8D%E5%88%B0%E6%98%A0%E5%B0%84%E7%9A%84%E7%BD%91%E7%BB%9C%E9%A9%B1%E5%8A%A8%E5%99%A8/"/>
    <url>/2024/06/26/Win32_Api/%E6%89%BE%E4%B8%8D%E5%88%B0%E6%98%A0%E5%B0%84%E7%9A%84%E7%BD%91%E7%BB%9C%E9%A9%B1%E5%8A%A8%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>从Windows功能打开SMB 直通并编辑名为EnableLinkedConnections的注册表项。</p><ul><li>打开“程序和功能”里的“启用或关闭Windows功能”，“SMB直通”前打上勾</li><li>注册表创建EnableLinkedConnections</li></ul><p>步骤：</p><ol><li>单击“开始”，在“运行”框中键入regedit，然后按Enter。</li><li>找到并右键单击注册表子项HKEY_LOCAL_MACHINE \ SOFTWARE \ Microsoft \ Windows \ CurrentVersion \ Policies \ System。</li><li>指向“新建”，然后单击“DWORD值”。</li><li>键入EnableLinkedConnections，然后按Enter。</li><li>右键单击“EnableLinkedConnections”，然后单击“修改”。</li><li>在“数值数据”框中，键入1，然后单击“确定”。</li><li>退出注册表编辑器，然后重新启动计算机</li></ol>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>获取当前进程是否处于系统管理员权限下</title>
    <link href="/2024/06/26/Win32_Api/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E4%B8%8B/"/>
    <url>/2024/06/26/Win32_Api/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="IsUserAnAdmin-函数-shlobj-core-h"><a href="#IsUserAnAdmin-函数-shlobj-core-h" class="headerlink" title="IsUserAnAdmin 函数 (shlobj_core.h)"></a><font style="color:rgb(22, 22, 22);">IsUserAnAdmin 函数 (shlobj_core.h)</font></h1><p><font style="color:rgb(22, 22, 22);">[</font><strong><font style="color:rgb(22, 22, 22);">IsUserAnAdmin</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">可用于“要求”部分中指定的操作系统。 在后续版本中，它可能已更改或不可用。]</font></p><p><font style="color:rgb(22, 22, 22);">测试当前用户是否是管理员组的成员。</font></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">IsUserAnAdmin</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">类型：</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">BOOL</font></strong></p><p><font style="color:rgb(22, 22, 22);">如果用户是管理员组的成员，则返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">TRUE</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">;否则为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">FALSE</font></strong><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:#DF2A3F;">此函数是 </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/securitybaseapi/nf-securitybaseapi-checktokenmembership"><font style="color:#DF2A3F;">CheckTokenMembership</font></a><font style="color:#DF2A3F;"> 的包装器。 建议直接调用该函数来确定管理员组状态，而不是调用 </font><strong><font style="color:#DF2A3F;">IsUserAnAdmin</font></strong><font style="color:#DF2A3F;">。</font></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><p><strong>展开表</strong></p><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);">要求</font></th><th align="left"><font style="color:rgb(22, 22, 22);">值</font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows XP [仅限桌面应用]</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的服务器</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows Server 2003 [仅限桌面应用]</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">shlobj_core.h (包括 Shlobj.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Shell32.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Shell32.dll (5.0 或更高版本)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">API 集</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows 10版本 10.0.10240 中引入的 ext-ms-win-shell-shell32-l1-2-1 ()</font></td></tr></tbody></table><h2 id="另请参阅"><a href="#另请参阅" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/securitybaseapi/nf-securitybaseapi-checktokenmembership"><font style="color:rgb(0, 101, 179);">CheckTokenMembership</font></a></p><hr><h1 id="CheckTokenMembership-函数-securitybaseapi-h"><a href="#CheckTokenMembership-函数-securitybaseapi-h" class="headerlink" title="CheckTokenMembership 函数 (securitybaseapi.h)"></a><font style="color:rgb(22, 22, 22);">CheckTokenMembership 函数 (securitybaseapi.h)</font></h1><p><strong><font style="color:rgb(22, 22, 22);">CheckTokenMembership</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数确定是否在</font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/a-gly"><font style="color:rgb(0, 101, 179);">访问令牌</font></a><font style="color:rgb(22, 22, 22);">中启用指定的</font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/s-gly"><font style="color:rgb(0, 101, 179);">安全标识符</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">(SID) 。 如果要确定应用容器令牌的组成员身份，则需要使用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/securitybaseapi/nf-securitybaseapi-checktokenmembershipex"><font style="color:rgb(0, 101, 179);">CheckTokenMembershipEx</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数。</font></p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">CheckTokenMembership</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] HANDLE TokenHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           PSID   SidToCheck,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out]          PBOOL  IsMember</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a><font style="color:rgb(22, 22, 22);">parameters</font></h2><p><code>[in, optional] TokenHandle</code></p><p><font style="color:rgb(22, 22, 22);">访问令牌的句柄。 句柄必须具有对令牌TOKEN_QUERY访问权限。 令牌必须是</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/i-gly"><font style="color:rgb(0, 101, 179);">模拟令牌</font></a><font style="color:rgb(22, 22, 22);">。</font></p><p><font style="color:rgb(22, 22, 22);">如果</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">TokenHandle</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">，</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">则 CheckTokenMembership</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">使用调用线程的模拟令牌。 如果线程未模拟，该函数将复制线程</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/p-gly"><font style="color:rgb(0, 101, 179);">的主令牌</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">以创建</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecGloss/i-gly"><font style="color:rgb(0, 101, 179);">模拟令牌</font></a><font style="color:rgb(22, 22, 22);">。</font></p><p><code>[in] SidToCheck</code></p><p><font style="color:rgb(22, 22, 22);">指向</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/winnt/ns-winnt-sid"><font style="color:rgb(0, 101, 179);">SID</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">结构的指针。</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">CheckTokenMembership</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数检查访问令牌的用户和组 SID 中是否存在此 SID。</font></p><p><code>[out] IsMember</code></p><p><font style="color:rgb(22, 22, 22);">指向接收检查结果的变量的指针。 如果 SID 存在并且具有 SE_GROUP_ENABLED 属性，</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">则 IsMember</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">TRUE</font></strong><font style="color:rgb(22, 22, 22);">;否则返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">FALSE</font></strong><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果该函数成功，则返回值为非零值。</font></p><p><font style="color:rgb(22, 22, 22);">如果函数失败，则返回值为零。 要获得更多的错误信息，请调用 GetLastError。</font></p><h2 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><strong><font style="color:rgb(22, 22, 22);">CheckTokenMembership</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数简化了确定访问令牌中是否同时存在和已启用 SID 的过程。</font></p><p><font style="color:rgb(22, 22, 22);">即使令牌中存在 SID，系统也不得在访问检查中使用 SID。 SID 可能已禁用或具有</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SE_GROUP_USE_FOR_DENY_ONLY</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">属性。 在执行访问检查时，系统仅使用已启用的 SID 授予访问权限。 有关详细信息，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecAuthZ/sid-attributes-in-an-access-token"><font style="color:rgb(0, 101, 179);">访问令牌中的 SID 属性</font></a><font style="color:rgb(22, 22, 22);">。</font></p><p><font style="color:rgb(22, 22, 22);">如果</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">TokenHandle</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">是受限令牌，或者</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">TokenHandle</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">，并且调用线程的当前有效令牌是受限令牌，</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">则 CheckTokenMembership</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">还会检查 SID 是否存在于限制 SID 列表中。</font></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><font style="color:rgb(22, 22, 22);">示例</font></h2><p><font style="color:rgb(22, 22, 22);">以下示例演示如何检查管理员本地组中的成员身份的令牌。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">IsUserAdmin</span><span class="hljs-params">(VOID)</span></span><br><span class="hljs-function"><span class="hljs-comment">/*++ </span></span><br><span class="hljs-comment"><span class="hljs-function">Routine Description: This routine returns TRUE if the caller&#x27;s</span></span><br><span class="hljs-comment"><span class="hljs-function">process is a member of the Administrators local group. Caller is NOT</span></span><br><span class="hljs-comment"><span class="hljs-function">expected to be impersonating anyone and is expected to be able to</span></span><br><span class="hljs-comment"><span class="hljs-function">open its own process and process token. </span></span><br><span class="hljs-comment"><span class="hljs-function">Arguments: None. </span></span><br><span class="hljs-comment"><span class="hljs-function">Return Value: </span></span><br><span class="hljs-comment"><span class="hljs-function">   TRUE - Caller has Administrators local group. </span></span><br><span class="hljs-comment"><span class="hljs-function">   FALSE - Caller does not have Administrators local group. --</span></span><br><span class="hljs-comment"><span class="hljs-function">*/</span> </span><br><span class="hljs-function"></span>&#123;<br>    BOOL b;<br>    SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;<br>    PSID AdministratorsGroup;<br>    b = <span class="hljs-built_in">AllocateAndInitializeSid</span>(<br>        &amp;NtAuthority,<br>        <span class="hljs-number">2</span>,<br>        SECURITY_BUILTIN_DOMAIN_RID,<br>        DOMAIN_ALIAS_RID_ADMINS,<br>        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>        &amp;AdministratorsGroup );<br><br>    <span class="hljs-keyword">if</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CheckTokenMembership</span>( <span class="hljs-literal">NULL</span>, AdministratorsGroup, &amp;b))<br>        &#123;<br>             b = FALSE;<br>        &#125;<br>        <span class="hljs-built_in">FreeSid</span>(AdministratorsGroup);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span>(b);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><p><strong>展开表</strong></p><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows XP [桌面应用</td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的服务器</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows Server 2003 [桌面应用</td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">securitybaseapi.h (包括 Windows.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Advapi32.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Advapi32.dll</font></td></tr></tbody></table><h2 id="请参阅"><a href="#请参阅" class="headerlink" title="请参阅"></a><font style="color:rgb(22, 22, 22);">请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecAuthZ/access-control"><font style="color:rgb(0, 101, 179);">访问控制概述</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/securitybaseapi/nf-securitybaseapi-accesscheck"><font style="color:rgb(0, 101, 179);">AccessCheck</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/SecAuthZ/authorization-functions"><font style="color:rgb(0, 101, 179);">基本访问控制函数</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/securitybaseapi/nf-securitybaseapi-checktokenmembershipex"><font style="color:rgb(0, 101, 179);">CheckTokenMembershipEx</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/securitybaseapi/nf-securitybaseapi-createrestrictedtoken"><font style="color:rgb(0, 101, 179);">CreateRestrictedToken</font></a></p><hr><h1 id="GetTokenInformation-函数-securitybaseapi-h"><a href="#GetTokenInformation-函数-securitybaseapi-h" class="headerlink" title="GetTokenInformation 函数 (securitybaseapi.h)"></a><font style="color:rgb(22, 22, 22);">GetTokenInformation 函数 (securitybaseapi.h)</font></h1><p>此函数可以获取一个进程的特权，当进程被加载到内存后，会被分配一个结构体，里面包含进程的一些特权，我们可以通过这个函数获取到这个结构体，并得到我们想要的信息</p><h3 id="函数原型："><a href="#函数原型：" class="headerlink" title="函数原型："></a>函数原型：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">GetTokenInformation</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            HANDLE                  TokenHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            TOKEN_INFORMATION_CLASS TokenInformationClass,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] LPVOID                  TokenInformation,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            DWORD                   TokenInformationLength,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out]           PDWORD                  ReturnLength</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><code>[in] HANDLE TokenHandle</code></p><p>令牌指针可以使用OpenProcessToken函数获取</p><p><code>[in]TOKEN_INFORMATION_CLASS TokenInformationClass,</code></p><p>要获取的信息类型</p><p><code>  [out, optional] LPVOID TokenInformation,</code></p><p>返回的信息存放内存</p><p><code>[in] DWORD TokenInformationLength</code></p><p>存放的内存大小</p><p><code>[out] PDWORD ReturnLength</code></p><p>返回到的内存实际大小</p><h2 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">IsAdministrator</span><span class="hljs-params">()</span> <span class="hljs-comment">//判断是否管理员模式</span></span><br><span class="hljs-function"></span>&#123;<br>    BOOL bIsElevated = FALSE;<br>    HANDLE hToken = <span class="hljs-literal">NULL</span>;<br>    UINT16 uWinVer = <span class="hljs-built_in">LOWORD</span>(<span class="hljs-built_in">GetVersion</span>());<br>    uWinVer = <span class="hljs-built_in">MAKEWORD</span>(<span class="hljs-built_in">HIBYTE</span>(uWinVer),<span class="hljs-built_in">LOBYTE</span>(uWinVer));<br><br>    <span class="hljs-keyword">if</span> (uWinVer &lt; <span class="hljs-number">0x0600</span>)<span class="hljs-comment">//不是VISTA、Windows7</span><br>        <span class="hljs-keyword">return</span>(FALSE);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(),TOKEN_QUERY,&amp;hToken)) &#123;<br><br>        <span class="hljs-keyword">struct</span> &#123;<br>            DWORD TokenIsElevated;<br>        &#125; <span class="hljs-comment">/*TOKEN_ELEVATION*/</span>te;<br>        DWORD dwReturnLength = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetTokenInformation</span>(hToken,<span class="hljs-comment">/*TokenElevation*/</span>(_TOKEN_INFORMATION_CLASS)<span class="hljs-number">20</span>,&amp;te,<span class="hljs-built_in">sizeof</span>(te),&amp;dwReturnLength)) &#123;<br>            <span class="hljs-keyword">if</span> (dwReturnLength == <span class="hljs-built_in">sizeof</span>(te))<br>                bIsElevated = te.TokenIsElevated;<br>        &#125;<br>        <span class="hljs-built_in">CloseHandle</span>( hToken );<br>    &#125;<br>    <span class="hljs-keyword">return</span> bIsElevated;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp">BOOL bElevated = FALSE;<span class="hljs-comment">//是否管理员</span><br><span class="hljs-comment">//1.得到自身进程的权限访问令牌</span><br>HANDLE hToken = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_QUERY, &amp;hToken))<br> <br><span class="hljs-keyword">return</span> FALSE;<br> <br> <br><span class="hljs-comment">//2.获取进程相关运行权限</span><br>TOKEN_ELEVATION tokenEle;<br>DWORD dwRetLen = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">GetTokenInformation</span>(hToken, TokenElevation, &amp;tokenEle, <span class="hljs-built_in">sizeof</span>(tokenEle), &amp;dwRetLen)) <br>&#123;<br><span class="hljs-comment">//如果接受到的内存大小和结构体成正比例，代表接受完整的进程权限数据</span><br><span class="hljs-keyword">if</span> (dwRetLen == <span class="hljs-built_in">sizeof</span>(tokenEle)) <br>&#123; <br><span class="hljs-comment">//取是否管理员布尔值</span><br>bElevated = tokenEle.TokenIsElevated; <br>&#125;<br>&#125;   <br><span class="hljs-comment">//关闭进程令牌</span><br><span class="hljs-built_in">CloseHandle</span>(hToken);  <br><span class="hljs-comment">//返回是否OK</span><br><span class="hljs-keyword">return</span> bElevated;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows下C++生成Dump调试文件与分析</title>
    <link href="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <url>/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h1><p><a href="https://so.csdn.net/so/search?q=dump%E6%96%87%E4%BB%B6&spm=1001.2101.3001.7020">dump文件</a><font style="color:rgb(38, 38, 38);">是C++程序发生异常时，保存当时程序运行状态的文件，是调试异常程序重要的方法，所以程序崩溃时，除了日志文件，dump文件便成了我们查找错误的最后一根救命的稻草。</font></p><h1 id="2、依赖库下载"><a href="#2、依赖库下载" class="headerlink" title="2、依赖库下载"></a>2、依赖库下载</h1><p><font style="color:rgb(38, 38, 38);">生成dump需要有Dbghelp的库，正常来说VS、qt都自带了。</font></p><h1 id="3、项目配置"><a href="#3、项目配置" class="headerlink" title="3、项目配置"></a>3、项目配置</h1><h2 id="3-1、设置输出路径"><a href="#3-1、设置输出路径" class="headerlink" title="3.1、设置输出路径"></a>3.1、设置输出路径</h2><p><font style="color:rgb(38, 38, 38);">步骤：右击项目-》属性-》配置属性-》常规 -》输出路径</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-0.png"></p><p><font style="color:rgb(77, 77, 77);">设置一个固定的输出路径，是为了方便存放</font><font style="color:rgb(38, 38, 38);">deghelp.dll</font><font style="color:rgb(77, 77, 77);">动态库。</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-1.png"></p><h2 id="3-2、拷贝依赖资源"><a href="#3-2、拷贝依赖资源" class="headerlink" title="3.2、拷贝依赖资源"></a>3.2、拷贝依赖资源</h2><p><font style="color:rgb(38, 38, 38);">1、将头文件拷贝至和main.cpp同级。</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-2.png"></p><p><font style="color:rgb(77, 77, 77);">2、将</font><font style="color:rgb(38, 38, 38);">dbghelp.lib</font><a href="https://so.csdn.net/so/search?q=%E9%9D%99%E6%80%81%E5%BA%93&spm=1001.2101.3001.7020">静态库</a><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(38, 38, 38);">dbghelp.dll</font><font style="color:rgb(77, 77, 77);">动态库拷贝至输出目录下（如果没有输出目录，请先运行一遍程序即可）</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-3.png"></p><h2 id="3-3-将dbghelp-h添加在工程中"><a href="#3-3-将dbghelp-h添加在工程中" class="headerlink" title="3.3 将dbghelp.h添加在工程中"></a>3.3 将dbghelp.h添加在工程中</h2><p><font style="color:rgb(38, 38, 38);">步骤：右击头文件目录-》点击添加-》现有项</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-4.png"></p><h2 id="3-4、配置lib文件路径"><a href="#3-4、配置lib文件路径" class="headerlink" title="3.4、配置lib文件路径"></a>3.4、配置lib文件路径</h2><p><font style="color:rgb(38, 38, 38);">步骤：右击项目-》属性-》配置属性-》链接器 -》输入-》附加依赖项 输入</font><font style="color:rgb(38, 38, 38);">dbghelp.lib</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-5.png"></p><h2 id="3-5、添加生成minidump文件方法"><a href="#3-5、添加生成minidump文件方法" class="headerlink" title="3.5、添加生成minidump文件方法"></a>3.5、添加生成minidump文件方法</h2><p>在main.cpp中添加<code>MyUnhandledExceptionFilter</code>方法。然后在main函数的开头添加<code>SetUnhandledExceptionFilter(MyUnhandledExceptionFilter);</code>代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Dbghelp.h&gt;</span></span><br><br><span class="hljs-function">LONG WINAPI <span class="hljs-title">MyUnhandledExceptionFilter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> _EXCEPTION_POINTERS* ExceptionInfo)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE lhDumpFile = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-string">L&quot;.\\bin_D\\miniDumpFile.dmp&quot;</span>, GENERIC_WRITE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, <span class="hljs-literal">NULL</span>);<br><br>    MINIDUMP_EXCEPTION_INFORMATION loExceptionInfo;<br><br>    loExceptionInfo.ExceptionPointers = ExceptionInfo;<br><br>    loExceptionInfo.ThreadId = <span class="hljs-built_in">GetCurrentThreadId</span>();<br><br>    loExceptionInfo.ClientPointers = TRUE;<br><br>    <span class="hljs-built_in">MiniDumpWriteDump</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), <span class="hljs-built_in">GetCurrentProcessId</span>(), lhDumpFile, MiniDumpNormal, &amp;loExceptionInfo, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-built_in">CloseHandle</span>(lhDumpFile);<br><br>    <span class="hljs-keyword">return</span> EXCEPTION_EXECUTE_HANDLER;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">SetUnhandledExceptionFilter</span>(MyUnhandledExceptionFilter);<br><br>    <span class="hljs-comment">//....</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、测试效果"><a href="#4、测试效果" class="headerlink" title="4、测试效果"></a>4、测试效果</h1><p><font style="color:rgb(38, 38, 38);">在main中添加下面的代码，然后运行，将会在工作路径下看到miniDumpFile.dmp文件</font></p><p><font style="color:rgb(77, 77, 77);">见下图。</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-6.png"></p><h1 id="5、打开dump文件进行定位"><a href="#5、打开dump文件进行定位" class="headerlink" title="5、打开dump文件进行定位"></a>5、打开dump文件进行定位</h1><p><font style="color:rgb(38, 38, 38);">有VS的情况下，可以直接双击xx.dmp文件。然后点击右侧的【仅限本机调试】</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-7.png"></p><p><font style="color:rgb(77, 77, 77);">然后我们就可以看到程序崩溃的位置，这时我们还可以查看堆栈、内存的信息。加快排查错误。</font></p><p><img src="/2024/05/08/Win32_Api/Windows%E4%B8%8BC++%E7%94%9F%E6%88%90Dump%E8%B0%83%E8%AF%95%E6%96%87%E4%BB%B6%E4%B8%8E%E5%88%86%E6%9E%90/image-8.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a / b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">SetUnhandledExceptionFilter</span>(MyUnhandledExceptionFilter);<br><br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><br>    std::cout &lt;&lt; <span class="hljs-built_in">test</span>(a, b) &lt;&lt; std::endl;<br>    <span class="hljs-comment">//....</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>VisualStudio下C++生成dump文件</title>
    <link href="/2024/05/08/Win32_Api/VisualStudio%E4%B8%8BC++%E7%94%9F%E6%88%90dump%E6%96%87%E4%BB%B6/"/>
    <url>/2024/05/08/Win32_Api/VisualStudio%E4%B8%8BC++%E7%94%9F%E6%88%90dump%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<ol><li>lib配置 项目–&gt;属性–&gt;配置属性–&gt;链接器–&gt;输入–&gt;附加依赖项 增加dbghelp.lib</li><li>头文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Windows.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;DbgHelp.h&quot;</span></span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GenerateMiniDump</span><span class="hljs-params">(PEXCEPTION_POINTERS pExceptionPointers)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 定义函数指针</span><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(WINAPI * MiniDumpWriteDumpT)</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        HANDLE,</span></span><br><span class="hljs-params"><span class="hljs-function">        DWORD,</span></span><br><span class="hljs-params"><span class="hljs-function">        HANDLE,</span></span><br><span class="hljs-params"><span class="hljs-function">        MINIDUMP_TYPE,</span></span><br><span class="hljs-params"><span class="hljs-function">        PMINIDUMP_EXCEPTION_INFORMATION,</span></span><br><span class="hljs-params"><span class="hljs-function">        PMINIDUMP_USER_STREAM_INFORMATION,</span></span><br><span class="hljs-params"><span class="hljs-function">        PMINIDUMP_CALLBACK_INFORMATION</span></span><br><span class="hljs-params"><span class="hljs-function">        )</span></span>;<br>    <span class="hljs-comment">// 从 &quot;DbgHelp.dll&quot; 库中获取 &quot;MiniDumpWriteDump&quot; 函数</span><br>    MiniDumpWriteDumpT pfnMiniDumpWriteDump = <span class="hljs-literal">NULL</span>;<br>    HMODULE hDbgHelp = <span class="hljs-built_in">LoadLibrary</span>(_T(<span class="hljs-string">&quot;DbgHelp.dll&quot;</span>));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == hDbgHelp)<br>    &#123;<br>        <span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>    &#125;<br>    pfnMiniDumpWriteDump = (MiniDumpWriteDumpT)<span class="hljs-built_in">GetProcAddress</span>(hDbgHelp, <span class="hljs-string">&quot;MiniDumpWriteDump&quot;</span>);<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pfnMiniDumpWriteDump)<br>    &#123;<br>        <span class="hljs-built_in">FreeLibrary</span>(hDbgHelp);<br>        <span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>    &#125;<br>    <span class="hljs-comment">// 创建 dmp 文件件</span><br>    TCHAR szFileName[MAX_PATH] = &#123;<span class="hljs-number">0</span>&#125;;<br>    TCHAR* szVersion = _T(<span class="hljs-string">&quot;DumpDemo_v1.0&quot;</span>);<br>    SYSTEMTIME stLocalTime;<br>    <span class="hljs-built_in">GetLocalTime</span>(&amp;stLocalTime);<br>    <span class="hljs-built_in">wsprintf</span>(szFileName, <span class="hljs-string">L&quot;%s-%04d%02d%02d-%02d%02d%02d.dmp&quot;</span>,<br>        szVersion, stLocalTime.wYear, stLocalTime.wMonth, stLocalTime.wDay,<br>        stLocalTime.wHour, stLocalTime.wMinute, stLocalTime.wSecond);<br>    HANDLE hDumpFile = <span class="hljs-built_in">CreateFile</span>(szFileName, GENERIC_READ | GENERIC_WRITE, <br>        FILE_SHARE_WRITE | FILE_SHARE_READ, <span class="hljs-number">0</span>, CREATE_ALWAYS, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (INVALID_HANDLE_VALUE == hDumpFile)<br>    &#123;<br>        <span class="hljs-built_in">FreeLibrary</span>(hDbgHelp);<br>        <span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_EXECUTION;<br>    &#125;<br>    <span class="hljs-comment">// 写入 dmp 文件</span><br>    MINIDUMP_EXCEPTION_INFORMATION expParam;<br>    expParam.ThreadId = <span class="hljs-built_in">GetCurrentThreadId</span>();<br>    expParam.ExceptionPointers = pExceptionPointers;<br>    expParam.ClientPointers = FALSE;<br>    <span class="hljs-built_in">pfnMiniDumpWriteDump</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), <span class="hljs-built_in">GetCurrentProcessId</span>(), <br>        hDumpFile, MiniDumpWithDataSegs, (pExceptionPointers ? &amp;expParam : <span class="hljs-literal">NULL</span>), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">// 释放文件</span><br>    <span class="hljs-built_in">CloseHandle</span>(hDumpFile);<br>    <span class="hljs-built_in">FreeLibrary</span>(hDbgHelp);<br>    <span class="hljs-keyword">return</span> EXCEPTION_EXECUTE_HANDLER;<br>&#125;<br> <br><span class="hljs-function">LONG WINAPI <span class="hljs-title">ExceptionFilter</span><span class="hljs-params">(LPEXCEPTION_POINTERS lpExceptionInfo)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 这里做一些异常的过滤或提示</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsDebuggerPresent</span>())<br>    &#123;<br>        <span class="hljs-keyword">return</span> EXCEPTION_CONTINUE_SEARCH;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">GenerateMiniDump</span>(lpExceptionInfo);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 加入崩溃dump文件功能</span><br>    <span class="hljs-built_in">SetUnhandledExceptionFilter</span>(ExceptionFilter);<br>    <span class="hljs-comment">// 使程序崩溃产生 Dump 文件</span><br>    <span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br>    *p=<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译项目 , 运行程序 , 就会发现在当前运行目录生成了 Dump 文件 , 类似 DumpDemo_v1.0-20170602-154446.dmp ;</p><p>生成 Dump 文件后 , 在我们开发本地双击dump文件会打开vs，再在右边点击本地调试，即可运行到奔溃的代码处</p><p>注意：当程序为Release时，需要在vs中右键项目属性-链接器-调试-生成调试信息，否则可能不会生成pdb文件，导致无法调试dump</p><p>调试的关键：源码文件+pdb文件+dump文件，而且版本要匹配</p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CreateEvent函数（synchapi.h）</title>
    <link href="/2024/04/19/Win32_Api/CreateEvent%E5%87%BD%E6%95%B0%EF%BC%88synchapi.h%EF%BC%89/"/>
    <url>/2024/04/19/Win32_Api/CreateEvent%E5%87%BD%E6%95%B0%EF%BC%88synchapi.h%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a><font style="color:rgb(51, 51, 51);">函数原型</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HANDLE <span class="hljs-title">CreateEvent</span><span class="hljs-params">(  </span></span><br><span class="hljs-params"><span class="hljs-function">  LPSECURITY_ATTRIBUTES lpEventAttributes, <span class="hljs-comment">// SD  </span></span></span><br><span class="hljs-params"><span class="hljs-function">  BOOL bManualReset,                       <span class="hljs-comment">// reset type  </span></span></span><br><span class="hljs-params"><span class="hljs-function">  BOOL bInitialState,                      <span class="hljs-comment">// initial state  </span></span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpName                           <span class="hljs-comment">// object name  </span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;  <br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>lpEventAttributes：</code></p><p><font style="color:rgb(51, 51, 51);">指向SECURITY_ATTRIBUTES结构体，</font><font style="color:rgb(51, 51, 51);background-color:rgb(255, 102, 102);">此结构体决定函数的返回句柄是否可以让子进程继承</font><font style="color:rgb(51, 51, 51);">。</font><font style="color:rgb(204, 0, 0);">如果这个参数为NULL，这个句柄是不能继承的</font><font style="color:rgb(51, 51, 51);">。一般情况下，这个参数设置为NULL。</font></p><p><code>bManualReset：</code></p><p><font style="color:rgb(51, 51, 51);">指定将创建的EVENT是</font><font style="color:rgb(204, 0, 0);">自动复位还是手动复位</font><font style="color:rgb(51, 51, 51);">。如果为TRUE，</font><font style="color:rgb(255, 0, 0);">需要用ResetEvent(HANDLE)函数手动复位状态为无信号</font><font style="color:rgb(51, 51, 51);">，即一旦改EVENT被设置成有信号，则它会一直等到ResetEvent调用时才为无信号状态。如果为FALSE，当</font><font style="color:rgb(51, 51, 51);background-color:rgb(255, 153, 102);">一个有信号的等待线程被释放后，系统会自动复位状态为无信号状态</font><font style="color:rgb(51, 51, 51);">。</font></p><p><code>bInitialState：</code></p><p><font style="color:rgb(51, 51, 51);">指定事件对象的初始状态。如果为TRUE，初始状态为有信号，否则为无信号。</font></p><p><code>lpName：</code>  </p><p><font style="color:rgb(51, 51, 51);">事件对象的名称，以字符串表示。名称的长度受MAX_PATH的限制，名称是大小写敏感的。</font><font style="color:rgb(51, 51, 51);background-color:rgb(255, 204, 153);">如果lpName匹配一个存在的命名的事件对象，函数将请求EVENT_ALL_ACCESS来访问存在的对象。在这种情况下，bManualReset和bInitialState 被忽略，因为这两个参数已经被存在的事件设置</font><font style="color:rgb(51, 51, 51);">。如果lpEventAttributes参数不为NULL，这个参数可以决定是否句柄被继承，但是它的安全描述（security-descriptor）成员被忽略。如果lpName 为NULL，创建一个没有名称的事件。如果lpName 匹配一个存在的semaphore, mutex, waitable timer, job或者file-mapping对象的名称，函数调用失败，GetLastError函数返回ERROR_INVALID_HANDLE。由于这些对象共享相同的命名空间，才导致这种情况的发生。</font></p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><font style="color:rgb(51, 51, 51);">返回值</font></h2><p><font style="color:rgb(51, 51, 51);">函数返回句柄，该句柄具有EVENT_ALL_ACCESS权限去访问新的事件对象，同时它可以在任何需要事件对象句柄的函数中使用。</font></p><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a><font style="color:rgb(22, 22, 22);">言论</font></h2><p><strong><font style="color:rgb(22, 22, 22);">    </font></strong><font style="color:rgb(51, 51, 51);">调用过程中的任何线程，都可以在一个等待函数中指定事件对象句柄。当指定的对象的状态为有信号时，单对象等待函数（例如WaitForSingleObject）返回。对于多对象等待函数（例如WaitForMultipleObjects），可以指定为任意或所有指定的对象被置为有信号状态。当等待函数返回时，等待线程将被释放去继续它的执行。   事件对象的初始状态由bInitialState参数指定，</font><font style="color:rgb(0, 102, 0);">用SetEvent函数可以设置对象为有信号状态，用ResetEvent函数可以设置对象为无信号状态</font><font style="color:rgb(51, 51, 51);">。   当一个手动复原的事件对象的状态被置为有信号状态时，该对象将一直保持有信号状态，直至明确调用ResetEvent函数将其置为无符号状态。</font><font style="color:rgb(51, 51, 51);background-color:rgb(204, 0, 0);">当事件对象被设置为有信号状态时，任何数量的等待线程或者随后等待的线程都会被释放</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">当一个自动复原事件对象的状态被设置为有信号状态时，该对象一直保持有信号状态，</font><font style="color:rgb(255, 0, 0);">直至一个单等待线程被释放；系统然后会自动重置对象到无信号状态</font><font style="color:rgb(51, 51, 51);">。<br></font><font style="color:rgb(51, 51, 51);"></font><font style="color:rgb(255, 102, 102);">多个进程可持有同一个事件对象的多个句柄，可以通过使用此对象来实现进程间的同步</font><font style="color:rgb(51, 51, 51);">。下面的对象共享机制是可行的：</font></p><ul><li><font style="color:rgb(51, 51, 51);">在CreateEvent函数中，lpEventAttributes参数指定句柄可被继承时，通过CreateProcess函数创建的子进程继承的事件对象句柄。</font></li><li><font style="color:rgb(51, 51, 51);">一个进程可以</font><font style="color:rgb(204, 0, 0);">在DuplicateHandle函数中指定事件对象句柄，从而获得一个复制的句柄</font><font style="color:rgb(51, 51, 51);">，此句柄可以被其它进程使用。</font></li><li><font style="color:rgb(51, 51, 51);">一个进程可以在OpenEvent或CreateEvent函数中指定一个名字，从而获得一个有名的事件对象句柄。（在调用OpenEvent或CreateEvent函数时，一个进程可以指定事件对象的名字。）</font></li><li><font style="color:rgb(51, 51, 51);"></font></li></ul><p><font style="color:rgb(22, 22, 22);">使用 </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/handleapi/nf-handleapi-closehandle"><font style="color:rgb(0, 101, 179);">CloseHandle</font></a><font style="color:rgb(22, 22, 22);"> 函数关闭句柄。 系统在进程终止时自动关闭句柄。 事件对象在关闭其最后一个句柄时被销毁。</font></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>定时任务实现</title>
    <link href="/2024/04/19/Win32_Api/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/04/19/Win32_Api/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="timeSetEvent"><a href="#timeSetEvent" class="headerlink" title="timeSetEvent()"></a>timeSetEvent()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">MMRESULT <span class="hljs-title">timeSetEvent</span><span class="hljs-params">(UINT uDelay, </span></span><br><span class="hljs-params"><span class="hljs-function">                     UINT uResolution, </span></span><br><span class="hljs-params"><span class="hljs-function">                     LPTIMECALLBACK lpTimeProc, </span></span><br><span class="hljs-params"><span class="hljs-function">                     WORD dwUser, </span></span><br><span class="hljs-params"><span class="hljs-function">                     UINT fuEvent)</span></span><br><span class="hljs-function"><span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="hljs-function">uDelay：以毫秒指定事件的周期。</span></span><br><span class="hljs-comment"><span class="hljs-function">Uresolution：以毫秒指定延时的精度，数值越小定时器事件分辨率越高。缺省值为1ms。</span></span><br><span class="hljs-comment"><span class="hljs-function">LpTimeProc：指向一个回调函数。</span></span><br><span class="hljs-comment"><span class="hljs-function">DwUser：存放用户提供的回调数据。</span></span><br><span class="hljs-comment"><span class="hljs-function">FuEvent：指定定时器事件类型：</span></span><br><span class="hljs-comment"><span class="hljs-function">TIME_ONESHOT：uDelay毫秒后只产生一次事件</span></span><br><span class="hljs-comment"><span class="hljs-function">TIME_PERIODIC ：每隔uDelay毫秒周期性地产生事件。</span></span><br><span class="hljs-comment"><span class="hljs-function">*/</span></span><br></code></pre></td></tr></table></figure><p>微软公司在其多媒体Windows中提供了精确定时器的底层API支持。利用多媒体定时器可以很精确地读出系统的当前时间，并且能在非常精确的时间间隔内完成一个事件、函数或过程的调用。利用多媒体定时器的基本功能，可以通过两种方法实现精确定时。</p><p>1）使用timeGetTime（）函数，该函数定时精度为ms级，返回从Windows启动开始所经过的时间。由于使用该函数是通过查询的方式进行定时控制的，所以，应该建立定时循环来进行定时事件的控制。</p><p>2）使用timeSetEvent（）函数，该函数原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">MMRESULT <span class="hljs-title">timeSetEvent</span><span class="hljs-params">(UINT uDelay,</span></span><br><span class="hljs-params"><span class="hljs-function">                    UINT uResolution,</span></span><br><span class="hljs-params"><span class="hljs-function">                    LPTIMECALLBACK lpTimeProc,</span></span><br><span class="hljs-params"><span class="hljs-function">                    DWORD dwUser,</span></span><br><span class="hljs-params"><span class="hljs-function">                    UINT fuEvent)</span></span>;<br></code></pre></td></tr></table></figure><p>　　该函数的参数说明如下：参数fuEvent为定时器的事件类型，TIME_ONESHOT表示执行一次；TIME_PERIODIC：周期性执行。</p><p>具体应用时，可以通过调用timeSetEvent（）函数，将需要周期性执行的任务定义在lpTimeProc回调函数中(如：定时采样、控制等)，从而完成所需处理的事件。需要注意的是：任务处理的时间不能大于周期间隔时间。</p><p>另外，在定时器使用完毕后，应及时调用timeKillEvent()将之释放。</p><p>下面这段代码的主要功能是设置两个时钟定时器，一个间隔是1ms，一个间隔是2s。每执行一次，把当前系统时钟值输入文件”cure.out”中，以比较该定时器的精确度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> ONE_MILLI_SECOND 1 <span class="hljs-comment">//定义1ms和2s时钟间隔，以ms为单位 ；</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TWO_SECOND 2000 </span><br><span class="hljs-meta"># <span class="hljs-keyword">define</span> TIMER_ACCURACY 1 <span class="hljs-comment">//定义时钟分辨率，以ms为单位 </span></span><br>UINT wTimerRes_1ms,wTimerRes_2s； <span class="hljs-comment">//定义时间间隔  unsigned int</span><br>UINT wAccuracy; <span class="hljs-comment">//定义分辨率 </span><br>UINT TimerID_1ms,TimerID_2s; <span class="hljs-comment">//定义定时器句柄</span><br><br><span class="hljs-comment">///</span><br>CCureApp::<span class="hljs-built_in">CCureApp</span>():<span class="hljs-built_in">fout</span>(<span class="hljs-string">&quot;cure.out&quot;</span>, ios::out) <span class="hljs-comment">//打开输出文件&quot;cure.out&quot;；</span><br>&#123; <br>　<span class="hljs-comment">// 给时间间隔变量赋值 </span><br>　wTimerRes_1ms = ONE_MILLI_SECOND; <br>　wTimerRes_2s = TWO_SECOND; <br>　TIMECAPS tc; <span class="hljs-comment">//timeGetDeVCaps</span><br>　<span class="hljs-comment">//利用函数timeGetDeVCaps取出系统分辨率的取值范围，如果无错则继续； </span><br>　<span class="hljs-keyword">if</span>(<span class="hljs-built_in">timeGetDevCaps</span>(&amp;tc,<span class="hljs-built_in">sizeof</span>(TIMECAPS))==TIMERR_NOERROR) <br>　&#123; <br>　　 wAccuracy=<span class="hljs-built_in">min</span>(<span class="hljs-built_in">max</span>(tc.wPeriodMin, TIMER_ACCURACY),tc.wPeriodMax);<span class="hljs-comment">//分辨率的值不能超出系统的取值范围</span><br>　　<span class="hljs-comment">//调用timeBeginPeriod函数设置定时器的分辨率 </span><br>　　<span class="hljs-built_in">timeBeginPeriod</span>(wAccuracy); <span class="hljs-comment">//1</span><br>　　<span class="hljs-comment">//设置定时器 </span><br>　　<span class="hljs-built_in">InitializeTimer</span>(); <br>　&#125; <br>&#125; <br><br>CCureApp:: ～<span class="hljs-built_in">CCureApp</span>() <br>&#123; <br>　fout &lt;&lt;<span class="hljs-string">&quot;结束时钟&quot;</span>&lt;&lt; endl; <span class="hljs-comment">//结束时钟 </span><br>　<span class="hljs-built_in">timeKillEvent</span>(TimerID_1ms); <span class="hljs-comment">// 删除两个定时器 </span><br>　<span class="hljs-built_in">timeKillEvent</span>(TimerID_2s); <span class="hljs-comment">// 删除设置的分辨率 </span><br>　<span class="hljs-built_in">timeEndPeriod</span>(wAccuracy); <br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CCureApp::InitializeTimer</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br>　<span class="hljs-built_in">StartOneMilliSecondTimer</span>(); <br>　<span class="hljs-built_in">StartTwoSecondTimer</span>(); <br>&#125; <br><br><span class="hljs-comment">//1ms定时器的回调函数，类似于中断处理程序，一定要声明为全局PASCAL函数，</span><br><span class="hljs-comment">//否则编译会有问题 </span><br><span class="hljs-function"><span class="hljs-type">void</span> PASCAL <span class="hljs-title">OneMilliSecondProc</span><span class="hljs-params">(UINT wTimerID, UINT msg,DWORD dwUser,DWORD dwl,DWORD dw2)</span> </span><br><span class="hljs-function"></span>&#123; <br>　<span class="hljs-comment">// 定义计数器 </span><br>　<span class="hljs-type">static</span> <span class="hljs-type">int</span> ms = <span class="hljs-number">0</span>; <br>　CCureApp *app = (CCureApp *)dwUser; <br>　<span class="hljs-comment">// 取得系统时间,以ms为单位 </span><br>　DWORD osBinaryTime = <span class="hljs-built_in">GetTickCount</span>(); <br>　<span class="hljs-comment">//输出计数器值和当前系统时间 </span><br>　app-&gt;fout &lt;&lt; ++ms &lt;&lt; <span class="hljs-string">&quot;:1ms:&quot;</span> <br>&#125; <br><br><span class="hljs-comment">// 加装1ms定时器 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CCureApp::StartOneMilliSecondTimer</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br>　<span class="hljs-keyword">if</span>((TimerID_1ms = <span class="hljs-built_in">timeSetEvent</span>(wTimerRes_1ms, wAccuracy， <br>　　(LPTIMECALBACK) OneMilliSecondProc, <span class="hljs-comment">// 回调函数； </span><br>　　(DWORD)<span class="hljs-keyword">this</span>， <span class="hljs-comment">// 用户传送到回调函数的数据；</span><br>　 TIME_PERIODIC)) == <span class="hljs-number">0</span>)<span class="hljs-comment">//周期调用定时处理函数；</span><br>　&#123; <br>　　<span class="hljs-built_in">AfxMessageBox</span>(<span class="hljs-string">&quot;不能进行定时！&quot;</span>, MB_OK | MB_ICONASTERISK); <br>　&#125; <br>　<span class="hljs-keyword">else</span> <br>　　fout &lt;&lt; <span class="hljs-string">&quot;16ms 计 时:&quot;</span> &lt;&lt; endl; <span class="hljs-comment">//不等于0表明加装成功，返回此定时器的句柄； </span><br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="GetTickCount"><a href="#GetTickCount" class="headerlink" title="GetTickCount()"></a>GetTickCount()</h3><p>　　在精度要求较高的情况下，如要求定时误差不大于1ms时，还可以利用GetTickCount（）函数返回自计算机启动后的时间，该函数的返回值是DWORD型，表示以ms为单位的计算机启动后经历的时间间隔。通过两次调用GetTickCount（）函数，然后控制它们的差值来取得定时效果.下列的代码可以实现50ms的精确定时，其误差是毫秒级的。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 起始值和中止值</span><br>DWORD dwStart, dwStop ; <br>dwStop = <span class="hljs-built_in">GetTickCount</span>(); <br><span class="hljs-keyword">while</span>(TRUE) &#123; <br>　<span class="hljs-comment">// 上一次的中止值变成新的起始值 </span><br>　dwStart = dwStop ; <span class="hljs-comment">// 此处添加相应控制语句 </span><br>　<span class="hljs-keyword">do</span> <br>　&#123;<br>　　dwStop = <span class="hljs-built_in">GetTickCount</span>() ; <br>　&#125;<span class="hljs-keyword">while</span>(dwStop － <span class="hljs-number">50</span> &lt; dwStart) ; <br>&#125; <br></code></pre></td></tr></table></figure><p>　　用上述两种方式取得的定时效果虽然在许多场合已经满足实际的要求，但由于它们的精度只有毫秒级的，而且在要求定时时间间隔小时，实际定时误差大。</p><h3 id="QueryPerformanceFrequency-和QueryPerformanceCounter"><a href="#QueryPerformanceFrequency-和QueryPerformanceCounter" class="headerlink" title="QueryPerformanceFrequency()和QueryPerformanceCounter()"></a>QueryPerformanceFrequency()和QueryPerformanceCounter()</h3><p><font style="color:#DF2A3F;">对于精确度要求更高的定时操作，则应该使用QueryPerformanceFrequency（）和QueryPerformanceCounter（）函数。这两个函数是Visual C++提供并且仅供Windows 95及其后续版本使用，其精度与CPU的时钟频率有关，它们要求计算机从硬件上支持精确定时器。QueryPerformanceFrequency()函数和QueryPerformanceCounter()函数的原型如下： </font>　</p><p><code>BOOL QueryPerformanceFrequency (LARGE_INTEGER *lpFrequency);</code></p><p><code>BOOL QueryPerformanceCounter (LARGE_INTEGER *lpCount); </code></p><p>　　上述两个函数的参数的数据类型LARGE_INTEGER既可以是一个8字节长的整型数，也可以是两个4字节长的整型数的联合结构，其具体用法根据编译器是否支持64位而定。该类型的定义如下： </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span> <span class="hljs-title class_">_LARGE_INTEGER</span><br>&#123;<br>    <span class="hljs-keyword">struct</span>&#123; <br>        DWORD LowPart ; <span class="hljs-comment">// 4字节整型数</span><br>        LONG　HighPart ; <span class="hljs-comment">// 4字节整型数</span><br>    &#125;; <br>    LONG QuadPart ; <span class="hljs-comment">// 8字节整型数</span><br>&#125; LARGE_INTEGER ; <br></code></pre></td></tr></table></figure><p>　</p><p>使用QueryPerformanceFrequency（）和QueryPerformanceCounter（）函数进行精确定时的步骤如下：</p><p>　　1、首先调用QueryPerformanceFrequency（）函数取得高精度运行计数器的频率f，单位是每秒多少次（n&#x2F;s），此数一般很大；</p><p>　　2、在需要定时的代码的两端分别调用QueryPerformanceCounter（）以取得高精度运行计数器的数值n1、n2，两次数值的差值通过f换算成时间间隔，t&#x3D;(n2-n1)&#x2F;f，当t大于或等于定时时间长度时，启动定时器；</p><p>&#x2F;&#x2F;</p><p>最简单的一个实例</p><p>记得头文件，忘了编译不通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Mmsystem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;Winmm.lib&quot;</span>)</span><br><span class="hljs-comment">//多媒体定时器的回调函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> CALLBACK <span class="hljs-title">MulTimerThread</span><span class="hljs-params">(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2)</span></span><br><span class="hljs-function"></span>&#123;<br>    CTestDlg* pDlg = (CTestDlg*)dwUser;<br>    pDlg-&gt;<span class="hljs-built_in">GenerateDatas</span>();<br>&#125;<br><span class="hljs-comment">//启动多媒体定时器，1ms</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CTestDlg::StartMulTimer</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">timeBeginPeriod</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//参数1：uDelay = 1 以毫秒指定时的周期；</span><br>    <span class="hljs-comment">//参数2：Uresolution =1 以毫秒指定延时精度，数值越小定时器事件分辨率越高，缺省值为1ms；</span><br>    <span class="hljs-comment">//参数3：LpTimeProc（MulTimerThread） 指向一个回调函数，该回调函数包含需要定时执行的代码；</span><br>    <span class="hljs-comment">//参数X：DwUser 存放用户提供的回调数据；</span><br>    <span class="hljs-comment">//参数X：FuEvent: 指定时器事件类型；</span><br>    <span class="hljs-comment">//参数X：TIME_ONESHOT: uDelay毫秒后只产生一次事件；</span><br>    <span class="hljs-comment">//参数7：TIME_PERIODIC: 每隔uDelay毫秒周期性地产生事件。</span><br>    timerID = <span class="hljs-built_in">timeSetEvent</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,MulTimerThread,(DWORD)<span class="hljs-keyword">this</span>,TIME_PERIODIC); <span class="hljs-comment">//每1ms触发一次</span><br>    <span class="hljs-comment">//成功返回非零，失败返回零</span><br>&#125;<br><span class="hljs-comment">//多媒体定时器调用产生数据的函数，用于接收/发送数据</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CTestDlg::GenerateDatas</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(TickCount==<span class="hljs-number">5</span>)<br>    &#123;<br>        <span class="hljs-comment">//OnButtonSend();</span><br>        <span class="hljs-comment">//MessageBox(char(TickCount));</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(TickCount==<span class="hljs-number">15</span>)<br>    &#123;<br>        <span class="hljs-comment">//OnButtonSend();</span><br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-string">&quot;345&quot;</span>);<br>    &#125;<br>    TickCount++;<br>    <span class="hljs-keyword">if</span>(TickCount==<span class="hljs-number">5000</span>)<br>    TickCount=<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用内存映射文件处理大文件</title>
    <link href="/2024/04/19/Win32_Api/%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    <url>/2024/04/19/Win32_Api/%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%A4%A7%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p><font style="color:rgb(36, 41, 46);"></font></p><p><font style="color:rgb(36, 41, 46);">文件操作是应用程序最为基本的功能之一，Win32 API和MFC均提供有支持文件处理的函数和类。一般来说，这些函数可以满足大多数场合的要求，但是对于某些特殊应用领域所需要的动辄几十GB、几百GB、乃至几TB的海量存储，再以通常的文件处理方法进行处理显然是行不通的。目前，对于上述这种大文件的操作一般是以内存映射文件的方式来加以处理的。</font></p><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">内存映射文件与虚拟内存有些类似，通过内存映射文件可以保留一个地址空间的区域，同时将物理存储器提交给此区域，只是内存文件映射的物理存储器来自一个已经存在于磁盘上的文件，而非系统的页文件，而且在对该文件进行操作之前必须首先对文件进行映射，就如同将整个文件从磁盘加载到内存。由此可以看出，使用内存映射文件处理存储于磁盘上的文件时，将不必再对文件执行I/O操作，这意味着在对文件进行处理时将不必再为文件申请并分配缓存，所有的文件缓存操作均由系统直接管理，由于取消了将文件数据加载到内存、数据从内存到文件的回写以及释放内存块等步骤，使得内存映射文件在处理大数据量的文件时能起到相当重要的作用。另外，实际工程中的系统往往需要在多个进程之间共享数据，如果数据量小，处理方法是灵活多变的，如果共享数据容量巨大，那么就需要借助于内存映射文件来进行。实际上，内存映射文件正是解决本地多个进程间数据共享的最有效方法。</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">    首先要通过CreateFile()函数来创建或打开一个文件内核对象，这个对象标识了磁盘上将要用作内存映射文件的文件。在用CreateFile()将文件映像在物理存储器的位置通告给操作系统后，只指定了映像文件的路径，映像的长度还没有指定。为了指定文件映射对象需要多大的物理存储空间还需要通过CreateFileMapping()函数来创建一个文件映射内核对象以告诉系统文件的尺寸以及访问文件的方式。</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">CreateFileMapping()在创建了文件映射对象后，还必须为文件数据保留一个地址空间区域，并把文件数据作为映射到该区域的物理存储器进行提交。由MapViewOfFile()函数负责通过系统的管理而将文件映射对象的全部或部分映射到进程地址空间，实际上相当于加载文件中指定的数据到内存中。此时，对内存映射文件的使用和处理同通常加载到内存中的文件数据的处理方式基本一样，在完成了对内存映射文件的使用时，还要通过一系列的操作完成对其的清除和使用过资源的释放。这部分相对比较简单，可以通过UnmapViewOfFile()完成从进程的地址空间撤消文件数据的映像、通过CloseHandle()关闭前面创建的文件映射对象和文件对象。</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">实际上操作文件映射对象就相当于操作VC++文件读写方式下的文件内部指针。</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">而在某些特殊行业，经常要面对十几GB乃至几十GB容量的巨型文件，而一个32位进程所拥有的虚拟地址空间只有232 = 4GB，显然不能一次将文件映像全部映射进来。对于这种情况只能依次将大文件的各个部分映射到进程中的一个较小的地址空间。这需要对上面的一般流程进行适当的更改：</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">1）映射从文件开头的映像；</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">2）对该映像进行访问；</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">3）取消此映像；</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">4）映射一个从文件中的一个更深的位移开始的新映像；</font><font style="color:rgb(36, 41, 46);">  </font><font style="color:rgb(36, 41, 46);">5）重复步骤2，直到访问完全部的文件数据。</font><p><img src="/2024/04/19/Win32_Api/%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E5%A4%A7%E6%96%87%E4%BB%B6/image-0.png"></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a><font style="color:rgb(36, 41, 46);">示例代码</font></h3><p><font style="color:rgb(36, 41, 46);"></font><font style="color:rgb(36, 41, 46);">    在本例中，首先通过GetFileSize()得到被处理文件长度（64位）的高32位和低32位值。然后在映射过程中设定每次映射的块大小为1000倍的分配粒度(系统的数据分块大小)，如果文件长度小于1000倍的分配粒度时则将块大小设置为文件的实际长度。在处理过程中由映射、访问、撤消映射构成了一个循环处理。其中，每处理完一个文件块后都通过关闭文件映射对象来对每个文件块进行整理。CreateFileMapping()、MapViewOfFile()等函数是专门用来进行内存文件映射处理用的。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 创建文件对象</span><br>HANDLE hFile = ::<span class="hljs-built_in">CreateFile</span>(strFile, GENERIC_READ,FILE_SHARE_READ, <span class="hljs-literal">NULL</span>, <br>OPEN_EXISTING, FILE_FLAG_RANDOM_ACCESS, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFile == INVALID_HANDLE_VALUE)<br>&#123;<br>    <span class="hljs-built_in">TRACE</span>(<span class="hljs-string">&quot;创建文件对象失败,错误代码:%d\r\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 创建文件映射对象</span><br>HANDLE hFileMap = <span class="hljs-built_in">CreateFileMapping</span>(hFile, <span class="hljs-literal">NULL</span>, PAGE_READONLY, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hFileMap == <span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-built_in">TRACE</span>(<span class="hljs-string">&quot;创建文件映射对象失败,错误代码:%d\r\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());  <br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 得到系统分配粒度</span><br>SYSTEM_INFO SysInfo;<br><span class="hljs-built_in">GetSystemInfo</span>(&amp;SysInfo);<br>DWORD dwGran = SysInfo.dwAllocationGranularity;<br><br><span class="hljs-comment">// 得到文件尺寸</span><br>DWORD dwFileSizeHigh;<br>__int64 qwFileSize = <span class="hljs-built_in">GetFileSize</span>(hFile, &amp;dwFileSizeHigh);<br>qwFileSize |= (((__int64)dwFileSizeHigh) &lt;&lt; <span class="hljs-number">32</span>);<span class="hljs-comment">///MSDN</span><br><br><span class="hljs-comment">// 偏移地址 </span><br>__int64 qwFileOffset = <span class="hljs-number">0</span>;<br>__int64 T_newmap = <span class="hljs-number">900</span> * dwGran;<br><span class="hljs-comment">// 块大小</span><br>DWORD dwBlockBytes = <span class="hljs-number">1000</span> * dwGran;<span class="hljs-comment">//文件数据分段大小</span><br><span class="hljs-keyword">if</span> (qwFileSize - qwFileOffset &lt; dwBlockBytes)<br>dwBlockBytes = (DWORD)qwFileSize;<br><br><span class="hljs-comment">// 映射视图</span><br><span class="hljs-type">char</span> *lpbMapAddress = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">MapViewOfFile</span>(hFileMap,FILE_MAP_READ,<br>(DWORD)(qwFileOffset &gt;&gt; <span class="hljs-number">32</span>), (DWORD)(qwFileOffset &amp; <span class="hljs-number">0xFFFFFFFF</span>),dwBlockBytes);<br><span class="hljs-keyword">if</span> (lpbMapAddress == <span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-built_in">TRACE</span>(<span class="hljs-string">&quot;映射文件映射失败,错误代码:%d &quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>    <span class="hljs-keyword">return</span>;<br>&#125; <br><br><span class="hljs-comment">// 关闭文件对象</span><br><span class="hljs-built_in">CloseHandle</span>(hFile); <br><br><span class="hljs-comment">///////////读文件数据</span><br><span class="hljs-keyword">while</span>(qwFileOffset &lt; qwFileSize)<br>&#123;<br>    <span class="hljs-comment">/********************            读文件             ***************************/</span>  <br>    <span class="hljs-comment">//read_eh(&amp;lpbMapAddress)读取已映射到内存的数据，</span><br>    <br>    <span class="hljs-comment">//并将文件指针作相应后移(lpbMapAddress++),返回指针偏移量</span><br>    qwFileOffset = qwFileOffset + <span class="hljs-built_in">read_eh</span>(&amp;lpbMapAddress); <span class="hljs-comment">//修改偏移量</span><br>    <span class="hljs-keyword">if</span> (qwFileOffset &gt; T_newmap)<br>    &#123;<span class="hljs-comment">//当数据读到90%时,为防数据溢出,需要映射在其后的数据  T_newmap</span><br>        <span class="hljs-built_in">UnmapViewOfFile</span>(lpbMapAddress);<span class="hljs-comment">//释放当前映射</span><br>        <br>        <span class="hljs-keyword">if</span> ((DWORD)(qwFileSize - T_newmap) &lt; dwBlockBytes)<br>            dwBlockBytes = (DWORD)(qwFileSize - T_newmap);<br>        lpbMapAddress = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">MapViewOfFile</span>(hFileMap,FILE_MAP_READ,<br>        (DWORD)(T_newmap &gt;&gt; <span class="hljs-number">32</span>), (DWORD)(T_newmap &amp; <span class="hljs-number">0xFFFFFFFF</span>),dwBlockBytes);<br>        <br>        <span class="hljs-comment">// 修正参数</span><br>        lpbMapAddress = lpbMapAddress + qwFileOffset - T_newmap;<br>        T_newmap =T_newmap  + <span class="hljs-number">900</span> * dwGran;<br>        <br>        <span class="hljs-keyword">if</span> (lpbMapAddress == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-built_in">TRACE</span>(<span class="hljs-string">&quot;映射文件映射失败,错误代码:%d &quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//释放最后数据块映射</span><br><span class="hljs-built_in">UnmapViewOfFile</span>(lpbMapAddress);<br><br><span class="hljs-comment">// 关闭文件映射对象句柄</span><br><span class="hljs-built_in">CloseHandle</span>(hFileMap); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NOTE】Windows的磁盘操作</title>
    <link href="/2024/04/10/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E7%9A%84%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/04/10/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E7%9A%84%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a><font style="color:rgb(51, 51, 51);">一、基本概念</font></h1><p><font style="color:rgb(51, 51, 51);">首先说明一点，本文中使用的不是cmd命令行，基于以下几点原因：</font></p><p><font style="color:rgb(51, 51, 51);">1．在C&#x2F;C++中调用系统命令会存在处理的种种不方便，需要大量额外的代码去分析命令执行结果。</font></p><p><font style="color:rgb(51, 51, 51);">2．windows命令行远不如linux的shell来的强大。</font></p><p><font style="color:rgb(51, 51, 51);">3．效率。</font></p><p><font style="color:rgb(51, 51, 51);">当然，如果不考虑编码，仅作为系统下一种应用工具的话，DiskPart是既安全又便利的选择。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">我们先来看几个主要的使用频繁的函数。</font></p><p><font style="color:rgb(51, 51, 51);">在windows下与磁盘打交道最主要的API就是</font><font style="color:rgb(255, 0, 0);">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">了，以下是从MSDN中直接拷贝出来的对该函数的说明。此函数确实太重要也太强大了，建议大家耐着性子先将它的说明看完，当然，本文后续例子中会大量用到此函数，可随时返回此节参阅。</font></p><h2 id="deviceIoControl-函数-ioapiset-h"><a href="#deviceIoControl-函数-ioapiset-h" class="headerlink" title="deviceIoControl 函数 (ioapiset.h)"></a><font style="color:rgb(22, 22, 22);">deviceIoControl 函数 (ioapiset.h)</font></h2><p><font style="color:rgb(22, 22, 22);">将控制代码直接发送到指定的设备驱动程序，导致相应的设备执行相应的操作。</font></p><p><font style="color:rgb(22, 22, 22);">请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://github.com/microsoft/Windows-classic-samples/tree/master/Samples/Win7Samples/winbase/io/dledit"><font style="color:rgb(0, 101, 179);">分配驱动器号示例</font></a><font style="color:rgb(22, 22, 22);">。</font></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">DeviceIoControl</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]                HANDLE       hDevice,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]                DWORD        dwIoControlCode,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional]      LPVOID       lpInBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]                DWORD        nInBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional]     LPVOID       lpOutBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]                DWORD        nOutBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional]     LPDWORD      lpBytesReturned,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, out, optional] LPOVERLAPPED lpOverlapped</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h3><p><code>[in] hDevice</code></p><p>要对其执行操作的设备句柄。 设备通常是卷、目录、文件或流。 若要检索设备句柄，请使用 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea">CreateFile</a> 函数。 有关详细信息，请参阅“备注”。</p><p><code>[in] dwIoControlCode</code></p><p>操作的控制代码。 此值标识要执行的特定操作以及要执行该操作的设备类型。</p><p>有关控制代码的列表，请参阅备注。 每个控件代码的文档都提供了 <em>lpInBuffer</em>、 <em>nInBufferSize</em>、 <em>lpOutBuffer</em> 和 <em>nOutBufferSize</em> 参数的用法详细信息。</p><p><code>[in, optional] lpInBuffer</code></p><p>指向输入缓冲区的指针，其中包含执行操作所需的数据。 此数据的格式取决于 <em>dwIoControlCode</em> 参数的值。</p><p>如果 <em>dwIoControlCode</em> 指定不需要输入数据的操作，则此参数可以为 <strong>NULL</strong>。</p><p><code>[in] nInBufferSize</code></p><p>输入缓冲区的大小（以字节为单位）。</p><p><code>[out, optional] lpOutBuffer</code></p><p>指向输出缓冲区的指针，用于接收操作返回的数据。 此数据的格式取决于 <em>dwIoControlCode</em> 参数的值。</p><p>如果 <em>dwIoControlCode</em> 指定不返回数据的操作，则此参数可以为 <strong>NULL</strong>。</p><p><code>[in] nOutBufferSize</code></p><p>输出缓冲区的大小（以字节为单位）。</p><p><code>[out, optional] lpBytesReturned</code></p><p>指向变量的指针，该变量接收存储在输出缓冲区中的数据的大小（以字节为单位）。</p><p>如果输出缓冲区太小而无法接收任何数据，则调用失败，<a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> 将返回_ERROR_INSUFFICIENT_BUFFER，lpBytesReturned_ 为零。</p><p>如果输出缓冲区太小，无法容纳所有数据，但可以容纳一些条目，则某些驱动程序将返回尽可能多的数据。 在这种情况下，调用失败，<a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> 返回_ERROR_MORE_DATA，lpBytesReturned_ 指示接收的数据量。 应用程序应再次使用相同的操作调用 <strong>DeviceIoControl</strong> ，并指定一个新的起点。</p><p>如果 lpOverlapped 为 NULL，则 lpBytesReturned 不能为 NULL。 即使操作不返回输出数据且 <em>lpOutBuffer</em> 为 <strong>NULL，DeviceIoControl</strong> 也会使用 <em>lpBytesReturned</em>。 执行此类操作后，lpBytesReturned 的值毫无意义。</p><p>如果 lpOverlapped 不为 NULL，则 lpBytesReturned 可以为 NULL。 如果此参数不为 NULL 且操作返回数据，则 lpBytesReturned 在重叠操作完成之前毫无意义。 若要检索返回的字节数，请调用 GetOverlappedResult。 如果 hDevice 与 I&#x2F;O 完成端口相关联，则可以通过调用 GetQueuedCompletionStatus 来检索返回的字节数。</p><p><code>[in, out, optional] lpOverlapped</code></p><p>指向 OVERLAPPED 结构的指针。</p><p>如果在未指定 FILE_FLAG_OVERLAPPED 的情况下打开 hDevice，则忽略 lpOverlapped。</p><p>如果使用 FILE_FLAG_OVERLAPPED 标志打开 hDevice，则此操作将作为重叠（异步）操作执行。 在这种情况下，lpOverlapped 必须指向包含事件对象句柄的有效 OVERLAPPED 结构。 否则，函数会以不可预知的方式失败。</p><p>对于重叠操作，DeviceIoControl 会立即返回，并在操作完成时向事件对象发出信号。 否则，在操作完成或发生错误之前，函数不会返回。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h3><p><font style="color:rgb(22, 22, 22);">如果操作成功完成，则返回值为非零 (TRUE) 。</font></p><p><font style="color:rgb(22, 22, 22);">如果操作失败或挂起，则返回值为零。 要获得更多的错误信息，请调用 GetLastError。</font></p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h3><p><font style="color:rgb(22, 22, 22);">若要检索设备的句柄，必须使用设备的名称或与设备关联的驱动程序的名称调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea"><font style="color:rgb(0, 101, 179);">CreateFile</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数。 若要指定设备名称，请使用以下格式：</font></p><p>\._DeviceName_</p><p><strong><font style="color:rgb(22, 22, 22);">DeviceIoControl</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">可以接受特定设备的句柄。 例如，若要使用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea"><font style="color:rgb(0, 101, 179);">CreateFile</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">打开逻辑驱动器 A： 的句柄，请指定 \.\a：。 或者，可以使用名称 \.\PhysicalDrive0、.\PhysicalDrive1 等打开系统上物理驱动器的句柄。</font></p><p><font style="color:rgb(22, 22, 22);">调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea"><font style="color:rgb(0, 101, 179);">CreateFile</font></a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">以打开设备驱动程序的句柄时，应指定</font><strong><font style="color:rgb(22, 22, 22);">FILE_SHARE_READ</font></strong><font style="color:rgb(22, 22, 22);">和</font><strong><font style="color:rgb(22, 22, 22);">FILE_SHARE_WRITE</font></strong><font style="color:rgb(22, 22, 22);">访问标志。 但是，打开通信资源（如串行端口）时，必须指定独占访问。 打开设备句柄时，请使用其他</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">CreateFile</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数，如下所示：</font></p><ul><li><em><font style="color:rgb(22, 22, 22);">fdwCreate</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数必须指定</font><strong><font style="color:rgb(22, 22, 22);">OPEN_EXISTING</font></strong><font style="color:rgb(22, 22, 22);">。</font></li><li><em><font style="color:rgb(22, 22, 22);">hTemplateFile</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数必须为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">。</font></li><li><em><font style="color:rgb(22, 22, 22);">fdwAttrsAndFlags</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数可以指定</font><strong><font style="color:rgb(22, 22, 22);">FILE_FLAG_OVERLAPPED</font></strong><font style="color:rgb(22, 22, 22);">，以指示返回的句柄可用于重叠 (异步) I&#x2F;O 操作。</font></li></ul><p><font style="color:rgb(22, 22, 22);">有关受支持的控制代码的列表，请参阅以下主题：</font></p><ul><li><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/storage/cd-rom-io-control-codes"><font style="color:rgb(0, 101, 179);">CD-ROM 控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/DevIO/communications-control-codes"><font style="color:rgb(0, 101, 179);">通信控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/DevIO/device-management-control-codes"><font style="color:rgb(0, 101, 179);">设备管理控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/directory-management-control-codes"><font style="color:rgb(0, 101, 179);">目录管理控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/disk-management-control-codes"><font style="color:rgb(0, 101, 179);">磁盘管理控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/file-management-control-codes"><font style="color:rgb(0, 101, 179);">文件管理控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Power/power-management-control-codes"><font style="color:rgb(0, 101, 179);">电源管理控制代码</font></a></li><li><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/volume-management-control-codes"><font style="color:rgb(0, 101, 179);">卷管理控制代码</font></a></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><font style="color:rgb(22, 22, 22);">示例</font></h4><p><font style="color:rgb(22, 22, 22);">有关使用</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">DeviceIoControl</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">的示例，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/DevIO/calling-deviceiocontrol"><font style="color:rgb(0, 101, 179);">调用 DeviceIoControl</font></a><font style="color:rgb(22, 22, 22);">。</font></p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h3><p><strong>展开表</strong></p><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);">要求</font></th><th align="left"><font style="color:rgb(22, 22, 22);">值</font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows XP</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的服务器</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows Server 2003</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">ioapiset.h (包括 Windows.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Kernel32.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Kernel32.dll</font></td></tr></tbody></table><h3 id="另请参阅"><a href="#另请参阅" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h3><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/synchapi/nf-synchapi-createeventa"><font style="color:rgb(0, 101, 179);">CreateEvent</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea"><font style="color:rgb(0, 101, 179);">CreateFile</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/DevIO/device-input-and-output-control-ioctl-"><font style="color:rgb(0, 101, 179);">设备输入和输出控制 (IOCTL)</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/ioapiset/nf-ioapiset-getoverlappedresult"><font style="color:rgb(0, 101, 179);">GetOverlappedResult</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/ioapiset/nf-ioapiset-getqueuedcompletionstatus"><font style="color:rgb(0, 101, 179);">GetQueuedCompletionStatus</font></a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/minwinbase/ns-minwinbase-overlapped"><font style="color:rgb(0, 101, 179);">OVERLAPPED</font></a></p><p><a href="https://github.com/microsoft/Windows-classic-samples/tree/master/Samples/Win7Samples/winbase/io/dledit"><font style="color:rgb(0, 101, 179);">分配驱动器号示例</font></a></p><hr><p><font style="color:rgb(51, 51, 51);">该函数实现对设备的访问，包括获取信息，发送命令，交换数据等。可以利用该接口函数向指定的设备驱动发送正确的控制码及数据，分析它的响应，执行程序设计人员想要的功能。磁盘操作只是它强大功能中的一小部分。</font></p><p><font style="color:rgb(51, 51, 51);">该函数最重要的两个参数是</font><font style="color:rgb(0, 0, 255);">hDevice</font><font style="color:rgb(51, 51, 51);">和</font><font style="color:rgb(0, 0, 255);">dwIoControlCode</font><font style="color:rgb(51, 51, 51);">.</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">控制码</font><font style="color:rgb(0, 0, 255);">dwIoControlCode</font><font style="color:rgb(51, 51, 51);">决定了操作类型，与磁盘相关的控制码有</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plain">IOCTL_DISK_CREATE_DISK    利用CREATE_DISK结构中的信息对指定磁盘和磁盘分区进行初始化。<br>IOCTL_DISK_DELETE_DRIVE_LAYOUT    从主引导记录中删除引导信息，所以磁盘将会被从头到尾的格式化。扇区0中的分区信息也就不复存在了。<br>IOCTL_DISK_FORMAT_TRACKS    格式化指定的、连续的软盘磁道。如果需要更多的功能请使用IOCTL_DISK_FORMAT_TRACKS_EX。<br>IOCTL_DISK_FORMAT_TRACKS_EX    格式化指定的、连续的软盘磁道。<br>IOCTL_DISK_GET_CACHE_INFORMATION    返回磁盘的高速缓存配置数据<br>IOCTL_DISK_GET_DRIVE_GEOMETRY_EX    返回物理磁盘的扩展信息。包括：类型、柱面数量、每柱面磁道数、每磁道扇区数和每扇区字节数等。<br>IOCTL_DISK_GET_DRIVE_LAYOUT_EX    返回各分区的扩展信息以及这些分区的特性。更多信息请参照DRIVE_LAYOUT_INFORMATION_EX结构。<br>IOCTL_DISK_GET_LENGTH_INFO    返回指定磁盘/卷/分区的大小信息<br>IOCTL_DISK_GET_PARTITION_INFO_EX    返回指定分区的扩展信息。包括：分区类型、大小和种类。更多信息请参照PARTITION_INFORMATION_EX结构。<br>IOCTL_DISK_GROW_PARTITION    扩大指定分区。<br>IOCTL_DISK_IS_WRITABLE    确定指定磁盘是否可写。<br>IOCTL_DISK_PERFORMANCE    启用并获取磁盘性能统计<br>IOCTL_DISK_PERFORMANCE_OFF    关闭磁盘性能统计<br>IOCTL_DISK_REASSIGN_BLOCKS    使磁盘设备影射一块区域做为它的备用存储块公用池（spare block pool）。<br>IOCTL_DISK_SET_CACHE_INFORMATION    设置磁盘的配置信息<br>IOCTL_DISK_SET_DRIVE_LAYOUT_EX    根据给定的磁盘信息对磁盘进行分区。<br>IOCTL_DISK_SET_PARTITION_INFO_EX    设置指定分区的分区信息。包括AT和EFI (Extensible Firmware Interface)分区的布局信息。<br>IOCTL_DISK_UPDATE_PROPERTIES    使缓冲的分区表无效并重新获取一份。<br>IOCTL_DISK_VERIFY    对指定磁盘进行逻辑格式化<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);"></font></p><p><font style="color:rgb(51, 51, 51);">另一个参数</font><font style="color:rgb(0, 0, 255);">hDevice</font><font style="color:rgb(51, 51, 51);">指向要操作的设备句柄，调用函数</font><font style="color:rgb(255, 0, 0);">CreateFile</font><font style="color:rgb(51, 51, 51);">获得。</font><font style="color:rgb(255, 0, 0);">CreateFile</font><font style="color:rgb(51, 51, 51);">函数原型为</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HANDLE WINAPI <span class="hljs-title">CreateFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          LPCTSTR lpFileName,</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          DWORD dwDesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          DWORD dwShareMode,</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          DWORD dwCreationDisposition,</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          DWORD dwFlagsAndAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    __in          HANDLE hTemplateFile</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">lpFileName为需要打开设备的名称，对于磁盘来说，可能为以下几种形式：</font></p><p><font style="color:rgb(51, 51, 51);">对于物理驱动器x，形式为</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">\.\PhysicalDriveX</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">，编号从0开始，例如</font></p><table><thead><tr><th align="left"><font style="color:rgb(51, 51, 51);">名称</font></th><th align="left"><font style="color:rgb(51, 51, 51);">含义</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(51, 51, 51);">\.\PhysicalDrive0</font></td><td align="left"><font style="color:rgb(51, 51, 51);">打开第一个物理驱动器</font></td></tr><tr><td align="left"><font style="color:rgb(51, 51, 51);">\.\PhysicalDrive2</font></td><td align="left"><font style="color:rgb(51, 51, 51);">打开第三个物理驱动器</font></td></tr></tbody></table><p><font style="color:rgb(51, 51, 51);">对于逻辑分区（卷），形式为</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">\.\X</font><font style="color:rgb(51, 51, 51);">: ，例如</font></p><table><thead><tr><th align="left"><font style="color:rgb(51, 51, 51);">名称</font></th><th align="left"><font style="color:rgb(51, 51, 51);">含义</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(51, 51, 51);">\.\A:</font></td><td align="left"><font style="color:rgb(51, 51, 51);">打开A盘（软驱）</font></td></tr><tr><td align="left"><font style="color:rgb(51, 51, 51);">\.\C:</font></td><td align="left"><font style="color:rgb(51, 51, 51);">打开C盘（磁盘逻辑分区）</font></td></tr></tbody></table><h2 id="调用-DeviceIoControl"><a href="#调用-DeviceIoControl" class="headerlink" title="调用 DeviceIoControl"></a><font style="color:rgb(22, 22, 22);">调用 DeviceIoControl</font></h2><p><font style="color:rgb(51, 51, 51);">最后复制一段MSDN上的示例代码作为本节的结束，该示例获取磁盘的详细信息（包括柱面、磁道、扇区等统计信息）并打印出来。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> UNICODE 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _UNICODE 1</span><br><br><span class="hljs-comment">/* The code of interest is in the subroutine GetDriveGeometry. The </span><br><span class="hljs-comment">   code in main shows how to interpret the results of the call. */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;winioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> wszDrive <span class="hljs-string">L&quot;\\\\.\\PhysicalDrive0&quot;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">GetDriveGeometry</span><span class="hljs-params">(LPWSTR wszPath, DISK_GEOMETRY *pdg)</span></span><br><span class="hljs-function"></span>&#123;<br>  HANDLE hDevice = INVALID_HANDLE_VALUE;  <span class="hljs-comment">// handle to the drive to be examined </span><br>  BOOL bResult   = FALSE;                 <span class="hljs-comment">// results flag</span><br>  DWORD junk     = <span class="hljs-number">0</span>;                     <span class="hljs-comment">// discard results</span><br><br>  hDevice = <span class="hljs-built_in">CreateFileW</span>(wszPath,          <span class="hljs-comment">// drive to open</span><br>                        <span class="hljs-number">0</span>,                <span class="hljs-comment">// no access to the drive</span><br>                        FILE_SHARE_READ | <span class="hljs-comment">// share mode</span><br>                        FILE_SHARE_WRITE, <br>                        <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                        OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                        <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                        <span class="hljs-literal">NULL</span>);            <span class="hljs-comment">// do not copy file attributes</span><br><br>  <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)    <span class="hljs-comment">// cannot open the drive</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> (FALSE);<br>  &#125;<br><br>  bResult = <span class="hljs-built_in">DeviceIoControl</span>(hDevice,                       <span class="hljs-comment">// device to be queried</span><br>                            IOCTL_DISK_GET_DRIVE_GEOMETRY, <span class="hljs-comment">// operation to perform</span><br>                            <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>,                       <span class="hljs-comment">// no input buffer</span><br>                            pdg, <span class="hljs-built_in">sizeof</span>(*pdg),            <span class="hljs-comment">// output buffer</span><br>                            &amp;junk,                         <span class="hljs-comment">// # bytes returned</span><br>                            (LPOVERLAPPED) <span class="hljs-literal">NULL</span>);          <span class="hljs-comment">// synchronous I/O</span><br><br>  <span class="hljs-built_in">CloseHandle</span>(hDevice);<br><br>  <span class="hljs-keyword">return</span> (bResult);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wmain</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">wchar_t</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>  DISK_GEOMETRY pdg = &#123; <span class="hljs-number">0</span> &#125;; <span class="hljs-comment">// disk drive geometry structure</span><br>  BOOL bResult = FALSE;      <span class="hljs-comment">// generic results flag</span><br>  ULONGLONG DiskSize = <span class="hljs-number">0</span>;    <span class="hljs-comment">// size of the drive, in bytes</span><br><br>  bResult = <span class="hljs-built_in">GetDriveGeometry</span> (wszDrive, &amp;pdg);<br><br>  <span class="hljs-keyword">if</span> (bResult) <br>  &#123;<br>    <span class="hljs-built_in">wprintf</span>(<span class="hljs-string">L&quot;Drive path      = %ws\n&quot;</span>,   wszDrive);<br>    <span class="hljs-built_in">wprintf</span>(<span class="hljs-string">L&quot;Cylinders       = %I64d\n&quot;</span>, pdg.Cylinders);<br>    <span class="hljs-built_in">wprintf</span>(<span class="hljs-string">L&quot;Tracks/cylinder = %ld\n&quot;</span>,   (ULONG) pdg.TracksPerCylinder);<br>    <span class="hljs-built_in">wprintf</span>(<span class="hljs-string">L&quot;Sectors/track   = %ld\n&quot;</span>,   (ULONG) pdg.SectorsPerTrack);<br>    <span class="hljs-built_in">wprintf</span>(<span class="hljs-string">L&quot;Bytes/sector    = %ld\n&quot;</span>,   (ULONG) pdg.BytesPerSector);<br><br>    DiskSize = pdg.Cylinders.QuadPart * (ULONG)pdg.TracksPerCylinder *<br>               (ULONG)pdg.SectorsPerTrack * (ULONG)pdg.BytesPerSector;<br>    <span class="hljs-built_in">wprintf</span>(<span class="hljs-string">L&quot;Disk size       = %I64d (Bytes)\n&quot;</span><br>            <span class="hljs-string">L&quot;                = %.2f (Gb)\n&quot;</span>, <br>            DiskSize, (<span class="hljs-type">double</span>) DiskSize / (<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>));<br>  &#125; <br>  <span class="hljs-keyword">else</span> <br>  &#123;<br>    <span class="hljs-built_in">wprintf</span> (<span class="hljs-string">L&quot;GetDriveGeometry failed. Error %ld.\n&quot;</span>, <span class="hljs-built_in">GetLastError</span> ());<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> ((<span class="hljs-type">int</span>)bResult);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="二、初始化磁盘"><a href="#二、初始化磁盘" class="headerlink" title="二、初始化磁盘"></a><font style="color:rgb(23, 35, 63);">二、初始化磁盘</font></h1><p><font style="color:rgb(23, 35, 63);">上一节中我们介绍了一些基本概念和主要的API，本节开始我们将列举并分析一些实例。本文中的所有代码我都在vs2008下测试过，读者只需要替换少量的宏定义即可编译执行。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">面对一块新的磁盘，我们首先要做的就是对其初始化。在系统中通过</font><font style="color:rgb(51, 51, 51);">windows</font><font style="color:rgb(51, 51, 51);">的磁盘管理完成这一点非常容易，但在程序中实现略微复杂。本节的示例代码对一块新硬盘初始化，并在上面创建分区。</font></p><h3 id="初始化磁盘代码"><a href="#初始化磁盘代码" class="headerlink" title="初始化磁盘代码"></a><font style="color:rgb(23, 35, 63);">初始化磁盘</font><font style="color:rgb(51, 51, 51);">代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: initialize the disk and create partitions</span><br><span class="hljs-comment">* input: disk, disk name</span><br><span class="hljs-comment">*        parNum, partition number</span><br><span class="hljs-comment">* output: N/A</span><br><span class="hljs-comment">* return: Succeed, 0</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">CreateDisk</span><span class="hljs-params">(DWORD disk, WORD partNum)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hDevice;               <span class="hljs-comment">// handle to the drive to be examined</span><br>    BOOL result;                  <span class="hljs-comment">// results flag</span><br>    DWORD readed;                 <span class="hljs-comment">// discard results</span><br>    DWORD ret;<br>    WORD i;<br>    CHAR diskPath[DISK_PATH_LEN];<br>    DISK_GEOMETRY pdg;<br>    DWORD sectorSize;<br>    DWORD signature;<br>    LARGE_INTEGER diskSize;<br>    LARGE_INTEGER partSize;<br>    BYTE actualPartNum;<br>   <br>    DWORD layoutStructSize;<br>    DRIVE_LAYOUT_INFORMATION_EX *dl;<br>    CREATE_DISK newDisk;<br> <br>    <span class="hljs-built_in">sprintf</span>(diskPath, <span class="hljs-string">&quot;\\\\.\\PhysicalDrive%d&quot;</span>, disk);<br> <br>    actualPartNum = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (partNum &gt; actualPartNum)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (WORD)<span class="hljs-number">-1</span>;<br>    &#125;<br>   <br>    hDevice = <span class="hljs-built_in">CreateFile</span>(<br>                diskPath,<br>                GENERIC_READ|GENERIC_WRITE,<br>                FILE_SHARE_READ|FILE_SHARE_WRITE,<br>                <span class="hljs-literal">NULL</span>,           <span class="hljs-comment">//default security attributes  </span><br>                OPEN_EXISTING, <span class="hljs-comment">// disposition  </span><br>                <span class="hljs-number">0</span>,              <span class="hljs-comment">// file attributes  </span><br>                <span class="hljs-literal">NULL</span><br>                );<br>    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) <span class="hljs-comment">// cannot open the drive</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>   <br>    <span class="hljs-comment">// Create primary partition MBR</span><br>    newDisk.PartitionStyle = PARTITION_STYLE_MBR;<br>    signature = (DWORD)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>);     <span class="hljs-comment">//get signature from current time</span><br>    newDisk.Mbr.Signature = signature;<br>   <br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,<br>                IOCTL_DISK_CREATE_DISK,<br>                &amp;newDisk,<br>                <span class="hljs-built_in">sizeof</span>(CREATE_DISK),<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                &amp;readed,<br>                <span class="hljs-literal">NULL</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_DISK_CREATE_DISK Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//fresh the partition table</span><br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,<br>                IOCTL_DISK_UPDATE_PROPERTIES,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                &amp;readed,<br>                <span class="hljs-literal">NULL</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_DISK_UPDATE_PROPERTIES Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//Now create the partitions</span><br>    ret = <span class="hljs-built_in">GetDriveGeometry</span>(diskPath, &amp;pdg);<br>    <span class="hljs-keyword">if</span> ((DWORD)<span class="hljs-number">-1</span> == ret)<br>    &#123;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    sectorSize = pdg.BytesPerSector;<br>    diskSize.QuadPart = pdg.Cylinders.QuadPart * pdg.TracksPerCylinder *<br>                        pdg.SectorsPerTrack * pdg.BytesPerSector;       <span class="hljs-comment">//calculate the disk size;</span><br>    partSize.QuadPart = diskSize.QuadPart / partNum;<br> <br>    layoutStructSize = <span class="hljs-built_in">sizeof</span>(DRIVE_LAYOUT_INFORMATION_EX) + (actualPartNum - <span class="hljs-number">1</span>) * <span class="hljs-built_in">sizeof</span>(PARTITION_INFORMATION_EX);<br>    dl = (DRIVE_LAYOUT_INFORMATION_EX*)<span class="hljs-built_in">malloc</span>(layoutStructSize);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == dl)<br>    &#123;<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> (WORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    dl-&gt;PartitionStyle = (DWORD)PARTITION_STYLE_MBR;<br>    dl-&gt;PartitionCount = actualPartNum;<br>    dl-&gt;Mbr.Signature = signature;<br> <br>    <span class="hljs-comment">//clear the unused partitions</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; actualPartNum; i++)&#123;<br>        dl-&gt;PartitionEntry[i].RewritePartition = <span class="hljs-number">1</span>;<br>        dl-&gt;PartitionEntry[i].Mbr.PartitionType = PARTITION_ENTRY_UNUSED;<br>    &#125;<br>    <span class="hljs-comment">//set the profile of the partitions</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; partNum; i++)&#123;<br>        dl-&gt;PartitionEntry[i].PartitionStyle = PARTITION_STYLE_MBR;<br>        dl-&gt;PartitionEntry[i].StartingOffset.QuadPart =<br>            (partSize.QuadPart * i) + ((LONGLONG)(pdg.SectorsPerTrack) * (LONGLONG)(pdg.BytesPerSector));   <span class="hljs-comment">//32256</span><br>        dl-&gt;PartitionEntry[i].PartitionLength.QuadPart = partSize.QuadPart;<br>        dl-&gt;PartitionEntry[i].PartitionNumber = i + <span class="hljs-number">1</span>;<br>        dl-&gt;PartitionEntry[i].RewritePartition = TRUE;<br>        dl-&gt;PartitionEntry[i].Mbr.PartitionType = PARTITION_IFS;<br>        dl-&gt;PartitionEntry[i].Mbr.BootIndicator = FALSE;<br>        dl-&gt;PartitionEntry[i].Mbr.RecognizedPartition = TRUE;<br>        dl-&gt;PartitionEntry[i].Mbr.HiddenSectors =<br>            pdg.SectorsPerTrack + (DWORD)((partSize.QuadPart / sectorSize) * i);<br>    &#125;<br>    <span class="hljs-comment">//execute the layout  </span><br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,<br>                IOCTL_DISK_SET_DRIVE_LAYOUT_EX,<br>                dl,<br>                layoutStructSize,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                &amp;readed,<br>                <span class="hljs-literal">NULL</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_DISK_SET_DRIVE_LAYOUT_EX Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-built_in">free</span>(dl);<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//fresh the partition table</span><br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,<br>                IOCTL_DISK_UPDATE_PROPERTIES,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                &amp;readed,<br>                <span class="hljs-literal">NULL</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_DISK_UPDATE_PROPERTIES Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-built_in">free</span>(dl);<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    <span class="hljs-built_in">free</span>(dl);<br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>    <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">3000</span>);            <span class="hljs-comment">//wait the operations take effect</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">函数</font><font style="color:rgb(255, 0, 0);">CreateDisk</font><font style="color:rgb(51, 51, 51);">包含两个参数，</font></p><p><font style="color:rgb(0, 0, 255);">DWORD disk</font><font style="color:rgb(0, 0, 255);"> </font><font style="color:rgb(51, 51, 51);">填入物理驱动器号，参见第一节。</font></p><p><font style="color:rgb(0, 0, 255);">WORD partNum</font><font style="color:rgb(0, 0, 255);"> </font><font style="color:rgb(51, 51, 51);">表示需要创建的分区数，</font><font style="color:rgb(0, 0, 255);">partNum</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">&lt;&#x3D; 4</font><font style="color:rgb(51, 51, 51);">。</font></p><h3 id="函数的执行流程"><a href="#函数的执行流程" class="headerlink" title="函数的执行流程"></a><font style="color:rgb(51, 51, 51);">函数的执行流程</font></h3><p><font style="color:rgb(51, 51, 51);">解释如下：</font></p><p><font style="color:rgb(51, 51, 51);">&#x2F;<em><strong><strong><strong><strong><strong><strong><strong></font><font style="color:rgb(51, 51, 51);">初始化磁盘</font><font style="color:rgb(51, 51, 51);"></strong></strong></strong></strong></strong></strong></strong></em>**&#x2F;</font></p><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">根据</font><font style="color:rgb(51, 51, 51);">disk</font><font style="color:rgb(51, 51, 51);">创建设备名称，</font><font style="color:rgb(51, 51, 51);">\\.\PhysicalDriveX</font><font style="color:rgb(51, 51, 51);">，这里由于要转义，所以</font><font style="color:rgb(51, 51, 51);">”\”</font><font style="color:rgb(51, 51, 51);">都写为</font><font style="color:rgb(51, 51, 51);">”\”</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">调用</font><font style="color:rgb(51, 51, 51);">CreateFile</font><font style="color:rgb(51, 51, 51);">打开设备文件，并获得句柄。</font></p><p><font style="color:rgb(51, 51, 51);">3． </font><font style="color:rgb(51, 51, 51);">用操作码</font><font style="color:rgb(0, 0, 255);">IOCTL_DISK_CREATE_DISK</font><font style="color:rgb(51, 51, 51);">调用</font><font style="color:rgb(255, 0, 0);">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数，初始化磁盘并创建分区表。</font></p><p><font style="color:rgb(51, 51, 51);">使用</font><font style="color:rgb(0, 0, 255);">IOCTL_DISK_CREATE_DISK</font><font style="color:rgb(51, 51, 51);">操作码时，</font><font style="color:rgb(51, 51, 51);">lpInBuffer</font><font style="color:rgb(51, 51, 51);">要填入一个</font><font style="color:rgb(0, 0, 255);">CREATE_DISK</font><font style="color:rgb(51, 51, 51);">结构参数，其中包括分区表类型和磁盘签名等参数，详见</font><font style="color:rgb(51, 51, 51);">MSDN</font><font style="color:rgb(51, 51, 51);">。本例中创建</font><font style="color:rgb(51, 51, 51);">MBR</font><font style="color:rgb(51, 51, 51);">分区表，签名由当前时间产生。</font></p><p><font style="color:rgb(51, 51, 51);">4． </font><font style="color:rgb(51, 51, 51);">刷新分区表。注意，程序中任何时候对磁盘的分区信息进行了修改都需要调用操作码为</font><font style="color:rgb(0, 0, 255);">IOCTL_DISK_UPDATE_PROPERTIES</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:rgb(255, 0, 0);">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数来刷新分区表，是操作切实生效。</font></p><p><font style="color:rgb(51, 51, 51);">&#x2F;<strong><strong><strong><strong><strong><strong><strong><strong></font><font style="color:rgb(51, 51, 51);">创建分区</font><font style="color:rgb(51, 51, 51);"></strong></strong></strong></strong></strong></strong></strong></strong>***&#x2F;</font></p><p><font style="color:rgb(51, 51, 51);">5． </font><font style="color:rgb(51, 51, 51);">调用</font><font style="color:rgb(255, 0, 0);">GetDriveGeometry</font><font style="color:rgb(51, 51, 51);">获取磁盘信息（</font><font style="color:rgb(51, 51, 51);">GetDriveGeometry</font><font style="color:rgb(51, 51, 51);">参见上一节</font><a href="http://cutebunny.blog.51cto.com/301216/624027">http://cutebunny.blog.51cto.com/301216/624027</a><font style="color:rgb(51, 51, 51);">）。由于创建分区时要填入分区大小信息，我们此处先计算磁盘总大小，然后除以</font><font style="color:rgb(51, 51, 51);">partNum</font><font style="color:rgb(51, 51, 51);">将字节数平均分配到各个分区。</font></p><p><font style="color:rgb(51, 51, 51);">6． </font><font style="color:rgb(51, 51, 51);">分配</font><font style="color:rgb(0, 0, 255);">DRIVE_LAYOUT_INFORMATION_EX</font><font style="color:rgb(51, 51, 51);">结构体空间。我们通过在这个结构体中填入数据来指定如何对硬盘进行分区。结构体定义如下</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_DRIVE_LAYOUT_INFORMATION_EX</span> &#123;<br>DWORD PartitionStyle;<br>DWORD PartitionCount;<br><span class="hljs-keyword">union</span> &#123;<br>    DRIVE_LAYOUT_INFORMATION_MBR Mbr;<br>    DRIVE_LAYOUT_INFORMATION_GPT Gpt;<br>&#125;;<br>PARTITION_INFORMATION_EX PartitionEntry[<span class="hljs-number">1</span>];<br>&#125; DRIVE_LAYOUT_INFORMATION_EX,<br> *PDRIVE_LAYOUT_INFORMATION_EX;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">      </font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">其中</font><font style="color:rgb(0, 0, 255);">PartitionCount</font><font style="color:rgb(51, 51, 51);">为</font><font style="color:rgb(51, 51, 51);">4</font><font style="color:rgb(51, 51, 51);">的倍数，为简化处理，我们这里定死为</font><font style="color:rgb(51, 51, 51);">4</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">      </font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">另外还要注意</font><font style="color:rgb(0, 0, 255);">PARTITION_INFORMATION_EX</font><font style="color:rgb(51, 51, 51);">型的数组</font><font style="color:rgb(0, 0, 255);">PartitionEntry[1]</font><font style="color:rgb(51, 51, 51);">。虽然结构体中只定义了一个元素，但事实上必须在其后补足</font><font style="color:rgb(51, 51, 51);">PartitionCount – 1</font><font style="color:rgb(51, 51, 51);">个元素。所以代码中为</font><font style="color:rgb(51, 51, 51);">DRIVE_LAYOUT_INFORMATION_EX *dl</font><font style="color:rgb(51, 51, 51);">分配空间的时候加上了</font><font style="color:rgb(51, 51, 51);">(actualPartNum - 1) * sizeof(PARTITION_INFORMATION_EX)</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">7． </font><font style="color:rgb(51, 51, 51);">在</font><font style="color:rgb(0, 0, 255);">DRIVE_LAYOUT_INFORMATION_EX</font><font style="color:rgb(51, 51, 51);">结构体空间</font><font style="color:rgb(51, 51, 51);">dl</font><font style="color:rgb(51, 51, 51);">中填入数据。</font></p><p><font style="color:rgb(51, 51, 51);">先将所有分区都设为</font><font style="color:rgb(0, 0, 255);">PARTITION_ENTRY_UNUSED</font><font style="color:rgb(51, 51, 51);">，后面具体分配多少个分区再设置回来。</font></p><p><font style="color:rgb(51, 51, 51);">然后再循环体内对每个分区的</font><font style="color:rgb(51, 51, 51);">PartitionEntry</font><font style="color:rgb(51, 51, 51);">赋值，其中</font></p><p><font style="color:rgb(51, 51, 51);">StartingOffset</font><font style="color:rgb(51, 51, 51);">除了跳过前面的分区已占据的空间外，还要加上</font><font style="color:rgb(51, 51, 51);">63</font><font style="color:rgb(51, 51, 51);">个扇区空间（</font><font style="color:rgb(51, 51, 51);">32256</font><font style="color:rgb(51, 51, 51);">字节）。</font></p><p><font style="color:rgb(51, 51, 51);">PartitionNumber</font><font style="color:rgb(51, 51, 51);">从</font><font style="color:rgb(51, 51, 51);">1</font><font style="color:rgb(51, 51, 51);">开始。</font></p><p><font style="color:rgb(51, 51, 51);">Mbr.PartitionType &#x3D; PARTITION_IFS</font><font style="color:rgb(51, 51, 51);">表示</font><font style="color:rgb(51, 51, 51);">NTFS</font><font style="color:rgb(51, 51, 51);">格式。</font></p><p><font style="color:rgb(51, 51, 51);">Mbr.HiddenSectors MSDN</font><font style="color:rgb(51, 51, 51);">上说</font><font style="color:rgb(51, 51, 51);">The number of hidden sectors to be allocated when the partition table is created.</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">我理解得不是很深刻，欢迎补充。</font></p><p><font style="color:rgb(51, 51, 51);">8． </font><font style="color:rgb(51, 51, 51);">调用操作码为</font><font style="color:rgb(0, 0, 255);">IOCTL_DISK_SET_DRIVE_LAYOUT_EX</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:rgb(255, 0, 0);">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数执行分区，参数需要填入刚才准备好的</font><font style="color:rgb(0, 0, 255);">DRIVE_LAYOUT_INFORMATION_EX</font><font style="color:rgb(51, 51, 51);">结构体和大小。</font></p><p><font style="color:rgb(51, 51, 51);">9． </font><font style="color:rgb(51, 51, 51);">刷新分区表，原理同</font><font style="color:rgb(51, 51, 51);">4</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">另外，我在函数末尾加上了</font><font style="color:rgb(51, 51, 51);">Sleep(3000)</font><font style="color:rgb(51, 51, 51);">。这是因为我发现创建分区操作需要一定的执行时间，如果后续紧跟着其它相关操作（例如格式化该分区）可能会产生分区不存在的错误，所以此处等待</font><font style="color:rgb(51, 51, 51);">3</font><font style="color:rgb(51, 51, 51);">秒确保其执行完毕。</font></p><p><font style="color:rgb(51, 51, 51);">本节涉及的类型较多，但各类型具有很强的关联性，读者可随时查阅MSDN获得更详细的说明。</font></p><hr><h1 id="三、获取和删除磁盘分区信息"><a href="#三、获取和删除磁盘分区信息" class="headerlink" title="三、获取和删除磁盘分区信息"></a><font style="color:rgb(23, 35, 63);">三、获取和删除磁盘分区信息</font></h1><p><font style="color:rgb(23, 35, 63);">上一节中介绍了如何初始化一块空白的磁盘，并创建分区。那么对于一块已存在分区的磁盘，我们如何获得其分区信息，如何删除其分区信息呢？本节对这两类操作进行讨论。</font></p><h3 id="获得磁盘分区信息的代码"><a href="#获得磁盘分区信息的代码" class="headerlink" title="获得磁盘分区信息的代码"></a><font style="color:rgb(51, 51, 51);">获得磁盘分区信息的代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get the disk&#x27;s drive layout infomation</span><br><span class="hljs-comment">* input: disk, disk name</span><br><span class="hljs-comment">* output: drive layout info</span><br><span class="hljs-comment">* return: Succeed, 0</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetDiskDriveLayout</span><span class="hljs-params">(<span class="hljs-type">const</span> CHAR *disk, DRIVE_LAYOUT_INFORMATION_EX *driveLayout)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hDevice;               <span class="hljs-comment">// handle to the drive to be examined</span><br>    BOOL result;                  <span class="hljs-comment">// results flag</span><br>    DWORD readed;                 <span class="hljs-comment">// discard results</span><br> <br>    hDevice = <span class="hljs-built_in">CreateFile</span>(<br>                disk, <span class="hljs-comment">// drive to open</span><br>                GENERIC_READ | GENERIC_WRITE,     <span class="hljs-comment">// access to the drive</span><br>                FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-comment">//share mode</span><br>                <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                <span class="hljs-literal">NULL</span>            <span class="hljs-comment">// do not copy file attribute</span><br>                );<br>    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) <span class="hljs-comment">// cannot open the drive</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,               <span class="hljs-comment">// handle to device</span><br>                IOCTL_DISK_GET_DRIVE_LAYOUT_EX, <span class="hljs-comment">// dwIoControlCode</span><br>                <span class="hljs-literal">NULL</span>,                           <span class="hljs-comment">// lpInBuffer</span><br>                <span class="hljs-number">0</span>,                              <span class="hljs-comment">// nInBufferSize</span><br>                driveLayout,           <span class="hljs-comment">// output buffer</span><br>                <span class="hljs-built_in">sizeof</span>(*driveLayout),         <span class="hljs-comment">// size of output buffer</span><br>                &amp;readed,      <span class="hljs-comment">// number of bytes returned</span><br>                <span class="hljs-literal">NULL</span>     <span class="hljs-comment">// OVERLAPPED structure</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_DISK_GET_DRIVE_LAYOUT_EX Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">如果你已对上一节中创建分区的代码</font><a href="http://cutebunny.blog.51cto.com/301216/624052">http://cutebunny.blog.51cto.com/301216/624052</a><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">有了比较深刻的了解，那么这段代码就非常简单了。程序执行流程为：</font></p><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">根据</font><font style="color:rgb(51, 51, 51);">disk</font><font style="color:rgb(51, 51, 51);">名称调用</font><font style="color:red;">CreateFile</font><font style="color:rgb(51, 51, 51);">打开设备句柄。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">调用操作码为</font><font style="color:blue;">IOCTL_DISK_GET_DRIVE_LAYOUT_EX</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数获取分区信息。返回的信息存储在</font><font style="color:blue;">DRIVE_LAYOUT_INFORMATION_EX *driveLayout</font><font style="color:rgb(51, 51, 51);">中。本例中我们只考虑了一个分区的情况，如果有多个分区，适当调整</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数中的</font><font style="color:blue;">nOutBufferSize</font><font style="color:rgb(51, 51, 51);">参数即可。</font></p><p><font style="color:rgb(51, 51, 51);">3． 解析</font><font style="color:blue;">*driveLayout</font><font style="color:rgb(51, 51, 51);">即可获得分区信息。</font></p><h3 id="删除磁盘分区信息的代码"><a href="#删除磁盘分区信息的代码" class="headerlink" title="删除磁盘分区信息的代码"></a><font style="color:rgb(51, 51, 51);">删除磁盘分区信息的代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: delete the partition layout of the disk</span><br><span class="hljs-comment">* input: disk, disk name</span><br><span class="hljs-comment">* output: N/A</span><br><span class="hljs-comment">* return: Succeed, 0</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">DestroyDisk</span><span class="hljs-params">(DWORD disk)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hDevice;               <span class="hljs-comment">// handle to the drive to be examined</span><br>    BOOL result;                  <span class="hljs-comment">// results flag</span><br>    DWORD readed;                 <span class="hljs-comment">// discard results</span><br>    CHAR diskPath[DISK_PATH_LEN];<br> <br>    <span class="hljs-built_in">sprintf</span>(diskPath, <span class="hljs-string">&quot;\\\\.\\PhysicalDrive%d&quot;</span>, disk);<br> <br>    hDevice = <span class="hljs-built_in">CreateFile</span>(<br>                diskPath, <span class="hljs-comment">// drive to open</span><br>                GENERIC_READ | GENERIC_WRITE,     <span class="hljs-comment">// access to the drive</span><br>                FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-comment">//share mode</span><br>                <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                <span class="hljs-literal">NULL</span>            <span class="hljs-comment">// do not copy file attribute</span><br>                );<br>    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) <span class="hljs-comment">// cannot open the drive</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,               <span class="hljs-comment">// handle to device</span><br>                IOCTL_DISK_DELETE_DRIVE_LAYOUT, <span class="hljs-comment">// dwIoControlCode</span><br>                <span class="hljs-literal">NULL</span>,                           <span class="hljs-comment">// lpInBuffer</span><br>                <span class="hljs-number">0</span>,                              <span class="hljs-comment">// nInBufferSize</span><br>                <span class="hljs-literal">NULL</span>,                           <span class="hljs-comment">// lpOutBuffer</span><br>                <span class="hljs-number">0</span>,                              <span class="hljs-comment">// nOutBufferSize</span><br>                &amp;readed,      <span class="hljs-comment">// number of bytes returned</span><br>                <span class="hljs-literal">NULL</span>        <span class="hljs-comment">// OVERLAPPED structure</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-comment">//fprintf(stderr, &quot;IOCTL_DISK_DELETE_DRIVE_LAYOUT Error: %ld\n&quot;, GetLastError());</span><br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//fresh the partition table</span><br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,<br>                IOCTL_DISK_UPDATE_PROPERTIES,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-literal">NULL</span>,<br>                <span class="hljs-number">0</span>,<br>                &amp;readed,<br>                <span class="hljs-literal">NULL</span><br>                );<br>    <span class="hljs-keyword">if</span> (!result)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_DISK_UPDATE_PROPERTIES Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>       <br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">参数</font><font style="color:blue;">DWORD disk</font><font style="color:rgb(51, 51, 51);">为物理驱动器号。函数执行流程为：</font></p><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">根据驱动器号生成设备名称。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">调用</font><font style="color:red;">CreateFile</font><font style="color:rgb(51, 51, 51);">打开设备并获得设备句柄。</font></p><p><font style="color:rgb(51, 51, 51);">3． </font><font style="color:rgb(51, 51, 51);">调用操作码为</font><font style="color:blue;">IOCTL_DISK_DELETE_DRIVE_LAYOUT</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数删除分区表。</font></p><p><font style="color:rgb(51, 51, 51);">4． </font><font style="color:rgb(51, 51, 51);">刷新分区表。</font></p><p><font style="color:rgb(51, 51, 51);">调用</font><font style="color:red;">DestroyDisk</font><font style="color:rgb(51, 51, 51);">后的磁盘在</font><font style="color:rgb(51, 51, 51);">windows</font><font style="color:rgb(51, 51, 51);">磁盘管理中的状态为</font></p><p><img src="/2024/04/10/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E7%9A%84%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/image-0.png"></p><hr><h1 id="四、根据逻辑分区号获得物理磁盘号"><a href="#四、根据逻辑分区号获得物理磁盘号" class="headerlink" title="四、根据逻辑分区号获得物理磁盘号"></a><font style="color:rgb(23, 35, 63);">四、根据逻辑分区号获得物理磁盘号</font></h1><p><font style="color:rgb(23, 35, 63);">第一节中</font><a href="http://cutebunny.blog.51cto.com/301216/624027">http://cutebunny.blog.51cto.com/301216/624027</a><font style="color:rgb(23, 35, 63);">我们谈到了磁盘设备名称的两种形式：</font></p><p><font style="color:black;">对于物理驱动器</font><font style="color:black;">x</font><font style="color:black;">，形式为</font><font style="color:blue;"> </font><font style="color:blue;">\.\PhysicalDriveX</font><font style="color:black;">，编号从</font><font style="color:black;">0</font><font style="color:black;">开始，例如</font></p><table><thead><tr><th align="left"><font style="color:black;">名称</font></th><th align="left"><font style="color:black;">含义</font></th></tr></thead><tbody><tr><td align="left"><font style="color:black;">\.\PhysicalDrive0</font></td><td align="left"><font style="color:black;">打开第一个物理驱动器</font></td></tr><tr><td align="left"><font style="color:black;">\.\PhysicalDrive2</font></td><td align="left"><font style="color:black;">打开第三个物理驱动器</font></td></tr></tbody></table><p><font style="color:black;">对于逻辑分区（卷），形式为</font><font style="color:blue;"> </font><font style="color:blue;">\.\X</font><font style="color:black;">:</font><font style="color:black;"> </font><font style="color:black;">，例如</font></p><table><thead><tr><th align="left"><font style="color:black;">名称</font></th><th align="left"><font style="color:black;">含义</font></th></tr></thead><tbody><tr><td align="left"><font style="color:black;">\.\A:</font></td><td align="left"><font style="color:black;">打开</font><font style="color:black;">A</font><font style="color:black;">盘（软驱）</font></td></tr><tr><td align="left"><font style="color:black;">\.\C:</font></td><td align="left"><font style="color:black;">打开</font><font style="color:black;">C</font><font style="color:black;">盘（磁盘逻辑分区）</font></td></tr></tbody></table><p><font style="color:rgb(51, 51, 51);">那么如何找出物理驱动器号</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:rgb(51, 51, 51);">1</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:rgb(51, 51, 51);">2</font><font style="color:rgb(51, 51, 51);">……</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">和逻辑分区号</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">C, D, E</font><font style="color:rgb(51, 51, 51);">……之间的关系呢？本节讨论通过逻辑分区号获取所在物理驱动器号的方法，下一节讨论通过物理驱动器号找出其所包含的逻辑分区号的方法。当然，必定会存在其他思路实现同样的功能，欢迎大家补充。</font></p><p><font style="color:rgb(51, 51, 51);">首先我们要明确，物理驱动器号和逻辑分区号应该是一对多的关系。例如</font><font style="color:rgb(51, 51, 51);">disk0</font><font style="color:rgb(51, 51, 51);">可能包含</font><font style="color:rgb(51, 51, 51);">C, D, E</font><font style="color:rgb(51, 51, 51);">三个分区。所以下面讨论的函数</font><font style="color:red;">GetPhysicalDriveFromPartitionLetter</font><font style="color:rgb(51, 51, 51);">返回一个单独的整型数。</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">提供操作码</font><font style="color:blue;">IOCTL_STORAGE_GET_DEVICE_NUMBER</font><font style="color:rgb(51, 51, 51);">，可以非常方便的获得打开设备的设备类型和设备号。</font></p><h3 id="获得物理磁盘号代码"><a href="#获得物理磁盘号代码" class="headerlink" title="获得物理磁盘号代码"></a><font style="color:rgb(23, 35, 63);">获得物理磁盘号</font><font style="color:rgb(51, 51, 51);">代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get disk&#x27;s physical number from its drive letter</span><br><span class="hljs-comment">*           e.g. C--&gt;0 (C: is on disk0)</span><br><span class="hljs-comment">* input: letter, drive letter</span><br><span class="hljs-comment">* output: N/A</span><br><span class="hljs-comment">* return: Succeed, disk number</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetPhysicalDriveFromPartitionLetter</span><span class="hljs-params">(CHAR letter)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hDevice;               <span class="hljs-comment">// handle to the drive to be examined</span><br>    BOOL result;                 <span class="hljs-comment">// results flag</span><br>    DWORD readed;                   <span class="hljs-comment">// discard results</span><br>    STORAGE_DEVICE_NUMBER number;   <span class="hljs-comment">//use this to get disk numbers</span><br> <br>    CHAR path[DISK_PATH_LEN];<br>    <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;\\\\.\\%c:&quot;</span>, letter);<br>    hDevice = <span class="hljs-built_in">CreateFile</span>(path, <span class="hljs-comment">// drive to open</span><br>                         GENERIC_READ | GENERIC_WRITE,    <span class="hljs-comment">// access to the drive</span><br>                         FILE_SHARE_READ | FILE_SHARE_WRITE,    <span class="hljs-comment">//share mode</span><br>                         <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                         OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                         <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                         <span class="hljs-literal">NULL</span>);            <span class="hljs-comment">// do not copy file attribute</span><br>    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) <span class="hljs-comment">// cannot open the drive</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                hDevice,                <span class="hljs-comment">// handle to device</span><br>                IOCTL_STORAGE_GET_DEVICE_NUMBER, <span class="hljs-comment">// dwIoControlCode</span><br>                <span class="hljs-literal">NULL</span>,                            <span class="hljs-comment">// lpInBuffer</span><br>                <span class="hljs-number">0</span>,                               <span class="hljs-comment">// nInBufferSize</span><br>                &amp;number,           <span class="hljs-comment">// output buffer</span><br>                <span class="hljs-built_in">sizeof</span>(number),         <span class="hljs-comment">// size of output buffer</span><br>                &amp;readed,       <span class="hljs-comment">// number of bytes returned</span><br>                <span class="hljs-literal">NULL</span>      <span class="hljs-comment">// OVERLAPPED structure</span><br>            );<br>    <span class="hljs-keyword">if</span> (!result) <span class="hljs-comment">// fail</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_STORAGE_GET_DEVICE_NUMBER Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;%d %d %d\n\n&quot;, number.DeviceType, number.DeviceNumber, number.PartitionNumber);</span><br> <br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>    <span class="hljs-keyword">return</span> number.DeviceNumber;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a><font style="color:rgb(51, 51, 51);">代码分析</font></h3><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">根据分区号生成设备名称。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">调用</font><font style="color:red;">CreateFile</font><font style="color:rgb(51, 51, 51);">打开设备并获得设备句柄。</font></p><p><font style="color:rgb(51, 51, 51);">3． </font><font style="color:rgb(51, 51, 51);">调用操作码为</font><font style="color:blue;">IOCTL_STORAGE_GET_DEVICE_NUMBER</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数，输出为结构体变量</font><font style="color:blue;">STORAGE_DEVICE_NUMBER number</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">结构体</font><font style="color:blue;">STORAGE_DEVICE_NUMBER</font><font style="color:rgb(51, 51, 51);">定义为</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_STORAGE_DEVICE_NUMBER</span> &#123;<br>DEVICE_TYPE  DeviceType;<br>ULONG  DeviceNumber;<br>ULONG  PartitionNumber;<br>&#125; STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">      </font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">其中</font><font style="color:blue;">DeviceNumber</font><font style="color:rgb(51, 51, 51);">就是我们需要的物理磁盘号。</font></p><p><font style="color:rgb(51, 51, 51);">4． 返回</font><font style="color:blue;">DeviceNumber</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><hr><h1 id="五、获取物理磁盘上的所有逻辑分区号"><a href="#五、获取物理磁盘上的所有逻辑分区号" class="headerlink" title="五、获取物理磁盘上的所有逻辑分区号"></a><font style="color:rgb(23, 35, 63);">五、获取物理磁盘上的所有逻辑分区号</font></h1><p><font style="color:rgb(23, 35, 63);">本节讨论与上一节相反的操作，根据物理驱动器号获取该磁盘上的所有分区号。</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(23, 35, 63);">函数并没有提供操作码来直接完成此操作，所以需要稍微绕个圈子来实现这项功能。</font></p><p><font style="color:rgb(51, 51, 51);">大体思路为，先通过</font><font style="color:red;">GetLogicalDrives</font><font style="color:rgb(51, 51, 51);">函数获得系统中所有分区号，然后过滤掉非硬盘分区（例如软驱、光驱），再过滤掉不属于指定物理磁盘的分区，最后剩下的就是我们所需要的分区号了。</font></p><h3 id="获取逻辑分区号代码"><a href="#获取逻辑分区号代码" class="headerlink" title="获取逻辑分区号代码"></a><font style="color:rgb(23, 35, 63);">获取逻辑分区号</font><font style="color:rgb(51, 51, 51);">代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get disk&#x27;s drive letters from physical number</span><br><span class="hljs-comment">*           e.g. 0--&gt;&#123;C, D, E&#125; (disk0 has 3 drives, C:, D: and E:)</span><br><span class="hljs-comment">* input: phyDriveNumber, disk&#x27;s physical number</span><br><span class="hljs-comment">* output: letters, letters array</span><br><span class="hljs-comment">* return: Succeed, the amount of letters</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetPartitionLetterFromPhysicalDrive</span><span class="hljs-params">(DWORD phyDriveNumber, CHAR **letters)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD mask;<br>    DWORD driveType;<br>    DWORD bmLetters;<br>    DWORD diskNumber;<br>    CHAR path[DISK_PATH_LEN]; <br>    CHAR letter;<br>    DWORD letterNum;<br>    WORD i;<br>    CHAR *p;<br> <br>    bmLetters = <span class="hljs-built_in">GetLogicalDrives</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == bmLetters)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    letterNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">sizeof</span>(DWORD) * <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        mask = <span class="hljs-number">0x1u</span> &lt;&lt; i;<br>        <span class="hljs-keyword">if</span> ((mask &amp; bmLetters) == <span class="hljs-number">0</span>)        <span class="hljs-comment">//get one letter</span><br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        letter = (CHAR)(<span class="hljs-number">0x41</span> + i);    <span class="hljs-comment">//ASCII change</span><br>        <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;%c:\\&quot;</span>, letter);<br>        driveType = <span class="hljs-built_in">GetDriveType</span>(path);<br>        <span class="hljs-keyword">if</span> (driveType != DRIVE_FIXED)<br>        &#123;<br>            bmLetters &amp;= ~mask;     <span class="hljs-comment">//clear this bit</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        diskNumber = <span class="hljs-built_in">GetPhysicalDriveFromPartitionLetter</span>(letter);<br>        <span class="hljs-keyword">if</span> (diskNumber != phyDriveNumber)<br>        &#123;<br>            bmLetters &amp;= ~mask;     <span class="hljs-comment">//clear this bit</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        letterNum++;<br>    &#125;<br> <br>    <span class="hljs-comment">//build the result</span><br>    *letters = (CHAR *)<span class="hljs-built_in">malloc</span>(letterNum);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == *letters)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br>    p = *letters;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">sizeof</span>(DWORD) * <span class="hljs-number">8</span>; i++)<br>    &#123;<br>        mask = <span class="hljs-number">0x1u</span> &lt;&lt; i;<br>        <span class="hljs-keyword">if</span> ((mask &amp; bmLetters) == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        letter = (CHAR)(<span class="hljs-number">0x41</span> + i);    <span class="hljs-comment">//ASCII change</span><br>        *p = letter;<br>        p++;<br>    &#125;<br>   <br>    <span class="hljs-keyword">return</span> letterNum;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a><font style="color:rgb(51, 51, 51);">代码分析</font></h3><p><font style="color:rgb(51, 51, 51);">函数输入参数</font><font style="color:blue;">DWORD phyDriveNumber</font><font style="color:rgb(51, 51, 51);">为物理磁盘号，例如</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:rgb(51, 51, 51);">1</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:rgb(51, 51, 51);">2</font><font style="color:rgb(51, 51, 51);">……。</font></p><p><font style="color:rgb(51, 51, 51);">函数输出参数</font><font style="color:blue;">CHAR **letters</font><font style="color:rgb(51, 51, 51);">为获得的逻辑分区号数组指针。由于一块物理盘上可能有多个分区，所以用数组存放求得的多个分区号。</font></p><p><font style="color:rgb(51, 51, 51);">函数返回值为分区数量。</font></p><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">调用函数</font><font style="color:red;">GetLogicalDrives</font><font style="color:rgb(51, 51, 51);">获得所有分区号。注意函数</font><font style="color:red;">GetLogicalDrives</font><font style="color:rgb(51, 51, 51);">返回值为位图形时，例如第</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">位代表</font><font style="color:rgb(51, 51, 51);">A:</font><font style="color:rgb(51, 51, 51);">，第</font><font style="color:rgb(51, 51, 51);">2</font><font style="color:rgb(51, 51, 51);">位代表</font><font style="color:rgb(51, 51, 51);">C:</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">等等。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">对获得的逻辑分区逐个检测。</font></p><p><font style="color:rgb(51, 51, 51);">调用函数</font><font style="color:red;">GetDriveType</font><font style="color:rgb(51, 51, 51);">获得分区类型，如果类型不为硬盘</font><font style="color:rgb(51, 51, 51);">(driveType !&#x3D; DRIVE_FIXED)</font><font style="color:rgb(51, 51, 51);">，将此位清</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">调用函数</font><font style="color:red;">GetPhysicalDriveFromPartitionLetter</font><font style="color:rgb(51, 51, 51);">（详见第四节</font><a href="http://cutebunny.blog.51cto.com/301216/624379">http://cutebunny.blog.51cto.com/301216/624379</a><font style="color:rgb(51, 51, 51);">）查询该逻辑分区所属的物理分区号，如果不为</font><font style="color:blue;">phyDriveNumber</font><font style="color:rgb(51, 51, 51);">，将此位清</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">经过上两项条件过滤后的位图存储了我们所需的逻辑分区号。</font></p><p><font style="color:rgb(51, 51, 51);">3． </font><font style="color:rgb(51, 51, 51);">为</font><font style="color:rgb(51, 51, 51);">*letters</font><font style="color:rgb(51, 51, 51);">分配空间，并将位图转换为盘符字母存储在数组中。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><hr><h1 id="六、获取系统所在物理磁盘号"><a href="#六、获取系统所在物理磁盘号" class="headerlink" title="六、获取系统所在物理磁盘号"></a><font style="color:rgb(23, 35, 63);">六、获取系统所在物理磁盘号</font></h1><p><font style="color:rgb(23, 35, 63);">很多情况下，我们在程序中需要获知操作系统安装在哪个分区上或者哪个物理磁盘上，进而对其进行一些操作或避免一些操作。例如要避免对系统磁盘分区表的删除操作。本节讨论如何获取操作系统所在的逻辑分区号和物理驱动器号。</font></p><h3 id="获取操作系统所在的逻辑分区号和物理驱动器号代码"><a href="#获取操作系统所在的逻辑分区号和物理驱动器号代码" class="headerlink" title="获取操作系统所在的逻辑分区号和物理驱动器号代码"></a><font style="color:rgb(23, 35, 63);">获取操作系统所在的逻辑分区号和物理驱动器号</font><font style="color:rgb(51, 51, 51);">代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get the number of disk which the system installed on</span><br><span class="hljs-comment">* input: N/A</span><br><span class="hljs-comment">* output: N/A</span><br><span class="hljs-comment">* return: Succeed, disk number</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetSystemDiskPhysicalNumber</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    CHAR sysPath[DISK_PATH_LEN];<br>    CHAR diskLetter;<br>   DWORD diskNumber;<br>   <br>    DWORD ret = <span class="hljs-built_in">GetSystemDirectory</span>(sysPath, <span class="hljs-built_in">sizeof</span>(sysPath));<br>    <span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;GetSystemDirectory() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br>    diskLetter = sysPath[<span class="hljs-number">0</span>];<br>    diskNumber = <span class="hljs-built_in">GetPhysicalDriveFromPartitionLetter</span>(diskLetter);<br>    <span class="hljs-keyword">return</span> diskNumber;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a><font style="color:rgb(51, 51, 51);">代码分析</font></h3><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">先调用</font><font style="color:red;">GetSystemDirectory</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">函数获取</font><font style="color:rgb(51, 51, 51);">windows</font><font style="color:rgb(51, 51, 51);">路径。</font><font style="color:blue;">sysPath</font><font style="color:rgb(51, 51, 51);">中存储的路径形式为</font><font style="color:rgb(51, 51, 51);">C:\WINDOWS\system32</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">截取</font><font style="color:blue;">sysPath</font><font style="color:rgb(51, 51, 51);">字符串的第一个字符，即可获得系统所在的分区盘符。</font></p><p><font style="color:rgb(51, 51, 51);">3． 根据逻辑分区号，调用第四节</font><a href="http://cutebunny.blog.51cto.com/301216/624379">http://cutebunny.blog.51cto.com/301216/624379</a><font style="color:rgb(51, 51, 51);">中讨论的</font><font style="color:red;">GetPhysicalDriveFromPartitionLetter</font><font style="color:rgb(51, 51, 51);">函数即可获得操作系统所在的物理磁盘号。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><hr><h1 id="七、获取当前所有的物理磁盘号"><a href="#七、获取当前所有的物理磁盘号" class="headerlink" title="七、获取当前所有的物理磁盘号"></a><font style="color:rgb(51, 51, 51);">七、获取当前所有的物理磁盘号</font></h1><p><font style="color:rgb(51, 51, 51);">有了前几节的基础后，本节给出一个更复杂但却非常实用的例子。</font></p><p><font style="color:rgb(51, 51, 51);">很多情况下，我们想知道当前系统下安装了多少块磁盘，他们的物理驱动器号都是多少，每一块磁盘上有多少个分区，分区号怎么分布，每个分区大小是多少。这就类似于我们打开</font><font style="color:rgb(51, 51, 51);">windows</font><font style="color:rgb(51, 51, 51);">的磁盘管理看到的那种非常清晰的列表。对于后几个问题，我们根据物理驱动器号调用第五节</font><a href="http://cutebunny.blog.51cto.com/301216/624567">http://cutebunny.blog.51cto.com/301216/624567</a><font style="color:rgb(51, 51, 51);">中的</font><font style="color:red;">GetPartitionLetterFromPhysicalDrive</font><font style="color:rgb(51, 51, 51);">函数，以及第三节</font><a href="http://cutebunny.blog.51cto.com/301216/624079">http://cutebunny.blog.51cto.com/301216/624079</a><font style="color:rgb(51, 51, 51);">中的</font><font style="color:red;">GetDiskDriveLayout</font><font style="color:rgb(51, 51, 51);">函数即可搞定。那么我们这一节的重点放在如何获得当前所有物理驱动器号上。</font></p><p><font style="color:rgb(51, 51, 51);">先引入一个新的概念，设备</font><font style="color:rgb(51, 51, 51);">GUID</font><font style="color:rgb(51, 51, 51);">，它是同类设备统一并且唯一的标识码。对于磁盘，</font><font style="color:rgb(51, 51, 51);">GUID</font><font style="color:rgb(51, 51, 51);">为</font><font style="color:blue;">GUID_DEVINTERFACE_DISK</font><font style="color:rgb(51, 51, 51);">，具体值为</font><font style="color:rgb(51, 51, 51);">{53F56307-B6BF-11D0-94F2-00A0C91EFB8B}</font><font style="color:rgb(51, 51, 51);">。</font><font style="color:rgb(51, 51, 51);">windows</font><font style="color:rgb(51, 51, 51);">提供一组</font><font style="color:rgb(51, 51, 51);">API</font><font style="color:rgb(51, 51, 51);">，可以通过</font><font style="color:rgb(51, 51, 51);">GUID</font><font style="color:rgb(51, 51, 51);">枚举出所有该类型的设备。先给出几个相关</font><font style="color:rgb(51, 51, 51);">API</font><font style="color:rgb(51, 51, 51);">的简要介绍</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HDEVINFO</span><br><span class="hljs-function">    <span class="hljs-title">SetupDiGetClassDevs</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    IN LPGUID  ClassGuid,  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">    IN PCTSTR  Enumerator,  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">    IN HWND  hwndParent,  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">    IN DWORD  Flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">其中，</font><font style="color:blue;">ClassGuid</font><font style="color:rgb(51, 51, 51);">填入我们感兴趣的设备GUID，该函数返回满足查询条件的一组设备的信息集合的句柄，该句柄就是获取设备信息的关键钥匙。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL WINAPI</span><br><span class="hljs-function">    <span class="hljs-title">SetupDiEnumDeviceInterfaces</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    IN HDEVINFO  DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">    IN PSP_DEVINFO_DATA  DeviceInfoData,  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">    IN LPGUID  InterfaceClassGuid,</span></span><br><span class="hljs-params"><span class="hljs-function">    IN DWORD  MemberIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">    OUT PSP_DEVICE_INTERFACE_DATA  DeviceInterfaceData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">该函数枚举</font><font style="color:red;">SetupDiGetClassDevs</font><font style="color:rgb(51, 51, 51);">获得的句柄中包含的所有设备。参数</font><font style="color:blue;">DeviceInfoSet</font><font style="color:rgb(51, 51, 51);">填入我们上一步中获得的句柄，</font><font style="color:blue;">InterfaceClassGuid</font><font style="color:rgb(51, 51, 51);">仍旧是我们感兴趣的</font><font style="color:rgb(51, 51, 51);">GUID</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:blue;">MemberIndex</font><font style="color:rgb(51, 51, 51);">为设备在集合中的索引，从</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">开始计数，最后</font><font style="color:blue;">DeviceInterfaceData</font><font style="color:rgb(51, 51, 51);">是输出参数，存储枚举出的设备接口，后续可通过此接口获得详细的设备信息。</font></p><p><font style="color:rgb(51, 51, 51);">注意，参数</font><font style="color:blue;">DeviceInterfaceData.cbSize</font><font style="color:rgb(51, 51, 51);">在调用前必须初始化为sizeof(SP_DEVICE_INTERFACE_DATA)，这是函数的强制要求。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL WINAPI</span><br><span class="hljs-function">    <span class="hljs-title">SetupDiGetDeviceInterfaceDetail</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    IN HDEVINFO  DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">    IN PSP_DEVICE_INTERFACE_DATA  DeviceInterfaceData,</span></span><br><span class="hljs-params"><span class="hljs-function">    OUT PSP_DEVICE_INTERFACE_DETAIL_DATA  DeviceInterfaceDetailData,  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">    IN DWORD  DeviceInterfaceDetailDataSize,</span></span><br><span class="hljs-params"><span class="hljs-function">    OUT PDWORD  RequiredSize,  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">    OUT PSP_DEVINFO_DATA  DeviceInfoData  OPTIONAL</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">该函数根据上两步中的句柄和接口获取设备的详细信息数据。参数</font><font style="color:blue;">DeviceInfoSet</font><font style="color:rgb(51, 51, 51);">和</font><font style="color:blue;">DeviceInterfaceData</font><font style="color:rgb(51, 51, 51);">在上两步中获得。输出参数</font><font style="color:blue;">DeviceInterfaceDetailData</font><font style="color:rgb(51, 51, 51);">存储着设备信息数据，这个结构体中的成员</font><font style="color:blue;">DevicePath</font><font style="color:rgb(51, 51, 51);">就是我们辛辛苦苦找寻的东西了。用它可以作为设备名调用</font><font style="color:red;">CreateFile</font><font style="color:rgb(51, 51, 51);">函数打开设备，之后的操作，嘿嘿，你懂的</font><font style="color:rgb(51, 51, 51);">…</font></p><h3 id="具体代码"><a href="#具体代码" class="headerlink" title=" 具体代码"></a><font style="color:rgb(51, 51, 51);"> 具体代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get device path from GUID</span><br><span class="hljs-comment">* input: lpGuid, GUID pointer</span><br><span class="hljs-comment">* output: pszDevicePath, device paths</span><br><span class="hljs-comment">* return: Succeed, the amount of found device paths</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetDevicePath</span><span class="hljs-params">(LPGUID lpGuid, CHAR **pszDevicePath)</span></span><br><span class="hljs-function"></span>&#123;<br>    HDEVINFO hDevInfoSet;<br>    SP_DEVICE_INTERFACE_DATA ifdata;<br>    PSP_DEVICE_INTERFACE_DETAIL_DATA pDetail;<br>    DWORD nCount;<br>    BOOL result;<br> <br>    <span class="hljs-comment">//get a handle to a device information set</span><br>    hDevInfoSet = <span class="hljs-built_in">SetupDiGetClassDevs</span>(<br>                    lpGuid,      <span class="hljs-comment">// class GUID</span><br>                    <span class="hljs-literal">NULL</span>,        <span class="hljs-comment">// Enumerator</span><br>                    <span class="hljs-literal">NULL</span>,        <span class="hljs-comment">// hwndParent</span><br>                    DIGCF_PRESENT | DIGCF_DEVICEINTERFACE    <span class="hljs-comment">// present devices</span><br>                    );<br> <br>    <span class="hljs-comment">//fail...</span><br>    <span class="hljs-keyword">if</span> (hDevInfoSet == INVALID_HANDLE_VALUE)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_STORAGE_GET_DEVICE_NUMBER Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    pDetail = (PSP_DEVICE_INTERFACE_DETAIL_DATA)<span class="hljs-built_in">malloc</span>(INTERFACE_DETAIL_SIZE);<br>    <span class="hljs-keyword">if</span> (pDetail == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br>    pDetail-&gt;cbSize = <span class="hljs-built_in">sizeof</span>(SP_DEVICE_INTERFACE_DETAIL_DATA);<br> <br>    nCount = <span class="hljs-number">0</span>;<br>    result = TRUE;<br> <br>    <span class="hljs-comment">// device index = 0, 1, 2... test the device interface one by one</span><br>    <span class="hljs-keyword">while</span> (result)<br>    &#123;<br>        ifdata.cbSize = <span class="hljs-built_in">sizeof</span>(ifdata);<br> <br>        <span class="hljs-comment">//enumerates the device interfaces that are contained in a device information set</span><br>        result = <span class="hljs-built_in">SetupDiEnumDeviceInterfaces</span>(<br>                    hDevInfoSet,     <span class="hljs-comment">// DeviceInfoSet</span><br>                    <span class="hljs-literal">NULL</span>,            <span class="hljs-comment">// DeviceInfoData</span><br>                    lpGuid,          <span class="hljs-comment">// GUID</span><br>                    nCount,   <span class="hljs-comment">// MemberIndex</span><br>                    &amp;ifdata        <span class="hljs-comment">// DeviceInterfaceData</span><br>                    );<br>        <span class="hljs-keyword">if</span> (result)<br>        &#123;<br>            <span class="hljs-comment">// get details about a device interface</span><br>            result = <span class="hljs-built_in">SetupDiGetDeviceInterfaceDetail</span>(<br>                        hDevInfoSet,    <span class="hljs-comment">// DeviceInfoSet</span><br>                        &amp;ifdata,        <span class="hljs-comment">// DeviceInterfaceData</span><br>                        pDetail,        <span class="hljs-comment">// DeviceInterfaceDetailData</span><br>                        INTERFACE_DETAIL_SIZE,    <span class="hljs-comment">// DeviceInterfaceDetailDataSize</span><br>                        <span class="hljs-literal">NULL</span>,           <span class="hljs-comment">// RequiredSize</span><br>                        <span class="hljs-literal">NULL</span>          <span class="hljs-comment">// DeviceInfoData</span><br>                        );<br>            <span class="hljs-keyword">if</span> (result)<br>            &#123;<br>                <span class="hljs-comment">// copy the path to output buffer</span><br>                <span class="hljs-built_in">strcpy</span>(pszDevicePath[nCount], pDetail-&gt;DevicePath);<br>                <span class="hljs-comment">//printf(&quot;%s\n&quot;, pDetail-&gt;DevicePath);</span><br>                nCount++;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-built_in">free</span>(pDetail);<br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">SetupDiDestroyDeviceInfoList</span>(hDevInfoSet);<br> <br>    <span class="hljs-keyword">return</span> nCount;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">执行完毕后，所有满足条件的磁盘设备名称都存储在字符串数组</font><font style="color:blue;">pszDevicePath</font><font style="color:rgb(51, 51, 51);">中。有了这个关键的数组，后面就可以为所欲为了。</font></p><h3 id="获得所有物理磁盘号的完整代码"><a href="#获得所有物理磁盘号的完整代码" class="headerlink" title="获得所有物理磁盘号的完整代码"></a><font style="color:rgb(51, 51, 51);">获得所有物理磁盘号的完整代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get all present disks&#x27; physical number</span><br><span class="hljs-comment">* input: N/A</span><br><span class="hljs-comment">* output: ppDisks, array of disks&#x27; physical number</span><br><span class="hljs-comment">* return: Succeed, the amount of present disks</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetAllPresentDisks</span><span class="hljs-params">(DWORD **ppDisks)</span></span><br><span class="hljs-function"></span>&#123;<br>    CHAR *szDevicePath[MAX_DEVICE];        <span class="hljs-comment">// device path</span><br>    DWORD nDevice;<br>    HANDLE hDevice;<br>    STORAGE_DEVICE_NUMBER number;<br>    BOOL result;<br>    DWORD readed;<br>    WORD i, j;<br> <br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_DEVICE; i++)<br>    &#123;<br>        szDevicePath[i] = (CHAR *)<span class="hljs-built_in">malloc</span>(INTERFACE_DETAIL_SIZE);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == szDevicePath[i])<br>        &#123;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>            &#123;<br>                <span class="hljs-built_in">free</span>(szDevicePath[i]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">// get the device paths</span><br>    nDevice = <span class="hljs-built_in">GetDevicePath</span>(<span class="hljs-built_in">const_cast</span>&lt;LPGUID&gt;(&amp;GUID_DEVINTERFACE_DISK), szDevicePath);<br>    <span class="hljs-keyword">if</span> ((DWORD)<span class="hljs-number">-1</span> == nDevice)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_DEVICE; i++)<br>        &#123;<br>            <span class="hljs-built_in">free</span>(szDevicePath[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    *ppDisks = (DWORD *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(DWORD) * nDevice);<br>    <span class="hljs-comment">// get the disk&#x27;s physical number one by one</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nDevice; i++)<br>    &#123;<br>        hDevice = <span class="hljs-built_in">CreateFile</span>(<br>                    szDevicePath[i], <span class="hljs-comment">// drive to open</span><br>                    GENERIC_READ | GENERIC_WRITE,     <span class="hljs-comment">// access to the drive</span><br>                    FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-comment">//share mode</span><br>                    <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                    OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                    <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                    <span class="hljs-literal">NULL</span>            <span class="hljs-comment">// do not copy file attribute</span><br>                    );<br>        <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) <span class="hljs-comment">// cannot open the drive</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; MAX_DEVICE; j++)<br>            &#123;<br>                <span class="hljs-built_in">free</span>(szDevicePath[j]);<br>            &#125;<br>            <span class="hljs-built_in">free</span>(*ppDisks);<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>        &#125;<br>        result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                    hDevice,                <span class="hljs-comment">// handle to device</span><br>                    IOCTL_STORAGE_GET_DEVICE_NUMBER, <span class="hljs-comment">// dwIoControlCode</span><br>                    <span class="hljs-literal">NULL</span>,                            <span class="hljs-comment">// lpInBuffer</span><br>                    <span class="hljs-number">0</span>,                               <span class="hljs-comment">// nInBufferSize</span><br>                    &amp;number,           <span class="hljs-comment">// output buffer</span><br>                    <span class="hljs-built_in">sizeof</span>(number),         <span class="hljs-comment">// size of output buffer</span><br>                    &amp;readed,       <span class="hljs-comment">// number of bytes returned</span><br>                    <span class="hljs-literal">NULL</span>      <span class="hljs-comment">// OVERLAPPED structure</span><br>                    );<br>        <span class="hljs-keyword">if</span> (!result) <span class="hljs-comment">// fail</span><br>        &#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_STORAGE_GET_DEVICE_NUMBER Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>            <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; MAX_DEVICE; j++)<br>            &#123;<br>                <span class="hljs-built_in">free</span>(szDevicePath[j]);<br>            &#125;<br>            <span class="hljs-built_in">free</span>(*ppDisks);<br>            (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>            <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>        &#125;<br>        *(*ppDisks + i) = number.DeviceNumber;<br> <br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>    &#125;<br> <br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_DEVICE; i++)<br>    &#123;<br>        <span class="hljs-built_in">free</span>(szDevicePath[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> nDevice;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a><font style="color:rgb(51, 51, 51);">代码说明</font></h3><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">调用函数</font><font style="color:red;">GetDevicePath</font><font style="color:rgb(51, 51, 51);">获得前面所说的磁盘设备名称数组。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">对每一个磁盘设备，调用</font><font style="color:red;">CreateFile</font><font style="color:rgb(51, 51, 51);">打开并获得设备句柄。</font></p><p><font style="color:rgb(51, 51, 51);">3． </font><font style="color:rgb(51, 51, 51);">调用操作码为</font><font style="color:blue;">IOCTL_STORAGE_GET_DEVICE_NUMBER</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数获得磁盘物理驱动器号。</font></p><p><font style="color:rgb(51, 51, 51);">4． </font><font style="color:rgb(51, 51, 51);">将所有物理磁盘号存入数组返回。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">大功告成了。可能有朋友会问，</font><font style="color:red;">GetDevicePath</font><font style="color:rgb(51, 51, 51);">不是已经获得了磁盘路径么，你前面说过，这个路径不是</font><font style="color:blue;">\.\PhysicalDriveX</font><font style="color:rgb(51, 51, 51);">就是</font><font style="color:blue;">\.\X</font><font style="color:black;">:</font><font style="color:black;"> </font><font style="color:black;">，那我们解析一下这个字符串不就可以获得磁盘号或者盘符了么。很可惜，这里的磁盘路径出现了第三种形式，而且是毫无章法的形式。打开函数</font><font style="color:red;">GetDevicePath</font><font style="color:rgb(51, 51, 51);">中的注释行</font><font style="color:rgb(51, 51, 51);">&#x2F;&#x2F;printf(“%s\n”, pDetail-&gt;DevicePath);</font><font style="color:rgb(51, 51, 51);">将这种形式的路径打印出来，可以看到类似为</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">\\?\ide#diskwdc_wd1600aajs-08b4a0___________________01.03a01#5&amp;245a6b6d&amp;0&amp;0.0.0#<br>&#123;53f56307-b6bf-11d0-94f2-00a0c91efb8b&#125;<br>\\?\ide#diskwdc_wd1600aajs-08b4a0___________________01.03a01#5&amp;37141c12&amp;0&amp;0.1.0#<br>&#123;53f56307-b6bf-11d0-94f2-00a0c91efb8b&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">所以，没办法，我们还是得用</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">找出磁盘号。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><hr><h1 id="八、格式化分区的思考"><a href="#八、格式化分区的思考" class="headerlink" title="八、格式化分区的思考"></a><font style="color:rgb(23, 35, 63);">八、格式化分区的思考</font></h1><p><font style="color:rgb(23, 35, 63);">格式化分区平常在我们看来是再普通不过的操作了，点两下鼠标就可以搞定的事情，但是在程序中实现的的确确不太容易。可能有人说直接调个format命令不就好了，没错，但系统命令存在我们第一节</font><a href="http://cutebunny.blog.51cto.com/301216/624027">http://cutebunny.blog.51cto.com/301216/624027</a><font style="color:rgb(23, 35, 63);">中阐述的种种问题。</font></p><p><font style="color:rgb(51, 51, 51);">算上</font><font style="color:rgb(51, 51, 51);">format</font><font style="color:rgb(51, 51, 51);">命令，目前我发现有三种方法，</font></p><h3 id="1．Windows-API-SHFormatDrive"><a href="#1．Windows-API-SHFormatDrive" class="headerlink" title="1．Windows API SHFormatDrive"></a><font style="color:rgb(51, 51, 51);">1．Windows API </font><font style="color:red;">SHFormatDrive</font></h3><p><font style="color:rgb(51, 51, 51);">函数原型如下</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DWORD <span class="hljs-title">SHFormatDrive</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    HWND hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    UINT drive,</span></span><br><span class="hljs-params"><span class="hljs-function">    UINT fmtID,</span></span><br><span class="hljs-params"><span class="hljs-function">    UINT options</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">参数</font><font style="color:blue;">drive</font><font style="color:rgb(51, 51, 51);">就是需要格式化的分区，从</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">开始计数。</font><font style="color:rgb(51, 51, 51);">0</font><font style="color:rgb(51, 51, 51);">代表</font><font style="color:rgb(51, 51, 51);">A:</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">，</font><font style="color:rgb(51, 51, 51);">2</font><font style="color:rgb(51, 51, 51);">代表</font><font style="color:rgb(51, 51, 51);">C:</font><font style="color:rgb(51, 51, 51);"> </font><font style="color:rgb(51, 51, 51);">等等。其余参数详见</font><font style="color:rgb(51, 51, 51);">MSDN</font><font style="color:rgb(51, 51, 51);">。调用这个函数回弹出我们非常熟悉的对话框，相信我们右键格式化调用的就是它。</font></p><p><font style="color:rgb(23, 35, 63);">调用方法很简单：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">SHFormatDrive</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>, SHFMT_ID_DEFAULT, SHFMT_OPT_FULL);<br></code></pre></td></tr></table></figure><p><img src="/2024/04/10/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E7%9A%84%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/image-1.png"></p><p><font style="color:rgb(51, 51, 51);">不幸的是，这个API无法让格式化自动开始，无论如何都不可以，必须手动去点一下“开始”。郁闷了吧，有人建议可以搞个定时器，再去模拟一下Enter，等格式化完了再Enter一次。原理上可行，但总觉着有些不伦不类。</font></p><h3 id="2．利用FMIFS-dll中的未公开函数FormatEx"><a href="#2．利用FMIFS-dll中的未公开函数FormatEx" class="headerlink" title="2．利用FMIFS.dll中的未公开函数FormatEx"></a><font style="color:rgb(51, 51, 51);">2．利用FMIFS.dll中的未公开函数</font><font style="color:red;">FormatEx</font></h3><p><font style="color:rgb(51, 51, 51);">有位叫</font><font style="color:rgb(51, 51, 51);">Mark Russinovich</font><font style="color:rgb(51, 51, 51);">的大牛写出了具体代码，我暂时还没花时间去调，仅供大家参考。代码详见附件。</font></p><p><font style="color:rgb(51, 51, 51);">有人好像做成功了，具体请参考</font><a href="http://forum.sysinternals.com/creating-partitions-on-xp_topic3029.html">http://forum.sysinternals.com/creating-partitions-on-xp_topic3029.html</a></p><h3 id="3．Format命令"><a href="#3．Format命令" class="headerlink" title="3．Format命令"></a><font style="color:rgb(51, 51, 51);">3．Format命令</font></h3><p><font style="color:rgb(51, 51, 51);">这是没办法中的办法了，代码如下，很简单，不多解释。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function:</span><br><span class="hljs-comment">* input: disk, disk name</span><br><span class="hljs-comment">* output: N/A</span><br><span class="hljs-comment">* return: Succeed, 0</span><br><span class="hljs-comment">*         Fail, 1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">FormatVolume</span><span class="hljs-params">(CHAR letter)</span></span><br><span class="hljs-function"></span>&#123;<br>    DWORD ret;<br>    CHAR cmd[<span class="hljs-number">64</span>];<br>    <span class="hljs-built_in">sprintf</span>(cmd, <span class="hljs-string">&quot;format %c: /FS:NTFS /Q /Y&quot;</span>, letter);<br>    ret = (DWORD)<span class="hljs-built_in">system</span>(cmd);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><font style="color:rgb(51, 51, 51);">总结</font></h3><p><font style="color:rgb(51, 51, 51);">关于</font><font style="color:rgb(51, 51, 51);">windows</font><font style="color:rgb(51, 51, 51);">下磁盘操作编程的讨论到这里就告一段落了，最后再总结一下我们前面列举的所有例子。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">DWORD <span class="hljs-title">GetAllPresentDisks</span><span class="hljs-params">(DWORD **disks)</span></span>;        <span class="hljs-comment">//查询系统下的所有物理磁盘号</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetSystemDiskPhysicalNumber</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;        <span class="hljs-comment">//获取操作系统所在的物理磁盘号</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetPhysicalDriveFromPartitionLetter</span><span class="hljs-params">(CHAR letter)</span></span>;    <span class="hljs-comment">//根据逻辑分区号查询物理磁盘号</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetDriveGeometry</span><span class="hljs-params">(<span class="hljs-type">const</span> CHAR *disk, DISK_GEOMETRY *pdg)</span></span>;    <span class="hljs-comment">//查询磁盘物理信息</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetDiskDriveLayout</span><span class="hljs-params">(<span class="hljs-type">const</span> CHAR *disk, DRIVE_LAYOUT_INFORMATION_EX *driveLayout)</span></span>;          <span class="hljs-comment">//查询磁盘分区信息</span><br><span class="hljs-function">DWORD <span class="hljs-title">DestroyDisk</span><span class="hljs-params">(DWORD disk)</span></span>;        <span class="hljs-comment">//删除磁盘分区表</span><br><span class="hljs-function">DWORD <span class="hljs-title">CreateDisk</span><span class="hljs-params">(DWORD disk, WORD partNum)</span></span>;     <span class="hljs-comment">//初始化磁盘并创建分区</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetPartitionLetterFromPhysicalDrive</span><span class="hljs-params">(DWORD pDriveNumber, CHAR **letters)</span></span>;     <span class="hljs-comment">//查询某块物理磁盘上的所有分区</span><br><span class="hljs-function">DWORD <span class="hljs-title">FormatVolume</span><span class="hljs-params">(CHAR letter)</span></span>; <span class="hljs-comment">//格式化分区</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">上述函数有些相当危险，可能瞬间就破坏掉磁盘分区表，大家调试的时候请多加小心。当然，也不要用它来做坏事哦。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><hr><h1 id="九、区分本地磁盘与移动硬盘"><a href="#九、区分本地磁盘与移动硬盘" class="headerlink" title="九、区分本地磁盘与移动硬盘"></a><font style="color:rgb(23, 35, 63);">九、区分本地磁盘与移动硬盘</font></h1><p><font style="color:rgb(23, 35, 63);">最近碰到了个新问题，记录下来作为windows的磁盘操作那个系列的续篇吧。</font></p><p><font style="color:rgb(51, 51, 51);">一些时候我们的程序需要区分本地存储设备和</font><font style="color:rgb(51, 51, 51);">USB</font><font style="color:rgb(51, 51, 51);">存储设备。在网上搜一搜一般会找到一个最直接的</font><font style="color:rgb(51, 51, 51);">API</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:red;">GetDriveType</font><font style="color:rgb(51, 51, 51);">，其原型为</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">UINT <span class="hljs-title">GetDriveType</span><span class="hljs-params">(LPCTSTR lpRootPathName)</span></span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">参数</font><font style="color:blue;">lpRootPathName</font><font style="color:rgb(51, 51, 51);">是存储设备的根目录，例如</font>C:\，返回值即为设备类型。</p><table><thead><tr><th align="left"><strong><font style="color:black;">Return code</font></strong></th><th align="left"><strong><font style="color:black;">Description</font></strong></th></tr></thead><tbody><tr><td align="left"><font style="color:black;">DRIVE_REMOVABLE</font></td><td align="left"><font style="color:black;">The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader.</font></td></tr><tr><td align="left"><font style="color:black;">DRIVE_FIXED</font></td><td align="left"><font style="color:black;">The drive has fixed media; for example, a hard drive or flash drive.</font></td></tr></tbody></table><p><font style="color:rgb(51, 51, 51);">或者采用一种稍微复杂一点的方法，使用我们第一节</font><a href="http://cutebunny.blog.51cto.com/301216/624027">http://cutebunny.blog.51cto.com/301216/624027</a><font style="color:rgb(51, 51, 51);">中介绍的</font><font style="color:red;">GetDriveGeometry()</font><font style="color:rgb(51, 51, 51);">函数，其输出参数</font><font style="color:blue;">DISK_GEOMETRY *pdg</font><font style="color:rgb(51, 51, 51);">中的</font><font style="color:blue;">MediaType</font><font style="color:rgb(51, 51, 51);">字段代表设备类型。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">_MEDIA_TYPE</span><br>&#123;<br>    …<br>    RemovableMedia<br>    FixedMedia<br>    …<br>&#125;MEDIA_TYPE;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">这两个方法看似能方便快捷的解决我们的需求，但事实上当你使用</font><font style="color:red;">GetDriveType()</font><font style="color:rgb(51, 51, 51);">去获取一块移动硬盘的类型时，程序会坑爹的告诉你这块移动硬盘的类型是</font><font style="color:blue;">DRIVE_FIXED</font><font style="color:rgb(51, 51, 51);">，根本无法与本地磁盘区分开来。</font><font style="color:red;">GetDriveGeometry()</font><font style="color:rgb(51, 51, 51);">函数的结果也是如此。</font></p><p><font style="color:rgb(51, 51, 51);">事实上，上述方法只对小容量的</font><font style="color:rgb(51, 51, 51);">U</font><font style="color:rgb(51, 51, 51);">盘有效，会返回给你</font><font style="color:blue;">DRIVE_REMOVABLE</font><font style="color:rgb(51, 51, 51);">的结果；而对移动硬盘甚至是一块稍大容量的</font><font style="color:rgb(51, 51, 51);">U</font><font style="color:rgb(51, 51, 51);">盘（比如我有一块格式化为</font><font style="color:rgb(51, 51, 51);">FAT32</font><font style="color:rgb(51, 51, 51);">格式的</font><font style="color:rgb(51, 51, 51);">4G U</font><font style="color:rgb(51, 51, 51);">盘），就无能为力了。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">所以，我们必须采用别的思路了，这里我介绍一种通过查看总线类型来区分本地磁盘和</font><font style="color:rgb(51, 51, 51);">USB</font><font style="color:rgb(51, 51, 51);">磁盘的方法。当然，其基础还是我们那万能的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">，不过这次的控制码为</font><font style="color:blue;">IOCTL_STORAGE_QUERY_PROPERTY</font><font style="color:rgb(51, 51, 51);">。同时对应的输入参数为</font><font style="color:blue;">STORAGE_PROPERTY_QUERY</font><font style="color:rgb(51, 51, 51);">结构，输出参数为</font><font style="color:blue;">STORAGE_DEVICE_DESCRIPTOR</font><font style="color:rgb(51, 51, 51);">结构体。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_STORAGE_PROPERTY_QUERY</span> &#123;<br>    STORAGE_PROPERTY_ID  PropertyId;<br>    STORAGE_QUERY_TYPE  QueryType;<br>    UCHAR  AdditionalParameters[<span class="hljs-number">1</span>];<br>&#125; STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">调用时需设置输入参数中的字段</font></p><p><font style="color:rgb(51, 51, 51);">PropertyId &#x3D; StorageDeviceProperty;</font></p><p><font style="color:rgb(51, 51, 51);">QueryType &#x3D; PropertyStandardQuery;</font></p><p><font style="color:rgb(51, 51, 51);">以表明我们要查询一个</font><font style="color:rgb(51, 51, 51);">device descriptor</font><font style="color:rgb(51, 51, 51);">，也就是说，只有指定这种类型，输出参数才会得到</font><font style="color:blue;">STORAGE_DEVICE_DESCRIPTOR</font><font style="color:rgb(51, 51, 51);">类型数据。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_STORAGE_DEVICE_DESCRIPTOR</span> &#123;<br>    ULONG  Version;<br>    ULONG  Size;<br>    UCHAR  DeviceType;<br>    UCHAR  DeviceTypeModifier;<br>    BOOLEAN  RemovableMedia;<br>    BOOLEAN  CommandQueueing;<br>    ULONG  VendorIdOffset;<br>    ULONG  ProductIdOffset;<br>    ULONG  ProductRevisionOffset;<br>    ULONG  SerialNumberOffset;<br>    STORAGE_BUS_TYPE  BusType;<br>    ULONG  RawPropertiesLength;<br>    UCHAR  RawDeviceProperties[<span class="hljs-number">1</span>];<br>&#125; STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">其中，</font><font style="color:blue;">BusType</font><font style="color:rgb(51, 51, 51);">定义为</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">_STORAGE_BUS_TYPE</span> &#123;<br>    BusTypeUnknown = <span class="hljs-number">0x00</span>,<br>    BusTypeScsi,<br>    BusTypeAtapi,<br>    BusTypeAta,<br>    BusType1394,<br>    BusTypeSsa,<br>    BusTypeFibre,<br>    BusTypeUsb,<br>    BusTypeRAID,<br>    BusTypeiScsi,<br>    BusTypeSas,<br>    BusTypeSata,<br>    BusTypeSd,<br>    BusTypeMmc,<br>    BusTypeMax,<br>    BusTypeMaxReserved = <span class="hljs-number">0x7F</span><br>&#125; STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">明白了吧，如果总线类型为</font><font style="color:blue;">BusTypeUsb</font><font style="color:rgb(51, 51, 51);">，就是找到了我们的</font><font style="color:rgb(51, 51, 51);">USB</font><font style="color:rgb(51, 51, 51);">移动硬盘了。</font></p><p><font style="color:rgb(51, 51, 51);">但此时还需要解决一个问题，</font><font style="color:blue;">STORAGE_DEVICE_DESCRIPTOR</font><font style="color:rgb(51, 51, 51);">可以理解为一个变长缓冲区，最后一个字段</font><font style="color:blue;">RawDeviceProperties[1]</font><font style="color:rgb(51, 51, 51);">是可以动态扩展的（</font><font style="color:rgb(51, 51, 51);">windows API</font><font style="color:rgb(51, 51, 51);">经常有这种情况）</font><font style="color:rgb(51, 51, 51);">，那么函数</font><font style="color:red;">DeviceIoControl()</font><font style="color:rgb(51, 51, 51);">中的参数</font><font style="color:rgb(51, 51, 51);">nOutBufferSize</font><font style="color:rgb(51, 51, 51);">应该填多少呢？这时我们需要借助另一个数据结构</font><font style="color:blue;">STORAGE_DESCRIPTOR_HEADER</font><font style="color:rgb(51, 51, 51);">，在我们不知道</font><font style="color:rgb(51, 51, 51);">device descriptor</font><font style="color:rgb(51, 51, 51);">实际需要多大的缓冲区时，可以先把</font><font style="color:blue;">STORAGE_DESCRIPTOR_HEADER</font><font style="color:rgb(51, 51, 51);">作为输出参数以获得</font><font style="color:rgb(51, 51, 51);">device descriptor</font><font style="color:rgb(51, 51, 51);">的缓冲区大小，其大小被存入</font><font style="color:rgb(51, 51, 51);">header</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:blue;">size</font><font style="color:rgb(51, 51, 51);">字段中。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_STORAGE_DESCRIPTOR_HEADER</span> &#123;<br>    ULONG  Version;<br>    ULONG  Size;<br>&#125; STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;<br></code></pre></td></tr></table></figure><h3 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a><font style="color:rgb(51, 51, 51);">具体代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/******************************************************************************</span><br><span class="hljs-comment">* Function: get the bus type of an disk</span><br><span class="hljs-comment">* input: drive name (c:)</span><br><span class="hljs-comment">* output: bus type</span><br><span class="hljs-comment">* return: Succeed, 0</span><br><span class="hljs-comment">*         Fail, -1</span><br><span class="hljs-comment">******************************************************************************/</span><br><span class="hljs-function">DWORD <span class="hljs-title">GetDriveTypeByBus</span><span class="hljs-params">(<span class="hljs-type">const</span> CHAR *drive, WORD *type)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE hDevice;               <span class="hljs-comment">// handle to the drive to be examined</span><br>    BOOL result;                 <span class="hljs-comment">// results flag</span><br>    DWORD readed;                   <span class="hljs-comment">// discard results</span><br> <br>    STORAGE_DESCRIPTOR_HEADER *pDevDescHeader;<br>    STORAGE_DEVICE_DESCRIPTOR *pDevDesc;<br>    DWORD devDescLength;<br>    STORAGE_PROPERTY_QUERY query;<br> <br>    hDevice = <span class="hljs-built_in">CreateFile</span>(<br>                    drive, <span class="hljs-comment">// drive to open</span><br>                    GENERIC_READ | GENERIC_WRITE,     <span class="hljs-comment">// access to the drive</span><br>                    FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-comment">//share mode</span><br>                    <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                    OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                    <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                    <span class="hljs-literal">NULL</span>            <span class="hljs-comment">// do not copy file attribute</span><br>                    );<br>    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE) <span class="hljs-comment">// cannot open the drive</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    query.PropertyId = StorageDeviceProperty;<br>    query.QueryType = PropertyStandardQuery;<br> <br>    pDevDescHeader = (STORAGE_DESCRIPTOR_HEADER *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(STORAGE_DESCRIPTOR_HEADER));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pDevDescHeader)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br>   <br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                    hDevice,     <span class="hljs-comment">// device to be queried</span><br>                    IOCTL_STORAGE_QUERY_PROPERTY,     <span class="hljs-comment">// operation to perform</span><br>                    &amp;query,<br>                    <span class="hljs-keyword">sizeof</span> query,               <span class="hljs-comment">// no input buffer</span><br>                    pDevDescHeader,<br>                    <span class="hljs-built_in">sizeof</span>(STORAGE_DESCRIPTOR_HEADER),     <span class="hljs-comment">// output buffer</span><br>                    &amp;readed,                 <span class="hljs-comment">// # bytes returned</span><br>                    <span class="hljs-literal">NULL</span>);      <span class="hljs-comment">// synchronous I/O</span><br>    <span class="hljs-keyword">if</span> (!result)        <span class="hljs-comment">//fail</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_STORAGE_QUERY_PROPERTY Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-built_in">free</span>(pDevDescHeader);<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    devDescLength = pDevDescHeader-&gt;Size;<br>    pDevDesc = (STORAGE_DEVICE_DESCRIPTOR *)<span class="hljs-built_in">malloc</span>(devDescLength);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == pDevDesc)<br>    &#123;<br>        <span class="hljs-built_in">free</span>(pDevDescHeader);<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                    hDevice,     <span class="hljs-comment">// device to be queried</span><br>                    IOCTL_STORAGE_QUERY_PROPERTY,     <span class="hljs-comment">// operation to perform</span><br>                    &amp;query,<br>                    <span class="hljs-keyword">sizeof</span> query,               <span class="hljs-comment">// no input buffer</span><br>                    pDevDesc,<br>                    devDescLength,     <span class="hljs-comment">// output buffer</span><br>                    &amp;readed,                 <span class="hljs-comment">// # bytes returned</span><br>                    <span class="hljs-literal">NULL</span>);      <span class="hljs-comment">// synchronous I/O</span><br>    <span class="hljs-keyword">if</span> (!result)        <span class="hljs-comment">//fail</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;IOCTL_STORAGE_QUERY_PROPERTY Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-built_in">free</span>(pDevDescHeader);<br>        <span class="hljs-built_in">free</span>(pDevDesc);<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">DWORD</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br> <br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;, pDevDesc-&gt;BusType);</span><br>    *type = (WORD)pDevDesc-&gt;BusType;<br>    <span class="hljs-built_in">free</span>(pDevDescHeader);<br>    <span class="hljs-built_in">free</span>(pDevDesc);<br> <br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码说明-1"><a href="#代码说明-1" class="headerlink" title="代码说明"></a><font style="color:rgb(51, 51, 51);">代码说明</font></h3><p><font style="color:rgb(51, 51, 51);">1． </font><font style="color:rgb(51, 51, 51);">调用</font><font style="color:red;">CreateFile</font><font style="color:rgb(51, 51, 51);">打开并获得设备句柄。</font></p><p><font style="color:rgb(51, 51, 51);">2． </font><font style="color:rgb(51, 51, 51);">在输入参数</font><font style="color:blue;">STORAGE_PROPERTY_QUERY query</font><font style="color:rgb(51, 51, 51);">中指定查询类型。</font></p><p><font style="color:rgb(51, 51, 51);">3． </font><font style="color:rgb(51, 51, 51);">以</font><font style="color:blue;">STORAGE_DESCRIPTOR_HEADER *pDevDescHeader</font><font style="color:rgb(51, 51, 51);">为输出参数，调用操作码为</font><font style="color:blue;">IOCTL_STORAGE_QUERY_PROPERTY</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数获得输出缓冲区大小。</font></p><p><font style="color:rgb(51, 51, 51);">4． </font><font style="color:rgb(51, 51, 51);">按</font><font style="color:rgb(51, 51, 51);">3</font><font style="color:rgb(51, 51, 51);">中获得的缓冲区大小为</font><font style="color:blue;">STORAGE_DEVICE_DESCRIPTOR *pDevDesc</font><font style="color:rgb(51, 51, 51);">分配空间，以</font><font style="color:blue;">pDevDesc</font><font style="color:rgb(51, 51, 51);">为输出参数，调用操作码为</font><font style="color:blue;">IOCTL_STORAGE_QUERY_PROPERTY</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:red;">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">函数获得</font><font style="color:rgb(51, 51, 51);">device descriptor</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">5． </font><font style="color:rgb(51, 51, 51);">从</font><font style="color:rgb(51, 51, 51);">device descriptor</font><font style="color:rgb(51, 51, 51);">中获得</font><font style="color:blue;">BusType</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><hr><h1 id="十、获取磁盘型号"><a href="#十、获取磁盘型号" class="headerlink" title="十、获取磁盘型号"></a><font style="color:rgb(23, 35, 63);">十、获取磁盘型号</font></h1><p><font style="color:rgb(23, 35, 63);">我们在第七节</font><a href="http://cutebunny.blog.51cto.com/301216/625577">http://cutebunny.blog.51cto.com/301216/625577</a><font style="color:rgb(23, 35, 63);">中探讨了如何获取系统中所有磁盘的磁盘号。但是在很多情况下，仅仅是磁盘号并不能满足我们的需求，我们希望在应用程序界面上显示更详细的磁盘信息。通过前面几节的方法，我们已经可以获得许多磁盘信息，例如磁盘大小，柱面，扇区，分区等等。但是如下图所示，我们在设备管理器中看到的“WDC WD1600AAJS-08B4A0”这种更为人性化的磁盘类型描述，至今为止我们还没有办法获得。本节就来解决这个问题。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">提前声明，本节涉及一些</font><font style="color:rgb(51, 51, 51);">ATA&#x2F;APAPI</font><font style="color:rgb(51, 51, 51);">内容，我本人理解的不是十分透彻，在网上搜集了很多相关资料才调通了后面示例中的代码。如有不正确之处欢迎大家指教。</font></p><p><font style="color:rgb(51, 51, 51);">对于类似于“WDC WD1600AAJS-08B4A0”的磁盘型号描述，下文中称为</font><strong><font style="color:rgb(51, 51, 51);">model number</font></strong><font style="color:rgb(51, 51, 51);">，微软在VC&#x2F;MFC环境中没有开放获取的方法。所以我们要用到ATA&#x2F;APAPI的IDENTIFY DEVICE指令。ATA&#x2F;APAPI是国际组织T13起草和发布的IDE&#x2F;EIDE&#x2F;UDMA硬盘及其它可移动存储设备与主机接口的标准，至今已经到了ATA&#x2F;APAPI-7版本。该接口标准规定了ATA&#x2F;ATAPI设备的输入输出寄存器和指令集。</font></p><p><font style="color:rgb(51, 51, 51);">首先介绍几个新的</font><font style="color:rgb(51, 51, 51);">DeviceIoControl</font><font style="color:rgb(51, 51, 51);">的控制码和相关数据结构。</font></p><h3 id="1-控制码SMART-GET-VERSION"><a href="#1-控制码SMART-GET-VERSION" class="headerlink" title="1. 控制码SMART_GET_VERSION"></a><font style="color:rgb(51, 51, 51);">1. 控制码SMART_GET_VERSION</font></h3><p><font style="color:rgb(51, 51, 51);">控制码</font><font style="color:rgb(51, 51, 51);">SMART_GET_VERSION</font><font style="color:rgb(51, 51, 51);">在</font><font style="color:rgb(51, 51, 51);">MSDN</font><font style="color:rgb(51, 51, 51);">中的描述如下，</font></p><p><strong><font style="color:black;">Operation</font></strong></p><p><font style="color:black;">Returns version information, a capabilities mask, and a bitmask for the device. This IOCTL must be handled by drivers that support Self-Monitoring Analysis and Reporting Technology (SMART).</font></p><p><font style="color:rgb(51, 51, 51);">好，我们要的就是这个</font><font style="color:rgb(51, 51, 51);">bitmask</font><font style="color:rgb(51, 51, 51);">，它是我们后面完成任务的关键参数。</font></p><p><font style="color:rgb(51, 51, 51);">而这个bitmask是结构体</font><strong><font style="color:rgb(51, 51, 51);">GETVERSIONINPARAMS</font></strong><font style="color:rgb(51, 51, 51);">的成员，此结构体是作为控制码为</font><strong><font style="color:rgb(51, 51, 51);">SMART_GET_VERSION</font></strong><font style="color:rgb(51, 51, 51);">的</font><font style="color:#DF2A3F;">DeviceIoControl()</font><font style="color:rgb(51, 51, 51);">函数的输出参数的。</font></p><p><font style="color:rgb(51, 51, 51);">定义如下：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_GETVERSIONINPARAMS</span> &#123;<br>    UCHAR  bVersion;<br>    UCHAR  bRevision;<br>    UCHAR  bReserved;<br>    UCHAR  bIDEDeviceMap;<br>    ULONG  fCapabilities;<br>    ULONG  dwReserved[<span class="hljs-number">4</span>];<br>&#125; GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;<br></code></pre></td></tr></table></figure><p>其中UCHAR  bIDEDeviceMap就是我们所要的bitmask，具体定义为</p><p><code>bIDEDeviceMap</code></p><p>包含位图。 下表说明了位图的含义：</p><p><strong>展开表</strong></p><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);">位图标志</font></th><th align="left"><font style="color:rgb(22, 22, 22);">意义</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 0 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 SATA 驱动器或 IDE 驱动器。 如果它是 IDE 驱动器，则它是主通道上的主设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 1 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 IDE 驱动器，它是主通道上的从属设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 2 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 IDE 驱动器，它是辅助通道上的主设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 3 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 IDE 驱动器，它是辅助通道上的从属设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 4 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 ATAPI 驱动器，它是主通道上的主设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 5 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 ATAPI 驱动器，它是主通道上的从属设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 6 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 ATAPI 驱动器，它是辅助通道上的主设备。</font></td></tr><tr><td align="left"><font style="color:rgb(22, 22, 22);">位 7 设置为 1。</font></td><td align="left"><font style="color:rgb(22, 22, 22);">设备是 ATAPI 驱动器，它是辅助通道上的从属设备。</font></td></tr></tbody></table><p><font style="color:rgb(51, 51, 51);">从这里可以看出，这个关键的参数事实上表明了驱动器类型和所在的</font><font style="color:rgb(51, 51, 51);">channel</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);"> </font></p><h3 id="2-控制码SMART-RCV-DRIVE-DATA"><a href="#2-控制码SMART-RCV-DRIVE-DATA" class="headerlink" title="2. 控制码SMART_RCV_DRIVE_DATA"></a><font style="color:rgb(51, 51, 51);">2. 控制码SMART_RCV_DRIVE_DATA</font></h3><p><font style="color:rgb(51, 51, 51);">使用控制码</font><strong><font style="color:rgb(51, 51, 51);">SMART_RCV_DRIVE_DATA</font></strong><font style="color:rgb(51, 51, 51);">的</font><font style="color:#DF2A3F;">DeviceIoControl()</font><font style="color:rgb(51, 51, 51);">函数的输入输出参数分别为</font><strong><font style="color:rgb(51, 51, 51);">SENDCMDINPARAMS</font></strong><font style="color:rgb(51, 51, 51);">和</font><strong><font style="color:rgb(51, 51, 51);">SENDCMDOUTPARAMS</font></strong><font style="color:rgb(51, 51, 51);">。我们在输入参数SENDCMDINPARAMS中填入合适的信息，包括刚才那个关键的bitmask，就能在输出参数SENDCMDOUTPARAMS中拿到我们需要的model number。</font></p><p><strong><font style="color:rgb(51, 51, 51);">SENDCMDOUTPARAMS</font></strong><font style="color:rgb(51, 51, 51);">结构定义如下，</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_SENDCMDOUTPARAMS</span> &#123;<br>    ULONG  cBufferSize;<br>    DRIVERSTATUS  DriverStatus;<br>    UCHAR  bBuffer[<span class="hljs-number">1</span>];<br>&#125; SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">model number</font><font style="color:rgb(51, 51, 51);">就存在于</font><font style="color:rgb(51, 51, 51);">bBuffer</font><font style="color:rgb(51, 51, 51);">中，</font><font style="color:rgb(51, 51, 51);">bBuffer</font><font style="color:rgb(51, 51, 51);">的格式需要依据</font><font style="color:rgb(51, 51, 51);">ATA&#x2F;ATAPI</font><font style="color:rgb(51, 51, 51);">中的定义解析：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_IDINFO</span><br>&#123;<br>    USHORT  wGenConfig;     <span class="hljs-comment">// WORD 0: 基本信息字</span><br>    USHORT  wNumCyls;     <span class="hljs-comment">// WORD 1: 柱面数</span><br>    USHORT  wReserved2;     <span class="hljs-comment">// WORD 2: 保留</span><br>    USHORT  wNumHeads;     <span class="hljs-comment">// WORD 3: 磁头数</span><br>    USHORT  wReserved4;        <span class="hljs-comment">// WORD 4: 保留</span><br>    USHORT  wReserved5;        <span class="hljs-comment">// WORD 5: 保留</span><br>    USHORT  wNumSectorsPerTrack;  <span class="hljs-comment">// WORD 6: 每磁道扇区数</span><br>    USHORT  wVendorUnique[<span class="hljs-number">3</span>];   <span class="hljs-comment">// WORD 7-9: 厂家设定值</span><br>    CHAR    sSerialNumber[<span class="hljs-number">20</span>];   <span class="hljs-comment">// WORD 10-19:序列号</span><br>    USHORT  wBufferType;    <span class="hljs-comment">// WORD 20: 缓冲类型</span><br>    USHORT  wBufferSize;    <span class="hljs-comment">// WORD 21: 缓冲大小</span><br>    USHORT  wECCSize;     <span class="hljs-comment">// WORD 22: ECC校验大小</span><br>    CHAR    sFirmwareRev[<span class="hljs-number">8</span>];   <span class="hljs-comment">// WORD 23-26: 固件版本</span><br>    CHAR    sModelNumber[<span class="hljs-number">40</span>];   <span class="hljs-comment">// WORD 27-46: 内部型号</span><br>    USHORT  wMoreVendorUnique;   <span class="hljs-comment">// WORD 47: 厂家设定值</span><br>    USHORT  wReserved48;    <span class="hljs-comment">// WORD 48: 保留</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  reserved1:<span class="hljs-number">8</span>;<br>        USHORT  DMA:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持DMA</span><br>        USHORT  LBA:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持LBA</span><br>        USHORT  DisIORDY:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=可不使用IORDY</span><br>        USHORT  IORDY:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持IORDY</span><br>        USHORT  SoftReset:<span class="hljs-number">1</span>;   <span class="hljs-comment">// 1=需要ATA软启动</span><br>        USHORT  Overlap:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持重叠操作</span><br>        USHORT  Queue:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持命令队列</span><br>        USHORT  InlDMA:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持交叉存取DMA</span><br>    &#125; wCapabilities;     <span class="hljs-comment">// WORD 49: 一般能力</span><br>    USHORT  wReserved1;     <span class="hljs-comment">// WORD 50: 保留</span><br>    USHORT  wPIOTiming;     <span class="hljs-comment">// WORD 51: PIO时序</span><br>    USHORT  wDMATiming;     <span class="hljs-comment">// WORD 52: DMA时序</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  CHSNumber:<span class="hljs-number">1</span>;   <span class="hljs-comment">// 1=WORD 54-58有效</span><br>        USHORT  CycleNumber:<span class="hljs-number">1</span>;   <span class="hljs-comment">// 1=WORD 64-70有效</span><br>        USHORT  UnltraDMA:<span class="hljs-number">1</span>;   <span class="hljs-comment">// 1=WORD 88有效</span><br>        USHORT  reserved:<span class="hljs-number">13</span>;<br>    &#125; wFieldValidity;     <span class="hljs-comment">// WORD 53: 后续字段有效性标志</span><br>    USHORT  wNumCurCyls;    <span class="hljs-comment">// WORD 54: CHS可寻址的柱面数</span><br>    USHORT  wNumCurHeads;    <span class="hljs-comment">// WORD 55: CHS可寻址的磁头数</span><br>    USHORT  wNumCurSectorsPerTrack;  <span class="hljs-comment">// WORD 56: CHS可寻址每磁道扇区数</span><br>    USHORT  wCurSectorsLow;    <span class="hljs-comment">// WORD 57: CHS可寻址的扇区数低位字</span><br>    USHORT  wCurSectorsHigh;   <span class="hljs-comment">// WORD 58: CHS可寻址的扇区数高位字</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  CurNumber:<span class="hljs-number">8</span>;   <span class="hljs-comment">// 当前一次性可读写扇区数</span><br>        USHORT  Multi:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择多扇区读写</span><br>        USHORT  reserved1:<span class="hljs-number">7</span>;<br>    &#125; wMultSectorStuff;     <span class="hljs-comment">// WORD 59: 多扇区读写设定</span><br>    ULONG  dwTotalSectors;    <span class="hljs-comment">// WORD 60-61: LBA可寻址的扇区数</span><br>    USHORT  wSingleWordDMA;    <span class="hljs-comment">// WORD 62: 单字节DMA支持能力</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  Mode0:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式0 (4.17Mb/s)</span><br>        USHORT  Mode1:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式1 (13.3Mb/s)</span><br>        USHORT  Mode2:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式2 (16.7Mb/s)</span><br>        USHORT  Reserved1:<span class="hljs-number">5</span>;<br>        USHORT  Mode0Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式0</span><br>        USHORT  Mode1Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式1</span><br>        USHORT  Mode2Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式2</span><br>        USHORT  Reserved2:<span class="hljs-number">5</span>;<br>    &#125; wMultiWordDMA;     <span class="hljs-comment">// WORD 63: 多字节DMA支持能力</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  AdvPOIModes:<span class="hljs-number">8</span>;   <span class="hljs-comment">// 支持高级POI模式数</span><br>        USHORT  reserved:<span class="hljs-number">8</span>;<br>    &#125; wPIOCapacity;      <span class="hljs-comment">// WORD 64: 高级PIO支持能力</span><br>    USHORT  wMinMultiWordDMACycle;  <span class="hljs-comment">// WORD 65: 多字节DMA传输周期的最小值</span><br>    USHORT  wRecMultiWordDMACycle;  <span class="hljs-comment">// WORD 66: 多字节DMA传输周期的建议值</span><br>    USHORT  wMinPIONoFlowCycle;   <span class="hljs-comment">// WORD 67: 无流控制时PIO传输周期的最小值</span><br>    USHORT  wMinPOIFlowCycle;   <span class="hljs-comment">// WORD 68: 有流控制时PIO传输周期的最小值</span><br>    USHORT  wReserved69[<span class="hljs-number">11</span>];   <span class="hljs-comment">// WORD 69-79: 保留</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  Reserved1:<span class="hljs-number">1</span>;<br>        USHORT  ATA1:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA-1</span><br>        USHORT  ATA2:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA-2</span><br>        USHORT  ATA3:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA-3</span><br>        USHORT  ATA4:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA/ATAPI-4</span><br>        USHORT  ATA5:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA/ATAPI-5</span><br>        USHORT  ATA6:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA/ATAPI-6</span><br>        USHORT  ATA7:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA/ATAPI-7</span><br>        USHORT  ATA8:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA/ATAPI-8</span><br>        USHORT  ATA9:<span class="hljs-number">1</span>;     <span class="hljs-comment">// 1=支持ATA/ATAPI-9</span><br>        USHORT  ATA10:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持ATA/ATAPI-10</span><br>        USHORT  ATA11:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持ATA/ATAPI-11</span><br>        USHORT  ATA12:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持ATA/ATAPI-12</span><br>        USHORT  ATA13:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持ATA/ATAPI-13</span><br>        USHORT  ATA14:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持ATA/ATAPI-14</span><br>        USHORT  Reserved2:<span class="hljs-number">1</span>;<br>    &#125; wMajorVersion;     <span class="hljs-comment">// WORD 80: 主版本</span><br>    USHORT  wMinorVersion;    <span class="hljs-comment">// WORD 81: 副版本</span><br>    USHORT  wReserved82[<span class="hljs-number">6</span>];    <span class="hljs-comment">// WORD 82-87: 保留</span><br>    <span class="hljs-keyword">struct</span> &#123;<br>        USHORT  Mode0:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式0 (16.7Mb/s)</span><br>        USHORT  Mode1:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式1 (25Mb/s)</span><br>        USHORT  Mode2:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式2 (33Mb/s)</span><br>        USHORT  Mode3:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式3 (44Mb/s)</span><br>        USHORT  Mode4:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式4 (66Mb/s)</span><br>        USHORT  Mode5:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式5 (100Mb/s)</span><br>        USHORT  Mode6:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式6 (133Mb/s)</span><br>        USHORT  Mode7:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=支持模式7 (166Mb/s) ???</span><br>        USHORT  Mode0Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式0</span><br>        USHORT  Mode1Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式1</span><br>        USHORT  Mode2Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式2</span><br>        USHORT  Mode3Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式3</span><br>        USHORT  Mode4Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式4</span><br>        USHORT  Mode5Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式5</span><br>        USHORT  Mode6Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式6</span><br>        USHORT  Mode7Sel:<span class="hljs-number">1</span>;    <span class="hljs-comment">// 1=已选择模式7</span><br>    &#125; wUltraDMA;      <span class="hljs-comment">// WORD 88:  Ultra DMA支持能力</span><br>    USHORT    wReserved89[<span class="hljs-number">167</span>];   <span class="hljs-comment">// WORD 89-255</span><br>&#125; IDINFO, *PIDINFO;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">由此可知，</font><font style="color:rgb(51, 51, 51);">512</font><font style="color:rgb(51, 51, 51);">字节的</font><font style="color:rgb(51, 51, 51);">bBuffer</font><font style="color:rgb(51, 51, 51);">中，</font><font style="color:rgb(51, 51, 51);">27~46</font><font style="color:rgb(51, 51, 51);">字节即为我们所需的</font><font style="color:rgb(51, 51, 51);">model number</font><font style="color:rgb(51, 51, 51);">。经过一定的字节序转换后大功告成。</font></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a><font style="color:rgb(51, 51, 51);">实现代码</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> WORD IDE_ATAPI_IDENTIFY = <span class="hljs-number">0xA1</span>;   <span class="hljs-comment">// 读取ATAPI设备的命令</span><br><span class="hljs-type">const</span> WORD IDE_ATA_IDENTIFY   = <span class="hljs-number">0xEC</span>;   <span class="hljs-comment">// 读取ATA设备的命令</span><br> <br><span class="hljs-function">DWORD <span class="hljs-title">GetDiskModelNumber</span><span class="hljs-params">(DWORD driver, CHAR *modelNumber)</span></span><br><span class="hljs-function"></span>&#123;<br>    CHAR sFilePath[DISK_PATH_LEN];<br>    BOOL result;                 <span class="hljs-comment">// results flag</span><br>    DWORD readed;                   <span class="hljs-comment">// discard results</span><br>    HANDLE hDevice;<br>    WORD i;<br>   <br>    <span class="hljs-built_in">sprintf</span>(sFilePath, <span class="hljs-string">&quot;\\\\.\\PHYSICALDRIVE%d&quot;</span>, driver);<br>    <br>    hDevice = <span class="hljs-built_in">CreateFile</span>(<br>                    sFilePath, <span class="hljs-comment">// drive to open</span><br>                    GENERIC_READ | GENERIC_WRITE,     <span class="hljs-comment">// access to the drive</span><br>                    FILE_SHARE_READ | FILE_SHARE_WRITE, <span class="hljs-comment">//share mode</span><br>                    <span class="hljs-literal">NULL</span>,             <span class="hljs-comment">// default security attributes</span><br>                    OPEN_EXISTING,    <span class="hljs-comment">// disposition</span><br>                    <span class="hljs-number">0</span>,                <span class="hljs-comment">// file attributes</span><br>                    <span class="hljs-literal">NULL</span>            <span class="hljs-comment">// do not copy file attribute</span><br>                    );<br>    <span class="hljs-keyword">if</span> (hDevice == INVALID_HANDLE_VALUE)<br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;CreateFile() Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    GETVERSIONINPARAMS gvopVersionParams;<br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                    hDevice,<br>                                   SMART_GET_VERSION,<br>                                   <span class="hljs-literal">NULL</span>,<br>                                   <span class="hljs-number">0</span>,<br>                                   &amp;gvopVersionParams,<br>                                   <span class="hljs-built_in">sizeof</span>(gvopVersionParams),<br>                                   &amp;readed,<br>                                   <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!result)        <span class="hljs-comment">//fail</span><br>    &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;SMART_GET_VERSION Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">0</span> == gvopVersionParams.bIDEDeviceMap)<br>    &#123;<br>        <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// IDE or ATAPI IDENTIFY cmd</span><br>    BYTE btIDCmd;<br>    SENDCMDINPARAMS inParams;<br>    BYTE nDrive =<span class="hljs-number">0</span>;<br>    btIDCmd = (gvopVersionParams.bIDEDeviceMap &gt;&gt; nDrive &amp; <span class="hljs-number">0x10</span>) ? IDE_ATAPI_IDENTIFY : IDE_ATA_IDENTIFY;<br> <br>    <span class="hljs-comment">// output structure</span><br>    BYTE outParams[<span class="hljs-built_in">sizeof</span>(SENDCMDOUTPARAMS) + IDENTIFY_BUFFER_SIZE - <span class="hljs-number">1</span>];   <span class="hljs-comment">// + 512 - 1</span><br> <br>    <span class="hljs-comment">//fill in the input buffer</span><br>    inParams.cBufferSize = <span class="hljs-number">0</span>;           <span class="hljs-comment">//or IDENTIFY_BUFFER_SIZE ?</span><br>    inParams.irDriveRegs.bFeaturesReg = READ_ATTRIBUTES;<br>    inParams.irDriveRegs.bSectorCountReg = <span class="hljs-number">1</span>;<br>    inParams.irDriveRegs.bSectorNumberReg = <span class="hljs-number">1</span>;<br>    inParams.irDriveRegs.bCylLowReg = <span class="hljs-number">0</span>;<br>    inParams.irDriveRegs.bCylHighReg = <span class="hljs-number">0</span>;<br> <br>    inParams.irDriveRegs.bDriveHeadReg = (nDrive &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">0xB0</span> : <span class="hljs-number">0xA0</span>;<br>    inParams.irDriveRegs.bCommandReg = btIDCmd;<br>    <span class="hljs-comment">//inParams.bDriveNumber = nDrive;</span><br> <br>    <span class="hljs-comment">//get the attributes</span><br>    result = <span class="hljs-built_in">DeviceIoControl</span>(<br>                    hDevice,<br>                    SMART_RCV_DRIVE_DATA,<br>                    &amp;inParams,<br>                    <span class="hljs-built_in">sizeof</span>(SENDCMDINPARAMS) - <span class="hljs-number">1</span>,<br>                    outParams,<br>                    <span class="hljs-built_in">sizeof</span>(SENDCMDOUTPARAMS) + IDENTIFY_BUFFER_SIZE - <span class="hljs-number">1</span>,<br>                    &amp;readed,<br>                    <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!result)        <span class="hljs-comment">//fail</span><br>    &#123;<br>       <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;SMART_RCV_DRIVE_DATA Error: %ld\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>       (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br>       <span class="hljs-keyword">return</span> (DWORD)<span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    (<span class="hljs-type">void</span>)<span class="hljs-built_in">CloseHandle</span>(hDevice);<br> <br>    DWORD dwDiskData[IDENTIFY_BUFFER_SIZE / <span class="hljs-number">2</span>];<br>    WORD *pIDSector; <span class="hljs-comment">// 对应结构IDSECTOR，见头文件</span><br>    pIDSector = (WORD *)(((SENDCMDOUTPARAMS*)outParams)-&gt;bBuffer);      <span class="hljs-comment">//lint !e826</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; IDENTIFY_BUFFER_SIZE / <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        dwDiskData[i] = pIDSector[i];       <span class="hljs-comment">//lint !e662 !e661</span><br>    &#125;<br> <br>    <span class="hljs-comment">// get model number</span><br>    <span class="hljs-built_in">memset</span>(modelNumber, <span class="hljs-number">0</span>, DISK_INFO_BUF_LEN);<br>    <span class="hljs-built_in">strcpy</span>(modelNumber, <span class="hljs-built_in">ConvertSENDCMDOUTPARAMSBufferToString</span>(dwDiskData, <span class="hljs-number">27</span>, <span class="hljs-number">46</span>));<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a><font style="color:rgb(51, 51, 51);">代码分析</font></h3><ol><li><font style="color:rgb(51, 51, 51);">老套路，通过CreateFile()打开设备。</font></li><li><font style="color:rgb(51, 51, 51);">调用控制码为</font><strong><font style="color:rgb(51, 51, 51);">SMART_GET_VERSION</font></strong><font style="color:rgb(51, 51, 51);">的</font><font style="color:#DF2A3F;">DeviceIoControl()</font><font style="color:rgb(51, 51, 51);">函数获得输出结构GETVERSIONINPARAMS gvopVersionParams。</font></li><li><font style="color:rgb(51, 51, 51);">通过检测gvopVersionParams.bIDEDeviceMap来确定设备类型，并记录在btIDCmd中。</font></li><li><font style="color:rgb(51, 51, 51);">填充</font><strong><font style="color:rgb(51, 51, 51);">SENDCMDINPARAMS</font></strong><font style="color:rgb(51, 51, 51);"> inParams参数，注意将第3步得到的btIDCmd赋值给inParams.irDriveRegs.bCommandReg。</font></li><li><font style="color:rgb(51, 51, 51);">调用控制码为</font><strong><font style="color:rgb(51, 51, 51);">SMART_RCV_DRIVE_DATA</font></strong><font style="color:rgb(51, 51, 51);">的</font><font style="color:#DF2A3F;">DeviceIoControl()</font><font style="color:rgb(51, 51, 51);">函数，其输入参数为第4步准备好的inParams，得到输出参数outParams。</font></li><li><font style="color:rgb(51, 51, 51);">解析outParams-&gt;bBuffer的27~46字节，得到所需的model number。</font></li></ol><p><font style="color:rgb(51, 51, 51);"> </font></p><p><font style="color:rgb(51, 51, 51);">解析outParams-&gt;bBuffer时，因为ATA&#x2F;ATAPI中的WORD与Windows采用的</font><font style="color:#DF2A3F;">字节顺序相反</font><font style="color:rgb(51, 51, 51);">，所以需要</font></p><h3 id="将字符串中的字符两两颠倒"><a href="#将字符串中的字符两两颠倒" class="headerlink" title="将字符串中的字符两两颠倒"></a><font style="color:rgb(51, 51, 51);">将字符串中的字符两两颠倒</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CHAR *<span class="hljs-title">ConvertSENDCMDOUTPARAMSBufferToString</span><span class="hljs-params">(<span class="hljs-type">const</span> DWORD *dwDiskData, DWORD nFirstIndex, DWORD nLastIndex)</span></span><br><span class="hljs-function"></span>&#123;<br>       <span class="hljs-type">static</span> CHAR szResBuf[IDENTIFY_BUFFER_SIZE];     <span class="hljs-comment">//512</span><br>       DWORD nIndex = <span class="hljs-number">0</span>;<br>       DWORD nPosition = <span class="hljs-number">0</span>;<br> <br>       <span class="hljs-keyword">for</span> (nIndex = nFirstIndex; nIndex &lt;= nLastIndex; nIndex++)<br>       &#123;<br>        <span class="hljs-comment">// get high byte</span><br>              szResBuf[nPosition] = (CHAR)(dwDiskData[nIndex] &gt;&gt; <span class="hljs-number">8</span>);<br>              nPosition++;<br> <br>              <span class="hljs-comment">// get low byte</span><br>              szResBuf[nPosition] = (CHAR)(dwDiskData[nIndex] &amp; <span class="hljs-number">0xff</span>);<br>              nPosition++;<br>       &#125;<br> <br>       <span class="hljs-comment">// End the string</span><br>       szResBuf[nPosition] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br> <br>       <span class="hljs-keyword">return</span> szResBuf;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows下使用PDH获取CPU使用率</title>
    <link href="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/"/>
    <url>/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p><font style="color:rgb(79, 79, 79);">转自：</font><a href="about:blank">https://blog.csdn.net/fengyishang/article/details/46440135</a></p></blockquote><p>windows下获取cpu 使用率的方法大概有以下这三种:</p><ol><li>windows 自带的API ，一般包含在头文件windows.h中</li><li>Performance Data Helper （PDH），性能数据助手</li><li>Windows Management Instrumentation（WMI），windows管理规范</li></ol><p>其他两种方法网上都有相应的例子，读者感兴趣可以自行查阅，这里介绍一下使用pdh库来获取系统性能数据（以cpu使用率为例）的方法。</p><p>根据pdh使用的<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa373214%28v=vs.85%29.aspx">官方文档</a>，使用pdh 库获取性能数据需要执行以下几个步骤：</p><ol><li>创建查询（Create a query）</li><li>添加查询到计数器（Add counters to the query）</li><li>收集性能数据（Collect the performance data）</li><li>显示性能数据（Display the performance data）</li><li>关闭查询（Close the query）</li></ol><h2 id="创建查询"><a href="#创建查询" class="headerlink" title="创建查询"></a><font style="color:rgb(79, 79, 79);">创建查询</font></h2><p>在使用pdh 库之前，我们需要包含相应的头文件和加载相应的库：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Pdh.h&gt;</span></span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;pdh.lib&quot;</span>)</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">创建查询使用函数是PdhOpenQuery，我们看一下官方文档对于这个函数的</font><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa372652%28v=vs.85%29.aspx"><font style="color:rgb(78, 161, 219);">定义</font></a><font style="color:rgb(79, 79, 79);">。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">PDH_STATUS <span class="hljs-title">PdhOpenQuery</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_  LPCTSTR    szDataSource,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_  DWORD_PTR  dwUserData,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PDH_HQUERY *phQuery</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>szDataSource </code><br>该参数用来指定日志文件的名字以获取性能数据，一般设置成NULL，表示实时获取数据。</li><li><code>dwUserData </code><br>和查询相关的值，不特别指定一般也是NULL。</li><li><code>phQuery </code><br>用于查询的句柄，这个稍后会用到。</li></ul><p><font style="color:rgb(79, 79, 79);">好了，接下来就开始查询：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HQUERY query;<br>PDH_STATUS status = <span class="hljs-built_in">PdhOpenQuery</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;query);<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">需要注意的是，如果执行成功，则PdhOpenQuery返回</font><strong><font style="color:rgb(79, 79, 79);">ERROR_SUCCESS</font></strong><font style="color:rgb(79, 79, 79);">，我们可以写个判读语句判读是否执行成功。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (status != ERROR_SUCCESS)<br>    cout &lt;&lt; <span class="hljs-string">&quot;Open Query Error&quot;</span> &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="添加查询到计数器"><a href="#添加查询到计数器" class="headerlink" title="添加查询到计数器"></a><font style="color:rgb(79, 79, 79);">添加查询到计数器</font></h2><p><font style="color:rgb(79, 79, 79);">查看文档，对应的函数为 PdhAddCounter，先看一下函数原型。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">PDH_STATUS <span class="hljs-title">PdhAddCounter</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_  PDH_HQUERY   hQuery,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_  LPCTSTR      szFullCounterPath,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_  DWORD_PTR    dwUserData,</span></span><br><span class="hljs-params"><span class="hljs-function">  _Out_ PDH_HCOUNTER *phCounter</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">使用该函数我们可以添加query到计数器中，注意第二个参数，这表示还需要一个完整的</font><strong><font style="color:rgb(79, 79, 79);">计数器路径</font></strong><font style="color:rgb(79, 79, 79);">（szFullCounterPath），这个计数器路径怎么写，文档中也给出了几种方法，我们这里介绍</font><strong><font style="color:rgb(79, 79, 79);">字符串方法</font></strong><font style="color:rgb(79, 79, 79);">。</font></p><p><font style="color:rgb(79, 79, 79);">这种方法直接指定计数器路径为一个字符串，如果总是监视同一个计数器，并且你对计数器路径的的格式和语法比较熟悉，那用这个方法比较合适。</font></p><p><font style="color:rgb(79, 79, 79);">计数器路径的格式如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">\\Computer\PerfObject(ParentInstance/ObjectInstance#InstanceIndex)\Counter<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">看了一头雾水是不是？参照官方文档我们一点一点解释。</font></p><ul><li><code>Computer</code><br>这个指目标机器的名字或者ip地址，如果是获取本机数据，则可以省略。</li><li><code>PerfObject</code><br>这个指的是要查询的性能对象，这个性能对象可以是硬件（比如处理器，磁盘，内存），也可以是系统对象（比如进程，线程）</li><li><code>ParentInstance/ObjectInstance#InstanceIndex</code> <font style="color:rgb(79, 79, 79);"><br></font><font style="color:rgb(79, 79, 79);">如果查询的对象存在多实例，路径中就包含这三者。<br></font><font style="color:rgb(79, 79, 79);">举个例子，进程和线程就是多实例对象，因为同一时间能运行多个进程或线程。<br></font><font style="color:rgb(79, 79, 79);">那么如果一个对象有多实例，计数器路径就必须指定到某一个对象实例。</font></li></ul><p><font style="color:rgb(79, 79, 79);">说的再详细点，假设我们要监控Explorer，那格式就是：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">(Explorer)<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">如果要监控该进程下的某个子线程，那格式就是：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">(Explorer/0)<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">如果该进程下的子线程名字都一样，则通过#符号来区分开，需要注意的是，子线程的索引从0开始，但是查询第一个子线程不要写#0，直接写线程名字，从第二个子线程开始才是#1，那么第三个子线程就是#2，以此类推。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">(Explorer/0#1)<br></code></pre></td></tr></table></figure><ul><li><code>Counter</code> <font style="color:#8A8F8D;"><br></font>最后就是这个Counter，这就是你想要查询的计数器。</li></ul><p><font style="color:rgb(79, 79, 79);">最终这个格式是什么样子的呢，我们这里要查询的是CPU 的使用率，那就得知道某一刻CPU总的使用时间，格式如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">\Processor Information(_Total)\% Processor Time<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">注意% 和Processor 之间有个空格，对于反斜杠’\’，我们要写两次用来转义，实际代码如下。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HCOUNTER counter;<br><br>status = <span class="hljs-built_in">PdhAddCounter</span>(query, <span class="hljs-built_in">LPCSTR</span>(<span class="hljs-string">&quot;\\Processor Information(_Total)\\% Processor Time&quot;</span>), <span class="hljs-literal">NULL</span>, &amp;counter);<br><br><span class="hljs-keyword">if</span> (status != ERROR_SUCCESS)<br>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">那对于cpu使用率是这种格式，那其他性能计数器是什么格式呢？凭空捏造可造不出来！</font></p><p><font style="color:rgb(79, 79, 79);">其实，对于windows系统，我们打开</font><strong><font style="color:rgb(79, 79, 79);">性能监视器</font></strong><font style="color:rgb(79, 79, 79);">就可以看到，运行窗口输入”perfmon.msc”，如图：</font></p><p><img src="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/image-0.jpeg"></p><p><font style="color:rgb(79, 79, 79);">点击</font><strong><font style="color:rgb(79, 79, 79);">确定</font></strong><font style="color:rgb(79, 79, 79);">就可以看到本机系统的</font><strong><font style="color:rgb(79, 79, 79);">性能监视器</font></strong><font style="color:rgb(79, 79, 79);">：</font></p><p><img src="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/image-1.jpeg"></p><p><font style="color:rgb(79, 79, 79);">在性能监视器页面，当前显示的是”% Processor Time”,也就是cpu的使用时间，那假如要看内存应该怎么操作？</font></p><p><font style="color:rgb(79, 79, 79);">首先，图表页面右击，选择</font><strong><font style="color:rgb(79, 79, 79);">添加计数器</font></strong></p><p><img src="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/image-2.jpeg"></p><p><font style="color:rgb(79, 79, 79);">然后显示如图页面，从下面的列表中找到</font><strong><font style="color:rgb(79, 79, 79);">Memory</font></strong><font style="color:rgb(79, 79, 79);">，然后选择</font><strong><font style="color:rgb(79, 79, 79);">Available MBytes</font></strong><font style="color:rgb(79, 79, 79);">，这表示可用内存（单位：MB），然后点击添加，这样我们就添加了</font><strong><font style="color:rgb(79, 79, 79);">可用内存</font></strong><font style="color:rgb(79, 79, 79);">的计数器。</font></p><p><img src="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/image-3.jpeg"></p><p><font style="color:rgb(79, 79, 79);">然后，刚才的监视器页面就多了一条计数器，看到没？</font></p><p><img src="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/image-4.jpeg"></p><p><font style="color:rgb(79, 79, 79);">但这还只是图形化的计数器，我们要的是具体的计数器路径呀？<br></font><font style="color:rgb(79, 79, 79);">别急，在对应的”Available MBytes”上右击—&gt;属性，就能看到对应的计数器路径了，怎么样，是不是很方便？</font></p><p><img src="/2024/03/05/Win32_Api/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8PDH%E8%8E%B7%E5%8F%96CPU%E4%BD%BF%E7%94%A8%E7%8E%87/image-5.jpeg"></p><p><font style="color:rgb(79, 79, 79);">知道对应的计数器路径，我们在代码中就可以使用了。</font></p><h2 id="收集性能数据"><a href="#收集性能数据" class="headerlink" title="收集性能数据"></a><font style="color:rgb(79, 79, 79);">收集性能数据</font></h2><p><font style="color:rgb(79, 79, 79);">将query 添加到计数器之后，我们就要开始收集性能数据了，相应函数：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">PDH_STATUS <span class="hljs-title">PdhCollectQueryData</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _Inout_ PDH_HQUERY hQuery</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">需要注意的是，大部分像使用率这样的计数器，需要收集两份样本，中间用Sleep()函数间隔1s 或者更久。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">PdhCollectQueryData</span>(query);<br><br><span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br><br><span class="hljs-built_in">PdhCollectQueryData</span>(query);<br></code></pre></td></tr></table></figure><h2 id="显示性能数据"><a href="#显示性能数据" class="headerlink" title="显示性能数据"></a><font style="color:rgb(79, 79, 79);">显示性能数据</font></h2><p><font style="color:rgb(79, 79, 79);">收集完数据之后，就要将数据显示出来了，函数如下：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">PDH_STATUS <span class="hljs-title">PdhGetFormattedCounterValue</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_  PDH_HCOUNTER          hCounter,</span></span><br><span class="hljs-params"><span class="hljs-function">  _In_  DWORD                 dwFormat,</span></span><br><span class="hljs-params"><span class="hljs-function">  _Out_ LPDWORD               lpdwType,</span></span><br><span class="hljs-params"><span class="hljs-function">  _Out_ PPDH_FMT_COUNTERVALUE pValue</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">各个参数可以查阅官方文档，我们这里获取CPU的使用率。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">PDH_FMT_COUNTERVALUE pdhValue;<br>DWORD dwValue;<br><br>status = <span class="hljs-built_in">PdhGetFormattedCounterValue</span>(counter, PDH_FMT_DOUBLE | PDH_FMT_NOCAP100, &amp;dwValue, &amp;pdhValue);<br><br><span class="hljs-keyword">if</span> (status != ERROR_SUCCESS)<br>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">对于第二个参数，一般情况下我们使用PDH_FMT_DOUBLE，但是对于计数对象是处理器，我们还需要考虑要不要</font><strong><font style="color:rgb(79, 79, 79);">PDH_FMT_NOCAP100</font></strong><font style="color:rgb(79, 79, 79);">。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">如果设置本标记，则计数器的百分比数值的上限可以大于100，例如：多个处理器的使用率。<br><br>如果不设置本标记，则计数器的百分比数值的上限为100。<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">现在，我们可以获取cpu 的使用率了。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; pdhValue.doubleValue &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="关闭查询"><a href="#关闭查询" class="headerlink" title="关闭查询"></a><font style="color:rgb(79, 79, 79);">关闭查询</font></h2><p><font style="color:rgb(79, 79, 79);">既然打开了查询，那最后就要关闭查询。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">PdhCloseQuery</span>(query);<br></code></pre></td></tr></table></figure><p><font style="color:rgb(79, 79, 79);">最后照例，放上程序源码（windows8.1 + visual studio2013）。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib,<span class="hljs-string">&quot;pdh.lib&quot;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Pdh.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;PdhMsg.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    HQUERY query;<br>    PDH_STATUS status = <span class="hljs-built_in">PdhOpenQuery</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, &amp;query);<br><br>    <span class="hljs-keyword">if</span> (status != ERROR_SUCCESS)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Open Query Error&quot;</span> &lt;&lt; endl;<br><br>    HCOUNTER counter;<br>    status = <span class="hljs-built_in">PdhAddCounter</span>(query, <span class="hljs-built_in">LPCSTR</span>(<span class="hljs-string">&quot;\\Processor Information(_Total)\\% Processor Time&quot;</span>), <span class="hljs-literal">NULL</span>, &amp;counter);<br><br>    <span class="hljs-keyword">if</span> (status != ERROR_SUCCESS)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Add Counter Error&quot;</span> &lt;&lt; endl;<br><br>    <span class="hljs-built_in">PdhCollectQueryData</span>(query);<br><br>    <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">1000</span>);<br><br>    <span class="hljs-built_in">PdhCollectQueryData</span>(query);<br><br>    PDH_FMT_COUNTERVALUE pdhValue;<br>    DWORD dwValue;<br><br>    status = <span class="hljs-built_in">PdhGetFormattedCounterValue</span>(counter, PDH_FMT_DOUBLE, &amp;dwValue, &amp;pdhValue);<br><br>    <span class="hljs-keyword">if</span> (status != ERROR_SUCCESS)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Get Value Error&quot;</span> &lt;&lt; endl;<br><br>    cout &lt;&lt; pdhValue.doubleValue &lt;&lt; endl;<br><br>    <span class="hljs-built_in">PdhCloseQuery</span>(query);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FlushFileBuffers&#92;FILE_FLAG_WRITE_THROUGH&#92;FILE_FLAG_NO_BUFFERING</title>
    <link href="/2024/03/05/Win32_Api/FlushFileBuffers_FILE_FLAG_WRITE_THROUGH_FILE_FLAG_NO_BUFFERING/"/>
    <url>/2024/03/05/Win32_Api/FlushFileBuffers_FILE_FLAG_WRITE_THROUGH_FILE_FLAG_NO_BUFFERING/</url>
    
    <content type="html"><![CDATA[<p><font style="color:rgb(82, 89, 96);"></font></p><p><font style="color:rgb(82, 89, 96);">由于系统内的磁盘高速缓存交互，</font>FlushFileBuffers<font style="color:rgb(82, 89, 96);">当单独执行许多写入时，在每次写入磁盘驱动器设备后使用该功能可能效率低下。如果应用程序正在对磁盘执行多次写入，并且还需要确保将关键数据写入持久媒体，则应用程序应使用无缓冲 I&#x2F;O 而不是频繁调用</font>FlushFileBuffers<font style="color:rgb(82, 89, 96);">.</font></p><p><font style="color:rgb(82, 89, 96);"></font></p><p><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_WRITE_THROUGH</font></strong><font style="color:rgb(44, 63, 81);"> 标记位和 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_NO_BUFFERING</font></strong><font style="color:rgb(44, 63, 81);"> 标记位是独立的，可以进行组合。</font><font style="color:rgb(82, 89, 96);"><br></font><font style="color:rgb(44, 63, 81);">如果指定了 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_WRITE_THROUGH</font></strong><font style="color:rgb(44, 63, 81);"> 标记位，但是没有指定 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_NO_BUFFERING</font></strong><font style="color:rgb(44, 63, 81);"> 标记位，此时系统缓存机制仍在运行：数据被写到系统缓存区，但是马上被写回磁盘。</font><font style="color:rgb(82, 89, 96);"><br></font><font style="color:rgb(44, 63, 81);">如果 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_WRITE_THROUGH</font></strong><font style="color:rgb(44, 63, 81);"> 标记位和 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_NO_BUFFERING</font></strong><font style="color:rgb(44, 63, 81);"> 标记位都被指定了，则系统缓冲区不会起作用，数据不经过 Windows 系统缓存区而是直接写入磁盘。系统会申请直接写入到本地磁盘的缓存中。</font><font style="color:rgb(82, 89, 96);"><br></font><font style="color:rgb(44, 63, 81);">如果 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_WRITE_THROUGH</font></strong><font style="color:rgb(44, 63, 81);"> 标记位和 </font><strong><font style="color:rgb(44, 63, 81);">FILE_FLAG_NO_BUFFERING</font></strong><font style="color:rgb(44, 63, 81);"> 标记位都被指定了，则系统缓存机制停止工作，数据不经过Windows系统缓存去，而是被直接写到磁盘上。系统会申请直接写入到本地磁盘的缓存中。</font><font style="color:rgb(82, 89, 96);"><br></font><font style="color:rgb(44, 63, 81);">注意：并非所有磁盘硬件都支持直接写入的方法。</font></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ShellExecute启动外部程序</title>
    <link href="/2024/02/28/Win32_Api/ShellExecute%E5%90%AF%E5%8A%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/"/>
    <url>/2024/02/28/Win32_Api/ShellExecute%E5%90%AF%E5%8A%A8%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="ShellExecute-函数-（shellapi-h）"><a href="#ShellExecute-函数-（shellapi-h）" class="headerlink" title="ShellExecute 函数 （shellapi.h）"></a><font style="color:rgb(22, 22, 22);">ShellExecute 函数 （shellapi.h）</font></h1><p><font style="color:rgb(36, 41, 46);">ShellExecute的功能是运行一个外部程序（或者是打开一个已注册的文件、打开一个目录、打印一个文件等等。也可以打开URL），并对外部程序有一定的控制。</font></p><h2 id="基本简介"><a href="#基本简介" class="headerlink" title="基本简介"></a><font style="color:rgb(24, 24, 24) !important;">基本简介</font></h2><p><font style="color:rgb(36, 41, 46);">有几个API函数都可以实现这些功能，但是在大多数情况下ShellExecute是更多的被使用的，同时它并不是太复杂。</font></p><h2 id="原型参数"><a href="#原型参数" class="headerlink" title="原型参数"></a><font style="color:rgb(24, 24, 24) !important;">原型参数</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">HINSTANCE <span class="hljs-title">ShellExecute</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  HWND    hwnd,         <span class="hljs-comment">// 父窗口句柄（可为 NULL）</span></span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpOperation,  <span class="hljs-comment">// 操作类型（如 &quot;open&quot;, &quot;edit&quot;, &quot;print&quot;）</span></span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpFile,       <span class="hljs-comment">// 指定要打开的文件或程序路径或 URL</span></span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpParameters, <span class="hljs-comment">// 命令行参数（可为 NULL）</span></span></span><br><span class="hljs-params"><span class="hljs-function">  LPCTSTR lpDirectory,  <span class="hljs-comment">// 默认工作目录（可为 NULL）</span></span></span><br><span class="hljs-params"><span class="hljs-function">  INT     nShowCmd      <span class="hljs-comment">// 窗口显示方式（如 SW_SHOW）</span></span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p>常用操作类型 (<code>lpOperation</code>)</p><table><thead><tr><th><strong>操作类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>&quot;open&quot;</code></td><td>用默认程序打开文件&#x2F;文件夹&#x2F;URL</td></tr><tr><td><code>&quot;edit&quot;</code></td><td>用关联编辑器打开文件</td></tr><tr><td><code>&quot;print&quot;</code></td><td>打印文件</td></tr><tr><td><code>&quot;explore&quot;</code></td><td>浏览文件夹</td></tr><tr><td><code>&quot;runas&quot;</code></td><td>以管理员权限运行程序</td></tr></tbody></table><p><code>INT     nShowCmd</code></p><p><font style="color:rgb(0, 0, 0);">用于指定程序窗口初始显示方式。 </font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">#define SW_HIDE             0     /*隐藏窗体，并激活另一个窗体*/<br>#define SW_SHOWNORMAL       1     /*与SW_RESTORE相同*/<br>#define SW_SHOWMINIMIZED    2     /*激活并以最小化的形式显示窗体*/<br>#define SW_SHOWMAXIMIZED    3     /*激活并以最大化的形式显示窗体*/<br>#define SW_MAXIMIZE         3     /*最大化指定的窗体*/<br>#define SW_SHOWNOACTIVATE   4     /*以上次的状态显示指定的窗体，但不激活它*/<br>#define SW_SHOW             5     /*激活窗体，并将其显示在当前的大小和位置上*/<br>#define SW_MINIMIZE         6     /*最小化指定的窗体，并激活另一个窗体*/<br>#define SW_SHOWMINNOACTIVE  7     /*以最小化形式显示指定的窗体，但不激活它*/<br>#define SW_SHOWNA           8     /*以当前的状态显示指定的窗体，但不激活它*/<br>#define SW_RESTORE          9     /*以原本的大小和位置，激活并显示指定的窗体*/<br>#define SW_SHOWDEFAULT      10    /*设置显示的状态由STARTUPINFO结构体指定*/<br></code></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><font style="color:rgb(24, 24, 24) !important;">返回值</font></h2><p><font style="color:rgb(36, 41, 46);">执行成功会返回</font><font style="color:rgb(36, 41, 46);"> </font><a href="http://baike.baidu.com/view/330120.htm">应用程序</a><font style="color:rgb(36, 41, 46);">句柄</font></p><p><font style="color:rgb(36, 41, 46);">返回的HINSTANCE可以将它转换为一个整数(%d)，并比较它的值大于还是小于32或比较它的错误代码</font></p><p><font style="color:rgb(36, 41, 46);">返回值大于32表示执行成功</font></p><p><font style="color:rgb(36, 41, 46);">返回值小于32表示执行错误</font></p><p><font style="color:rgb(36, 41, 46);">返回值可能的错误有: </font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">= 0 &#123; 内存不足&#125;<br>ERROR_FILE_NOT_FOUND = 2; &#123;文件名错误&#125;<br>ERROR_PATH_NOT_FOUND = 3; &#123;路径名错误&#125;<br>ERROR_BAD_FORMAT = 11; &#123;EXE 文件无效&#125;<br>SE_ERR_SHARE = 26; &#123;发生共享错误&#125;<br>SE_ERR_ASSOCINCOMPLETE = 27; &#123;文件名不完全或无效&#125;<br>SE_ERR_DDETIMEOUT = 28; &#123;超时&#125;<br>SE_ERR_DDEFAIL = 29; &#123;DDE 事务失败&#125;<br>SE_ERR_DDEBUSY = 30; &#123;正在处理其他 DDE 事务而不能完成该 DDE 事务&#125;<br>SE_ERR_NOASSOC = 31; &#123;没有相关联的 应用程序&#125;<br></code></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a><font style="color:rgb(24, 24, 24) !important;">例子</font></h2><p><font style="color:rgb(0, 0, 0);">打开计算器： </font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd, <span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;calc.exe&quot;</span>,<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>,SW_SHOWMAXIMIZED );<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">打开一个指定的程序：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd, <span class="hljs-string">&quot;open&quot;</span>,<span class="hljs-string">&quot;D:\\Program Files (x86)\\Notepad++\\notepad++.exe&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,SW_SHOWMAXIMIZED );  <br><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd, <span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;notepad++.exe&quot;</span>,<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;D:\\Program Files (x86)\\Notepad++&quot;</span>,SW_SHOWMAXIMIZED ); <br><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd,<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;notepad++.exe&quot;</span>,<span class="hljs-literal">NULL</span>, <span class="hljs-string">&quot;D:\\Program Files (x86)\\Notepad++\\&quot;</span>,SW_SHOWMAXIMIZED );<br><span class="hljs-comment">//三个语句其结果都是一样</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">打开一个指定的文件:</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd,<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;F:\\C\\MFC\\MFC.pdf&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,SW_SHOWMAXIMIZED );  <br><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd,<span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;MFC.pdf&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot;F:\\C\\MFC\\&quot;</span>,SW_SHOWMAXIMIZED );<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">打开一个指定的文件夹：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd, <span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;F:\\C\\MFC&quot;</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,SW_SHOWMAXIMIZED );  <br><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd, <span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot;F:\\C\\MFC&quot;</span>,SW_SHOWMAXIMIZED );  <br><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd,<span class="hljs-string">&quot;explore&quot;</span>, <span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot;F:\\C\\MFC&quot;</span>,SW_SHOWMAXIMIZED );<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">打开URL：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ShellExecute</span>(<span class="hljs-keyword">this</span>-&gt;m_hWnd, <span class="hljs-string">&quot;open&quot;</span>, <span class="hljs-string">&quot;http://tmxk.org/2012/&quot;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>,SW_SHOWMAXIMIZED );<br></code></pre></td></tr></table></figure><p>hWnd<font style="color:rgb(0, 0, 0);">可以设为NULL。</font></p><h2 id="特殊用法"><a href="#特殊用法" class="headerlink" title="特殊用法"></a><font style="color:rgb(24, 24, 24) !important;">特殊用法</font></h2><ul><li><font style="color:rgb(36, 41, 46);">如果将FileName参数设置为“http:”协议格式，那么该函数将打开默认 </font><a href="http://baike.baidu.com/view/7718.htm">浏览器</a><font style="color:rgb(36, 41, 46);">并链接到指定的URL地址。若用户机器中安装了多个 </font><a href="http://baike.baidu.com/view/7718.htm">浏览器</a><font style="color:rgb(36, 41, 46);">，则该函数将根据Windows 9x&#x2F;NT注册表中http协议处理程序（Protocols Handler）的设置确定启动哪个浏览器。</font></li></ul><p><strong><font style="color:rgb(36, 41, 46);">格式一：http:&#x2F;&#x2F;网站域名</font></strong></p><p><font style="color:rgb(36, 41, 46);">如：ShellExecute(Handle, “open”, “http:&#x2F;&#x2F; ;</font></p><p><font style="color:rgb(36, 41, 46);"><a href="http://www.neu.edu.cn/">www.neu.edu.cn</a>“, NULL, NULL, SW_SHOWNORMAL);</font></p><p><strong><font style="color:rgb(36, 41, 46);">格式二：http:&#x2F;&#x2F;网站域名&#x2F;网页文件名</font></strong></p><p><font style="color:rgb(36, 41, 46);">如：ShellExecute(Handle, “open”,” http:&#x2F;&#x2F; ;</font></p><p><font style="color:rgb(36, 41, 46);"><a href="http://www.neu.edu.cn/default.htm%22,NULL,NULL">www.neu.edu.cn/default.htm&quot;,NULL,NULL</a>,</font></p><p><font style="color:rgb(36, 41, 46);">SW_SHOWNORMAL);</font></p><p><font style="color:rgb(36, 41, 46);"></font></p><ul><li><font style="color:rgb(36, 41, 46);">如果将FileName参数设置为“mailto:”协议格式，那么该函数将启动默认邮件客户程序，如Microsoft Outlook（也包括Microsoft Outlook Express）或Netscape Messanger。若用户机器中安装了多个邮件客户程序，则该函数将根据Windows 9x&#x2F;NT注册表中mailto协议处理程序的设置确定启动哪个邮件客户程序。</font></li></ul><p><strong><font style="color:rgb(36, 41, 46);">格式一：mailto</font></strong></p><p><font style="color:rgb(36, 41, 46);">如：ShellExecute(Handle,”open”, “mailto:”, NULL, NULL, SW_SHOWNORMAL);打开新邮件窗口。</font></p><p><strong><font style="color:rgb(36, 41, 46);">格式二：mailto:用户账号@邮件服务器地址</font></strong></p><p><font style="color:rgb(36, 41, 46);">如：ShellExecute(Handle, “open”,” mailto:<a href="mailto:&#119;&#x68;&#x6f;&#x40;&#109;&#x61;&#x69;&#x6c;&#46;&#x6e;&#x65;&#x75;&#46;&#x65;&#100;&#x75;&#x2e;&#99;&#110;">who@mail.neu.edu.cn</a>“, NULL, NULL, SW_SHOWNORMAL);打开新邮件窗口，并自动填入收件人地址。若指定多个收件人地址，则收件人地址之间必须用分号或逗号分隔开（下同）。</font></p><p><strong><font style="color:rgb(36, 41, 46);">格式三：mailto:用户账号@邮件服务器地址</font></strong></p><p><font style="color:rgb(36, 41, 46);">subject&#x3D;邮件主题&amp;body&#x3D;邮件正文</font></p><p><font style="color:rgb(36, 41, 46);">如：ShellExecute(handle, ‘open’, ‘ mailto:<a href="mailto:&#119;&#104;&#x6f;&#64;&#109;&#x61;&#105;&#x6c;&#46;&#110;&#101;&#x75;&#x2e;&#x65;&#x64;&#x75;&#46;&#x63;&#x6e;">who@mail.neu.edu.cn</a>？subject&#x3D;Hello&amp;Body&#x3D;This is a test’,NULL, NULL, SW_SHOWNORMAL);打开新邮件窗口，并自动填入收件人地址、邮件主题和邮件正文。若邮件正文包括多行文本，则必须在每行文本之间加入换行 </font><a href="http://baike.baidu.com/view/73.htm">转义字符</a><font style="color:rgb(36, 41, 46);">%0a。</font></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows操作磁盘API</title>
    <link href="/2024/02/05/Win32_Api/Windows%E6%93%8D%E4%BD%9C%E7%A3%81%E7%9B%98API/"/>
    <url>/2024/02/05/Win32_Api/Windows%E6%93%8D%E4%BD%9C%E7%A3%81%E7%9B%98API/</url>
    
    <content type="html"><![CDATA[<h2 id="磁盘和驱动器管理API"><a href="#磁盘和驱动器管理API" class="headerlink" title="磁盘和驱动器管理API"></a>磁盘和驱动器管理API</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>GetLogicalDrivers</strong></td><td>获取主机中所有的逻辑驱动器,以BitMap的形式返回.</td></tr><tr><td><strong>GetLogicalDriverString</strong></td><td>获取主机中所有的逻辑驱动器,以驱动器根路径字符串返回.</td></tr><tr><td><strong>FindFirstVolume</strong></td><td>查找主机中的第一个驱动器，返回查找句柄.</td></tr><tr><td><strong>FindNextVolume</strong></td><td>根据FindFirstVolume返回句柄,查找主机中后继的逻辑驱动器.</td></tr><tr><td><strong>FindVolumeClose</strong></td><td>关闭驱动器查找句柄.</td></tr><tr><td><strong>GetDriveType</strong></td><td>获取驱动器类型.</td></tr><tr><td><strong>GetVolumeInformation</strong></td><td>获取逻辑驱动器信息.</td></tr><tr><td><strong>FindFirstVolumeMountPoint</strong></td><td>查找指定卷的第一个挂载点,返回查找句柄.</td></tr><tr><td><strong>FindNextVolumeMountPoint</strong></td><td>根据FindFirstVolumeMountPoint返回的句柄,查找卷的后继挂载点.</td></tr><tr><td><strong>FindVolumeMountPointClose</strong></td><td>关闭挂载点查找句柄.</td></tr><tr><td><strong>GetVolumeNameForVolumeMountPoint</strong></td><td>根据指定挂载点获取相应的卷设备名.</td></tr><tr><td><strong>SetVolumeMountPoint</strong></td><td>将指定卷挂载到指定挂载点处.</td></tr><tr><td><strong>GetDiskFreeSpace</strong></td><td>获取磁盘空间信息,包括每簇的扇区数,每扇区的字节数,簇数量,空闲的簇数量.</td></tr><tr><td><strong>GetDiskFreeSpaceEx</strong></td><td>获取用户可用的空闲空间的字节数,磁盘总容量的字节数.</td></tr></tbody></table><h2 id="文件和目录管理API"><a href="#文件和目录管理API" class="headerlink" title="文件和目录管理API"></a>文件和目录管理API</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><strong>DeleteFile</strong></td><td>删除参数所指定文件</td></tr><tr><td><strong>CopyFile</strong></td><td>复制指定文件为一个新文件</td></tr><tr><td><strong>MoveFile</strong></td><td>将指定文件或目录移动到指定位置</td></tr><tr><td><strong>CreateFile</strong></td><td>新建或打开一个文件,获取文件句柄</td></tr><tr><td><strong>ReadFile</strong></td><td>读取由文件句柄指定文件的内容</td></tr><tr><td><strong>WriteFile</strong></td><td>向由文件句柄指定的文件中写入内容</td></tr><tr><td><strong>GetFileSize</strong></td><td>获取文件大小,返回DWORD中;大小超出DWORD最大值时可指定高32位的DWORD联合存储</td></tr><tr><td><strong>GetFileSizeEx</strong></td><td>获取文件大小,存储到一个64位的大整数联合体中.</td></tr><tr><td><strong>CreateDirectory</strong></td><td>创建一个目录</td></tr><tr><td><strong>GetCurrentDirectory</strong></td><td>获取当前程序所在目录</td></tr><tr><td><strong>SetCurrentDirectory</strong></td><td>设置当前程序所在目录</td></tr><tr><td><strong>GetModuleFileName</strong></td><td>获取当前模块全路径</td></tr><tr><td><strong>FindFirstFile</strong></td><td>查找指定目录下第一个文件句柄或目录,获得查找句柄</td></tr><tr><td><strong>FindNextFile</strong></td><td>根据FindFirstFile获得的句柄,循环查找文件或目录</td></tr><tr><td><strong>GetFileAttributes</strong></td><td>获取指定文件目录属性,返回一个DWORD值</td></tr><tr><td><strong>GetFileAttributesEx</strong></td><td>获取文件或目录属性,存储在WIN32_FILE_ATTRIBUTE_DATA结构体中</td></tr><tr><td><strong>SetFileAttributes</strong></td><td>将文件属性设定为指定值</td></tr><tr><td><strong>FileTimeToLocalFileTime</strong></td><td>将文件时间转换为本地时间</td></tr><tr><td><strong>FileTimeToSystemTime</strong></td><td>将文件转换为系统时间,SYSTEMTIME格式便于显示</td></tr></tbody></table><h2 id="高级文件操作"><a href="#高级文件操作" class="headerlink" title="高级文件操作"></a>高级文件操作</h2><table><thead><tr><th>****</th><th></th></tr></thead><tbody><tr><td><strong>CreateFileMapping</strong></td><td>创建文件的映射对象</td></tr><tr><td><strong>MapViewOfFile</strong></td><td>创建视图，将创建的文件映射对象映射到当前进程的地址空间中</td></tr><tr><td><strong>FlushViewOfFile</strong></td><td>将视图中的数据都写入磁盘，对视图的操作都会反映到磁盘上的文件中</td></tr><tr><td><strong>OpenFileMapping</strong></td><td>打开已经存在的命名的文件映射对象</td></tr><tr><td><strong>UnmapViewOfFile</strong></td><td>取消文件映射</td></tr><tr><td><strong>GetMappedFileName</strong></td><td>从映射对象获取被映射文件的文件设备名</td></tr><tr><td><strong>QueryDosDevice</strong></td><td>获取MS-DOS设备名</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ReactOS</title>
    <link href="/2023/11/20/Win32_Api/ReactOS/"/>
    <url>/2023/11/20/Win32_Api/ReactOS/</url>
    
    <content type="html"><![CDATA[<p><font style="color:rgb(18, 18, 18);"></font></p><p><font style="color:rgb(18, 18, 18);">ReactOS 是一个适用于 x86&#x2F;x64 平台的免费、开源的操作系统暨项目，旨在提供 Windows 平台下的程序与驱动的二进制兼容性。借由逆向工程等手段，其以净室设计的方法进行开发。</font></p><p><a href="https://doxygen.reactos.org/dc/d33/dll_2win32_2fmifs_2format_8c.html"><font style="color:rgb(18, 18, 18);">https://doxygen.reactos.org/dc/d33/dll_2win32_2fmifs_2format_8c.html</font></a></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NOTE】遍历Windows_USB设备树</title>
    <link href="/2023/11/20/Win32_Api/%E3%80%90NOTE%E3%80%91%E9%81%8D%E5%8E%86Windows_USB%E8%AE%BE%E5%A4%87%E6%A0%91/"/>
    <url>/2023/11/20/Win32_Api/%E3%80%90NOTE%E3%80%91%E9%81%8D%E5%8E%86Windows_USB%E8%AE%BE%E5%A4%87%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="遍历Windows-USB设备树的几种方法"><a href="#遍历Windows-USB设备树的几种方法" class="headerlink" title="遍历Windows USB设备树的几种方法"></a>遍历Windows USB设备树的几种方法</h1><h2 id="1-设备信息"><a href="#1-设备信息" class="headerlink" title="1. 设备信息"></a><font style="color:rgb(79, 79, 79);">1. 设备信息</font></h2><h3 id="1-1-设备实例ID"><a href="#1-1-设备实例ID" class="headerlink" title="1.1. 设备实例ID"></a><font style="color:rgb(79, 79, 79);">1.1. 设备实例ID</font></h3><ul><li><font style="color:rgb(77, 77, 77);">设备ID<br></font><font style="color:rgb(77, 77, 77);">设备 ID(Device ID) 是一个字符串，由设备的报告枚举器。 设备只有一个设备 id。如USB存储设备ID:</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">USB\VID_23A9&amp;PID_EF18\5&amp;19353383&amp;0&amp;2</font></li><li><font style="color:rgb(77, 77, 77);">实例ID<br></font><font style="color:rgb(77, 77, 77);">实例 ID (Instance ID)是将设备与计算机上相同类型的其他设备进行区分的设备标识字符串。 实例 ID 包含序列号信息（如果基础总线支持）或某些类型的位置信息。</font></li><li><font style="color:rgb(77, 77, 77);">设备实例 ID<br></font><a href="https://so.csdn.net/so/search?q=%E8%AE%BE%E5%A4%87%E6%A0%91&spm=1001.2101.3001.7020">设备树</a><font style="color:rgb(77, 77, 77);">的每个节点都称为一个设备节点中，或devnode。设备实例 ID 是系统提供的设备标识字符串，用于在系统中唯一标识设备。 即插即用（PnP）管理器为系统设备树中的每个设备节点（devnode）分配一个设备实例 ID。<br></font><font style="color:rgb(77, 77, 77);">此字符串的格式由连接到设备 ID的实例 ID组成，如下所示：</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);"><instance-specific-ID></font><font style="color:rgb(77, 77, 77);">设备实例 ID 的字符数（不包括 NULL 终止符）必须小于 MAX_DEVICE_ID_LEN。 此约束适用于设备 ID和实例特定 ID字段之间所有字段的长度与 “” 字段分隔符之和。<br></font><font style="color:rgb(77, 77, 77);">在系统重新启动期间，设备实例 ID 是永久性的。<br></font><font style="color:rgb(77, 77, 77);">下面是连接到 PCI 设备的设备 ID 的实例 ID （“1 &amp; 08”）的示例：</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">PCI\VEN_1000&amp;DEV_0001&amp;SUBSYS_00000000&amp;REV_02\1&amp;08</font></li></ul><h3 id="1-2-设备树"><a href="#1-2-设备树" class="headerlink" title="1.2. 设备树"></a><font style="color:rgb(79, 79, 79);">1.2. 设备树</font></h3><p><img src="/2023/11/20/Win32_Api/%E3%80%90NOTE%E3%80%91%E9%81%8D%E5%8E%86Windows_USB%E8%AE%BE%E5%A4%87%E6%A0%91/image-0.png"></p><h2 id="2-使用CM系列函数枚举所有设备"><a href="#2-使用CM系列函数枚举所有设备" class="headerlink" title="2. 使用CM系列函数枚举所有设备"></a><font style="color:rgb(79, 79, 79);">2. 使用CM系列函数枚举所有设备</font></h2><p><font style="color:rgb(77, 77, 77);">CM 是Configuration Manager的简写。Configuration Manager functions是用来查询Windows系统中接入的设备信息。</font></p><h3 id="2-1-常用的函数"><a href="#2-1-常用的函数" class="headerlink" title="2.1. 常用的函数"></a><font style="color:rgb(79, 79, 79);">2.1. 常用的函数</font></h3><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备实例句柄<br></font><font style="color:rgba(0, 0, 0, 0.75);">pDeviceID如果配置为设备ID，则返回对应设备的设备实例句柄。如果pDeviceID为NULL，则返回根设备的设备实例句柄。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Locate_DevNode</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PDEVINST    pdnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">DEVINSTID_A pDeviceID,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG       ulFlags)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">从注册表中获取设备对应的属性<br></font><font style="color:rgba(0, 0, 0, 0.75);">根据不同的ulProperty获取对应的属性，如设备描述、硬件ID、位置信息、GUID等。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_DevNode_Registry_PropertyW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">DEVINST dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG   ulProperty,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG  pulRegDataType,</span></span><br><span class="hljs-params"><span class="hljs-function">PVOID   Buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">PULONG  pulLength,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG   ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">枚举函数<br></font><font style="color:rgba(0, 0, 0, 0.75);">分别根据现有的设备实例句柄，找到子设备实例句柄、兄弟设备实例句柄、父设备实例句柄。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_Child</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PDEVINST pdnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">DEVINST  dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG    ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_Sibling</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PDEVINST pdnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">DEVINST  dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG    ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_Parent</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">PDEVINST pdnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">DEVINST  dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG    ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备ID<br></font><font style="color:rgba(0, 0, 0, 0.75);">根据设备实例句柄获取对应的设备ID</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_Device_IDW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">DEVINST dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">PWSTR   Buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG   BufferLen,</span></span><br><span class="hljs-params"><span class="hljs-function">ULONG   ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2. 示例"></a><font style="color:rgb(79, 79, 79);">2.2. 示例</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">UINT <span class="hljs-title">EnumeAllDeviceByCM</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    DEVINST     devInst = &#123;<span class="hljs-number">0</span>&#125;;<br>    DEVINST     devInstNext = &#123;<span class="hljs-number">0</span>&#125;;<br>    CONFIGRET   cr = &#123;<span class="hljs-number">0</span>&#125;;<br>    ULONG       walkDone = <span class="hljs-number">0</span>;<br>    ULONG       len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span>buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    <span class="hljs-comment">// Get Root DevNode</span><br>    cr = <span class="hljs-built_in">CM_Locate_DevNode</span>(&amp;devInst, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 可以指定根设备ID</span><br>    <span class="hljs-comment">//cr = CM_Locate_DevNode(&amp;devInst, &quot;PCI\\VEN_8086&amp;DEV_9D2F&amp;SUBSYS_17091D72&amp;REV_21\\3&amp;11583659&amp;1&amp;A0&quot;, 0);</span><br>    <span class="hljs-keyword">if</span> (cr != CR_SUCCESS)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Do a depth first search for the DevNode with a matching</span><br>    <span class="hljs-comment">// DriverName value</span><br>    <span class="hljs-keyword">while</span> (!walkDone)<br>        &#123;<br>            <span class="hljs-type">char</span> szDeviceID[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>            <span class="hljs-type">char</span> szProperty[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>            len = <span class="hljs-number">1024</span>;<br>            cr = <span class="hljs-built_in">CM_Get_Device_ID</span>(devInst, szDeviceID, len, <span class="hljs-number">0</span>);<br><br>            <span class="hljs-keyword">if</span> (cr == CR_SUCCESS)<br>            &#123;<br><br>                <span class="hljs-keyword">for</span> (UINT uIdx = <span class="hljs-number">1</span>; uIdx &lt;= _countof(CM_PROPERTY); uIdx++)<br>                    &#123;<br>                        len = <span class="hljs-number">1024</span>;<br>                        cr = <span class="hljs-built_in">CM_Get_DevNode_Registry_Property</span>(devInst,<br>                            uIdx,<br>                            <span class="hljs-literal">NULL</span>,<br>                            szProperty,<br>                            &amp;len,<br>                            <span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">if</span> (cr == CR_SUCCESS)<br>                        &#123;<br>                            std::cout&lt;&lt;CM_PROPERTY[uIdx<span class="hljs-number">-1</span>]&lt;&lt;std::endl;<br>                            std::cout&lt;&lt;szProperty&lt;&lt;std::endl;<br>                            <span class="hljs-built_in">OutputDebugString</span>(CM_PROPERTY[uIdx<span class="hljs-number">-1</span>]);<span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">&quot;:&quot;</span>);<br>                            <span class="hljs-built_in">OutputDebugString</span>(szProperty);<span class="hljs-built_in">OutputDebugString</span>(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>                        &#125;<br>                    &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// This DevNode didn&#x27;t match, go down a level to the first child.</span><br>            cr = <span class="hljs-built_in">CM_Get_Child</span>(&amp;devInstNext,<br>                devInst,<br>                <span class="hljs-number">0</span>);<br><br>            <span class="hljs-keyword">if</span> (cr == CR_SUCCESS)<br>            &#123;<br>                devInst = devInstNext;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Can&#x27;t go down any further, go across to the next sibling.  If</span><br>            <span class="hljs-comment">// there are no more siblings, go back up until there is a sibling.</span><br>            <span class="hljs-comment">// If we can&#x27;t go up any further, we&#x27;re back at the root and we&#x27;re</span><br>            <span class="hljs-comment">// done.</span><br>            <span class="hljs-keyword">for</span> (;;)<br>                &#123;<br>                    cr = <span class="hljs-built_in">CM_Get_Sibling</span>(&amp;devInstNext,devInst,<span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span> (cr == CR_SUCCESS)<br>                    &#123;<br>                        devInst = devInstNext;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br><br>                    cr = <span class="hljs-built_in">CM_Get_Parent</span>(&amp;devInstNext,devInst,<span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">if</span> (cr == CR_SUCCESS)<br>                    &#123;<br>                        devInst = devInstNext;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        walkDone = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>        &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-使用SetupAPI枚举所有设备"><a href="#3-使用SetupAPI枚举所有设备" class="headerlink" title="3. 使用SetupAPI枚举所有设备"></a><font style="color:rgb(79, 79, 79);">3. 使用SetupAPI枚举所有设备</font></h2><p><font style="color:rgb(77, 77, 77);">Windows的安装的设备都归为设备信息集中(device information set)中，并提供一套Setup开头的API来访问设备的相关信息。</font></p><h3 id="3-1-常用的函数"><a href="#3-1-常用的函数" class="headerlink" title="3.1. 常用的函数"></a><font style="color:rgb(79, 79, 79);">3.1. 常用的函数</font></h3><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备信息集句柄<br></font><font style="color:rgba(0, 0, 0, 0.75);">ClassGuid可以指定对应设备类型的GUID，如果不指定，则枚举所有。Enumerator如果指定枚举字符串，则枚举相应枚举器下的设备，否则返回根设备信息集句柄。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI HDEVINFO <span class="hljs-title">SetupDiGetClassDevsW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">const</span> GUID *ClassGuid,</span></span><br><span class="hljs-params"><span class="hljs-function">PCWSTR     Enumerator,</span></span><br><span class="hljs-params"><span class="hljs-function">HWND       hwndParent,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD      Flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取指定设备信息集中的对应序号的设备信息数据<br></font><font style="color:rgba(0, 0, 0, 0.75);">DeviceInfoData可以给相关函数标识设备，并且DeviceInfoData中有设备实例句柄可以给CM函数使用。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiEnumDeviceInfo</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HDEVINFO         DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD            MemberIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVINFO_DATA DeviceInfoData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">从注册表中获取设备属性<br></font><font style="color:rgba(0, 0, 0, 0.75);">根据不同的ulProperty获取对应的属性，如设备描述、硬件ID、位置信息、GUID等。作用基本与CM_Get_DevNode_Registry_Property相同。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiGetDeviceRegistryPropertyA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HDEVINFO         DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVINFO_DATA DeviceInfoData,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD            Property,</span></span><br><span class="hljs-params"><span class="hljs-function">PDWORD           PropertyRegDataType,</span></span><br><span class="hljs-params"><span class="hljs-function">PBYTE            PropertyBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD            PropertyBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PDWORD           RequiredSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备所有属性<br></font><font style="color:rgba(0, 0, 0, 0.75);">获取设备的所有属性，包括了注册表中的信息。并且其中有获取设备ID、子设备的实例ID、父设备的实例ID、兄弟设备的实例ID等，要以进行与CM类似的枚举。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiGetDevicePropertyW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HDEVINFO         DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVINFO_DATA DeviceInfoData,</span></span><br><span class="hljs-params"><span class="hljs-function"><span class="hljs-type">const</span> DEVPROPKEY *PropertyKey,</span></span><br><span class="hljs-params"><span class="hljs-function">DEVPROPTYPE      *PropertyType,</span></span><br><span class="hljs-params"><span class="hljs-function">PBYTE            PropertyBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD            PropertyBufferSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PDWORD           RequiredSize,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD            Flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备路径<br></font><font style="color:rgba(0, 0, 0, 0.75);">DeviceInfoSet从SetupDiGetClassDevs获取，DeviceInterfaceData从SetupDiEnumDeviceInterfaces获取。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiGetDeviceInterfaceDetailA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HDEVINFO                           DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVICE_INTERFACE_DATA          DeviceInterfaceData,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD                              DeviceInterfaceDetailDataSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PDWORD                             RequiredSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVINFO_DATA                   DeviceInfoData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备ID<br></font><font style="color:rgba(0, 0, 0, 0.75);">DeviceInfoSet从SetupDiGetClassDevs获取，DeviceInfoData从SetupDiEnumDeviceInfo获取。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiGetDeviceInstanceIdA</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">HDEVINFO         DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">PSP_DEVINFO_DATA DeviceInfoData,</span></span><br><span class="hljs-params"><span class="hljs-function">PSTR             DeviceInstanceId,</span></span><br><span class="hljs-params"><span class="hljs-function">DWORD            DeviceInstanceIdSize,</span></span><br><span class="hljs-params"><span class="hljs-function">PDWORD           RequiredSize</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2. 示例"></a><font style="color:rgb(79, 79, 79);">3.2. 示例</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">UINT <span class="hljs-title">EnumAllDeviceBySetup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    HDEVINFO DeviceInfoSet = <span class="hljs-built_in">SetupDiGetClassDevs</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, DIGCF_ALLCLASSES | DIGCF_PRESENT);<br>    <span class="hljs-keyword">if</span> (DeviceInfoSet == INVALID_HANDLE_VALUE)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; ; i++) <br>        &#123;<br>            SP_DEVINFO_DATA DeviceInfoData;<br>            DeviceInfoData.cbSize = <span class="hljs-built_in">sizeof</span>(DeviceInfoData);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SetupDiEnumDeviceInfo</span>(DeviceInfoSet, i, &amp;DeviceInfoData))<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-type">char</span> szDeviceID[<span class="hljs-number">256</span>] = &#123;&#125;;<br>            DWORD dwTemp = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">SetupDiGetDeviceInstanceId</span>(DeviceInfoSet, &amp;DeviceInfoData, szDeviceID, <span class="hljs-number">256</span>, &amp;dwTemp);<br><br>            DEVPROPKEY devicePropertyKey[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>            DWORD RequiredSize = <span class="hljs-number">0</span>;<br>            DEVPROPTYPE PropertyType = <span class="hljs-number">0</span>;<br>            CHAR PropertyBuffer[<span class="hljs-number">8192</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>            <span class="hljs-keyword">for</span> (UINT uIdx = <span class="hljs-number">0</span>; uIdx &lt; _countof(szSPDRPName); uIdx++)<br>                &#123;<br>                    DWORD DataT = <span class="hljs-number">0</span>;<br>                    DWORD buffersize = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SetupDiGetDeviceRegistryProperty</span>(DeviceInfoSet, &amp;DeviceInfoData, uIdx, &amp;DataT, <span class="hljs-built_in">reinterpret_cast</span>&lt;PBYTE&gt;(PropertyBuffer), <span class="hljs-number">8192</span>, &amp;RequiredSize))<br>                    &#123;<br>                        CString strLog = szSPDRPName[uIdx];<br>                        strLog += <span class="hljs-string">&quot;:&quot;</span>;<br>                        strLog += PropertyBuffer;<br>                        strLog += <span class="hljs-string">&quot;\r\n&quot;</span>;<br>                        <span class="hljs-built_in">OutputDebugString</span>(strLog);<br>                        std::cout&lt;&lt;strLog.<span class="hljs-built_in">GetString</span>();<br>                    &#125;<br>                &#125;<br>        &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function">UINT <span class="hljs-title">GetAllUSBDeviceID</span><span class="hljs-params">(<span class="hljs-type">char</span>** _ppDeviceID, <span class="hljs-type">char</span>** _ppHubID)</span></span><br><span class="hljs-function"></span>&#123;<br>    GUID* pGUID = (GUID*)&amp;GUID_DEVINTERFACE_DISK;<br>    HDEVINFO hDevInfoSet = <span class="hljs-built_in">SetupDiGetClassDevs</span>(pGUID, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);<br>    <span class="hljs-keyword">if</span> ( hDevInfoSet == INVALID_HANDLE_VALUE ) <br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    SP_DEVICE_INTERFACE_DATA ifdata;<br>    PSP_DEVICE_INTERFACE_DETAIL_DATA pDetail = (PSP_DEVICE_INTERFACE_DETAIL_DATA)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">1024</span>);<br>    <span class="hljs-keyword">if</span> (pDetail == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    pDetail-&gt;cbSize = <span class="hljs-built_in">sizeof</span>(SP_DEVICE_INTERFACE_DETAIL_DATA);<br><br>    U32 dwDeviceIdx = <span class="hljs-number">0</span>;<br>    U32 dwUSBDeviceCnt = <span class="hljs-number">0</span>;<br>    BOOL result = TRUE;<br>    SP_DEVINFO_DATA spdd;<br><br>    <span class="hljs-comment">// device index = 0, 1, 2... test the device interface one by one</span><br>    <span class="hljs-keyword">while</span> (result)<br>        &#123;<br>            ifdata.cbSize = <span class="hljs-built_in">sizeof</span>(ifdata);<br><br>            <span class="hljs-comment">//enumerates the device interfaces that are contained in a device information set</span><br>            result = <span class="hljs-built_in">SetupDiEnumDeviceInterfaces</span>(<br>                hDevInfoSet,     <span class="hljs-comment">// DeviceInfoSet</span><br>                <span class="hljs-literal">NULL</span>,            <span class="hljs-comment">// DeviceInfoData</span><br>                pGUID,           <span class="hljs-comment">// GUID</span><br>                dwDeviceIdx, <span class="hljs-comment">// MemberIndex</span><br>                &amp;ifdata          <span class="hljs-comment">// DeviceInterfaceData</span><br>                );<br>            <span class="hljs-keyword">if</span> (result)<br>            &#123;<br>                <span class="hljs-comment">// get the buffer size of details</span><br>                U32 dwSize = <span class="hljs-number">0</span>;<br>                result = <span class="hljs-built_in">SetupDiGetDeviceInterfaceDetail</span>(hDevInfoSet, &amp;ifdata, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, &amp;dwSize, <span class="hljs-literal">NULL</span>);<br><br>                <span class="hljs-keyword">if</span> ((ERROR_INSUFFICIENT_BUFFER == <span class="hljs-built_in">GetLastError</span>()) &amp;&amp; (dwSize &gt; <span class="hljs-number">0</span>))<br>                &#123;<br>                    pDetail-&gt;cbSize = <span class="hljs-built_in">sizeof</span>(*pDetail);<br><br>                    <span class="hljs-built_in">ZeroMemory</span>((PVOID)&amp;spdd, <span class="hljs-built_in">sizeof</span>(spdd));<br>                    spdd.cbSize = <span class="hljs-built_in">sizeof</span>(spdd);<br><br>                    <span class="hljs-comment">// get details about a device interface</span><br>                    result = <span class="hljs-built_in">SetupDiGetDeviceInterfaceDetail</span>(<br>                        hDevInfoSet,    <span class="hljs-comment">// DeviceInfoSet</span><br>                        &amp;ifdata,        <span class="hljs-comment">// DeviceInterfaceData</span><br>                        pDetail,        <span class="hljs-comment">// DeviceInterfaceDetailData</span><br>                        <span class="hljs-number">1024</span>,<span class="hljs-comment">// DeviceInterfaceDetailDataSize</span><br>                        &amp;dwSize,        <span class="hljs-comment">// RequiredSize</span><br>                        &amp;spdd<span class="hljs-comment">// DeviceInfoData</span><br>                        );<br><br>                    dwDeviceIdx++;<br><br>                    <span class="hljs-comment">// 设备路径必须是usbstor</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> == <span class="hljs-built_in">strstr</span>(pDetail-&gt;DevicePath, <span class="hljs-string">&quot;usb&quot;</span>))<br>                    &#123;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (result)<br>                    &#123;<br>                        DEVINST DevInstParent = <span class="hljs-number">0</span>;<br>CONFIGRET cr = <span class="hljs-built_in">CM_Get_Parent</span>(&amp;DevInstParent, spdd.DevInst, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (cr != CR_SUCCESS)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">char</span> szBuff[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>cr = <span class="hljs-built_in">CM_Get_Device_ID</span>(DevInstParent, szBuff, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (cr != CR_SUCCESS)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">strcpy_s</span>(_ppDeviceID[dwUSBDeviceCnt], DEVICE_ID_SIZE, szBuff);<br><br><span class="hljs-comment">// 再向上查找一级即为HUBID</span><br>DEVINST hubDevInst = <span class="hljs-number">0</span>;<br>cr = <span class="hljs-built_in">CM_Get_Parent</span>(&amp;hubDevInst, DevInstParent, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (cr != CR_SUCCESS)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">char</span> szHubBuff[<span class="hljs-number">512</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>cr = <span class="hljs-built_in">CM_Get_Device_ID</span>(hubDevInst, szHubBuff, <span class="hljs-number">512</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (cr != CR_SUCCESS)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">strcpy_s</span>(_ppHubID[dwUSBDeviceCnt++], DEVICE_ID_SIZE, szHubBuff);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">free</span>(pDetail);<br><span class="hljs-built_in">SetupDiDestroyDeviceInfoList</span>(hDevInfoSet);<br><br><span class="hljs-keyword">return</span> dwUSBDeviceCnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">EnumAllDeviceBySetupEx</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//HDEVINFO DeviceInfoSet = SetupDiGetClassDevs(NULL, &quot;USB&quot;, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);</span><br>HDEVINFO DeviceInfoSet = <span class="hljs-built_in">SetupDiGetClassDevs</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, DIGCF_ALLCLASSES | DIGCF_PRESENT);<br><span class="hljs-keyword">if</span> (DeviceInfoSet == INVALID_HANDLE_VALUE)<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> nIdx = <span class="hljs-number">0</span>; ; nIdx++) <br>&#123;<br>SP_DEVINFO_DATA DeviceInfoData;<br>DeviceInfoData.cbSize = <span class="hljs-built_in">sizeof</span>(DeviceInfoData);<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SetupDiEnumDeviceInfo</span>(DeviceInfoSet, nIdx, &amp;DeviceInfoData))<br><span class="hljs-keyword">break</span>;<br><span class="hljs-type">char</span> szDeviceID[<span class="hljs-number">256</span>] = &#123;&#125;;<br>DWORD dwTemp = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">SetupDiGetDeviceInstanceId</span>(DeviceInfoSet, &amp;DeviceInfoData, szDeviceID, <span class="hljs-number">256</span>, &amp;dwTemp);<br><br>DEVPROPKEY devicePropertyKey[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>DWORD dwCount = <span class="hljs-number">128</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">SetupDiGetDevicePropertyKeys</span>(DeviceInfoSet, &amp;DeviceInfoData, devicePropertyKey, dwCount, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><span class="hljs-keyword">continue</span>;<br>DWORD RequiredSize = <span class="hljs-number">0</span>;<br>DEVPROPTYPE PropertyType = <span class="hljs-number">0</span>;<br>WCHAR PropertyBuffer[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (UINT uIdx = <span class="hljs-number">0</span>; uIdx &lt; _countof(devicePropertyKey); uIdx++)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == devicePropertyKey[uIdx].pid)<br><span class="hljs-keyword">continue</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">SetupDiGetDevicePropertyW</span>(DeviceInfoSet, &amp;DeviceInfoData, &amp;devicePropertyKey[uIdx], &amp;PropertyType, <span class="hljs-built_in">reinterpret_cast</span>&lt;PBYTE&gt;(PropertyBuffer), <span class="hljs-built_in">sizeof</span>(PropertyBuffer), <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>))<br>&#123;<br><span class="hljs-keyword">for</span> (UINT uKeyIdx = <span class="hljs-number">0</span>; uKeyIdx &lt; _countof(ARR_DEV_KEYS); uKeyIdx++)<br>&#123;<br><span class="hljs-keyword">if</span> ((devicePropertyKey[uIdx].fmtid == ARR_DEV_KEYS[uKeyIdx].fmtid)<br>&amp;&amp; (devicePropertyKey[uIdx].pid == ARR_DEV_KEYS[uKeyIdx].pid))<br>&#123;<br>CString strLog = ARR_STR_DEV_KEYS[uKeyIdx];<br>strLog += <span class="hljs-string">&quot;:&quot;</span>;<br>USES_CONVERSION;<br>strLog += <span class="hljs-built_in">W2A</span>(PropertyBuffer);<br>strLog += <span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-built_in">OutputDebugString</span>(strLog);<br>std::cout&lt;&lt;strLog.<span class="hljs-built_in">GetString</span>();<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-使用DeviceIOControl枚举所有设备"><a href="#4-使用DeviceIOControl枚举所有设备" class="headerlink" title="4. 使用DeviceIOControl枚举所有设备"></a><font style="color:rgb(79, 79, 79);">4. 使用DeviceIOControl枚举所有设备</font></h2><h3 id="4-1-枚举基本流程"><a href="#4-1-枚举基本流程" class="headerlink" title="4.1. 枚举基本流程"></a><font style="color:rgb(79, 79, 79);">4.1. 枚举基本流程</font></h3><ul><li><font style="color:rgba(0, 0, 0, 0.75);">获取根Hub名字<br></font><font style="color:rgba(0, 0, 0, 0.75);">打开根设备，并且通过DeviceIoControl(IOCTL_USB_GET_ROOT_HUB_NAME来获取HubName。</font></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">sprintf_s</span>(hcdName, <span class="hljs-string">&quot;\\\\.\\HCD%d&quot;</span>, nHCDNo);<br>HANDLE hHCDev = <span class="hljs-built_in">CreateFile</span>(hcdName, GENERIC_WRITE, FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br>std::string strRootHubName = <span class="hljs-built_in">GetRootHubName</span>(hHCDev);<br></code></pre></td></tr></table></figure><ul><li><font style="color:rgba(0, 0, 0, 0.75);">通过HubName获取Hub的节点信息</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">通过CreateFile(HubNmae…）,然后再通过 DeviceIoControl(hHubDevice,IOCTL_USB_GET_NODE_INFORMATION,获取设备节点信息。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">设备节点信息中包括Hub有几个子设备。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">遍历设备节点连接信息<br></font><font style="color:rgba(0, 0, 0, 0.75);">通过DeviceIoControl(hHubDevice,IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX，并且指定Hub中设备的索引，获取指定索引的设备连接信息。主要包括设备描述、速度、是否Hub等。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备驱动名<br></font><font style="color:rgba(0, 0, 0, 0.75);">通过DeviceIoControl(Hub,IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME并且指定索引获取设备驱动名，可以作为设备的唯一标识，且与CM属性CM_DRP_DRIVER进行匹配。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">获取设备的连接名(设备路径)<br></font><font style="color:rgba(0, 0, 0, 0.75);">通过DeviceIoControl(Hub,IOCTL_USB_GET_NODE_CONNECTION_NAME并且指定索引获取设备连接名，也即设备路径，可以作为设备唯一标识。子Hub设备路径，可以进行新一轮枚举。</font></li></ul><h3 id="4-2-示例"><a href="#4-2-示例" class="headerlink" title="4.2. 示例"></a><font style="color:rgb(79, 79, 79);">4.2. 示例</font></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> std::string <span class="hljs-title">GetDriverKeyName</span><span class="hljs-params">(HANDLE Hub, ULONG ConnectionIndex)</span></span><br><span class="hljs-function"></span>&#123;<br>    BOOL                                success;<br>    ULONG                               nBytes;<br>    USB_NODE_CONNECTION_DRIVERKEY_NAME  driverKeyName;<br>    PUSB_NODE_CONNECTION_DRIVERKEY_NAME driverKeyNameW = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">// Get the length of the name of the driver key of the device attached to</span><br>    <span class="hljs-comment">// the specified port.</span><br>    <span class="hljs-comment">//</span><br>    driverKeyName.ConnectionIndex = ConnectionIndex;<br><br>    success = <span class="hljs-built_in">DeviceIoControl</span>(Hub,<br>        IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME,<br>        &amp;driverKeyName,<br>        <span class="hljs-built_in">sizeof</span>(driverKeyName),<br>        &amp;driverKeyName,<br>        <span class="hljs-built_in">sizeof</span>(driverKeyName),<br>        &amp;nBytes,<br>        <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (!success)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Allocate space to hold the driver key name</span><br>    <span class="hljs-comment">//</span><br>    nBytes = driverKeyName.ActualLength;<br><br>    <span class="hljs-keyword">if</span> (nBytes &lt;= <span class="hljs-built_in">sizeof</span>(driverKeyName))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    driverKeyNameW = (PUSB_NODE_CONNECTION_DRIVERKEY_NAME)<span class="hljs-keyword">new</span> BYTE[nBytes];<br>    <span class="hljs-keyword">if</span> (driverKeyNameW == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">delete</span>[] driverKeyNameW;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Get the name of the driver key of the device attached to</span><br>    <span class="hljs-comment">// the specified port.</span><br>    <span class="hljs-comment">//</span><br>    driverKeyNameW-&gt;ConnectionIndex = ConnectionIndex;<br><br>    success = <span class="hljs-built_in">DeviceIoControl</span>(Hub,<br>        IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME,<br>        driverKeyNameW,<br>        nBytes,<br>        driverKeyNameW,<br>        nBytes,<br>        &amp;nBytes,<br>        <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">if</span> (!success)<br>    &#123;<br>        <span class="hljs-keyword">delete</span>[] driverKeyNameW;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Convert the driver key name</span><br>    <span class="hljs-comment">//</span><br>    USES_CONVERSION;<br>    std::string driverKeyNameA = <span class="hljs-built_in">W2A</span>(driverKeyNameW-&gt;DriverKeyName);<br>    <span class="hljs-keyword">delete</span>[] driverKeyNameW;<br><br>    <span class="hljs-keyword">return</span> driverKeyNameA;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">const</span> std::string <span class="hljs-title">GetExternalHubName</span><span class="hljs-params">(HANDLE Hub, ULONG ConnectionIndex)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL                        success;<br>ULONG                       nBytes;<br>USB_NODE_CONNECTION_NAMEextHubName;<br>PUSB_NODE_CONNECTION_NAME   extHubNameW = <span class="hljs-literal">NULL</span>;<br>std::string                  extHubNameA;<br><br><span class="hljs-comment">// Get the length of the name of the external hub attached to the</span><br><span class="hljs-comment">// specified port.</span><br><span class="hljs-comment">//</span><br>extHubName.ConnectionIndex = ConnectionIndex;<br><br>success = <span class="hljs-built_in">DeviceIoControl</span>(Hub,<br>    IOCTL_USB_GET_NODE_CONNECTION_NAME,<br>    &amp;extHubName,<br>    <span class="hljs-built_in">sizeof</span>(extHubName),<br>    &amp;extHubName,<br>    <span class="hljs-built_in">sizeof</span>(extHubName),<br>    &amp;nBytes,<br>    <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (!success)<br>&#123;<br>    <span class="hljs-keyword">goto</span> GetExternalHubNameError;<br>&#125;<br><br><span class="hljs-comment">// Allocate space to hold the external hub name</span><br><span class="hljs-comment">//</span><br>nBytes = extHubName.ActualLength;<br><br><span class="hljs-keyword">if</span> (nBytes &lt;= <span class="hljs-built_in">sizeof</span>(extHubName))<br>&#123;<br>    <span class="hljs-keyword">goto</span> GetExternalHubNameError;<br>&#125;<br><br>extHubNameW = (PUSB_NODE_CONNECTION_NAME) <span class="hljs-keyword">new</span> BYTE[nBytes];<br><br><span class="hljs-keyword">if</span> (extHubNameW == <span class="hljs-literal">NULL</span>)<br>&#123;<br>    <span class="hljs-keyword">goto</span> GetExternalHubNameError;<br>&#125;<br><br><span class="hljs-comment">// Get the name of the external hub attached to the specified port</span><br><span class="hljs-comment">//</span><br>extHubNameW-&gt;ConnectionIndex = ConnectionIndex;<br><br>success = <span class="hljs-built_in">DeviceIoControl</span>(Hub,<br>    IOCTL_USB_GET_NODE_CONNECTION_NAME,<br>    extHubNameW,<br>    nBytes,<br>    extHubNameW,<br>    nBytes,<br>    &amp;nBytes,<br>    <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (!success)<br>&#123;<br>    <span class="hljs-keyword">goto</span> GetExternalHubNameError;<br>&#125;<br><br><span class="hljs-comment">// Convert the External Hub name</span><br><span class="hljs-comment">//</span><br>USES_CONVERSION;<br>extHubNameA = <span class="hljs-built_in">W2A</span>(extHubNameW-&gt;NodeName);<br><br><span class="hljs-comment">// All done, free the uncoverted external hub name and return the</span><br><span class="hljs-comment">// converted external hub name</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">delete</span> []extHubNameW;<br><br><span class="hljs-keyword">return</span> extHubNameA;<br><br><br>GetExternalHubNameError:<br><span class="hljs-comment">// There was an error, free anything that was allocated</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">if</span> (extHubNameW != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> [](extHubNameW);<br>extHubNameW = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnumerateHub</span><span class="hljs-params">(std::string rootHubName, <span class="hljs-type">bool</span> bRoot = <span class="hljs-literal">false</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnumerateHubPorts</span><span class="hljs-params">(LPCTSTR _lpcHubName, HANDLE hHubDevice, ULONG NumPorts, <span class="hljs-type">bool</span> bFindAnc, <span class="hljs-type">bool</span> bRoot)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">UNREFERENCED_PARAMETER</span>(bFindAnc);<br><span class="hljs-built_in">UNREFERENCED_PARAMETER</span>(bRoot);<br>ULONG       index;<br>BOOL        success;<br>std::stringstrDebug;<br><br>PUSB_NODE_CONNECTION_INFORMATION_EX connectionInfoEx;<br><br>std::string driverKeyName;<br>std::string deviceDesc;<br><br>BOOL bHaveOneHubPort = FALSE;<br><span class="hljs-comment">// Loop over all ports of the hub.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Port indices are 1 based, not 0 based.</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">for</span> (index=<span class="hljs-number">1</span>; index &lt;= NumPorts; index++)<br>&#123;<br>ULONG nBytesEx;<br><br><span class="hljs-comment">// Allocate space to hold the connection info for this port.</span><br><span class="hljs-comment">// For now, allocate it big enough to hold info for 30 pipes.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Endpoint numbers are 0-15.  Endpoint number 0 is the standard</span><br><span class="hljs-comment">// control endpoint which is not explicitly listed in the Configuration</span><br><span class="hljs-comment">// Descriptor.  There can be an IN endpoint and an OUT endpoint at</span><br><span class="hljs-comment">// endpoint numbers 1-15 so there can be a maximum of 30 endpoints</span><br><span class="hljs-comment">// per device configuration.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Should probably size this dynamically at some point.</span><br><span class="hljs-comment">//</span><br>nBytesEx = <span class="hljs-built_in">sizeof</span>(USB_NODE_CONNECTION_INFORMATION_EX) +<br><span class="hljs-built_in">sizeof</span>(USB_PIPE_INFO) * <span class="hljs-number">30</span>;<br><br>connectionInfoEx = (PUSB_NODE_CONNECTION_INFORMATION_EX)<span class="hljs-keyword">new</span> BYTE[nBytesEx];<br><br><span class="hljs-keyword">if</span> (connectionInfoEx == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Now query USBHUB for the USB_NODE_CONNECTION_INFORMATION_EX structure</span><br><span class="hljs-comment">// for this port.  This will tell us if a device is attached to this</span><br><span class="hljs-comment">// port, among other things.</span><br><span class="hljs-comment">//</span><br>connectionInfoEx-&gt;ConnectionIndex = index;<br><br>success = <span class="hljs-built_in">DeviceIoControl</span>(hHubDevice,<br>IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX,<br>connectionInfoEx,<br>nBytesEx,<br>connectionInfoEx,<br>nBytesEx,<br>&amp;nBytesEx,<br><span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (!success)<br>&#123;<br>PUSB_NODE_CONNECTION_INFORMATION    connectionInfo;<br>ULONG                               nBytes;<br><br><span class="hljs-comment">// Try using IOCTL_USB_GET_NODE_CONNECTION_INFORMATION</span><br><span class="hljs-comment">// instead of IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX</span><br><span class="hljs-comment">//</span><br>nBytes = <span class="hljs-built_in">sizeof</span>(USB_NODE_CONNECTION_INFORMATION) + <span class="hljs-built_in">sizeof</span>(USB_PIPE_INFO) * <span class="hljs-number">30</span>;<br>connectionInfo = (PUSB_NODE_CONNECTION_INFORMATION)<span class="hljs-keyword">new</span> BYTE[nBytes];<br>connectionInfo-&gt;ConnectionIndex = index;<br><br>success = <span class="hljs-built_in">DeviceIoControl</span>(hHubDevice,<br>IOCTL_USB_GET_NODE_CONNECTION_INFORMATION,<br>connectionInfo,<br>nBytes,<br>connectionInfo,<br>nBytes,<br>&amp;nBytes,<br><span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (!success)<br>&#123;<br><span class="hljs-keyword">delete</span> []connectionInfo;<br><span class="hljs-keyword">delete</span> []connectionInfoEx;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-comment">// Copy IOCTL_USB_GET_NODE_CONNECTION_INFORMATION into</span><br><span class="hljs-comment">// IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX structure.</span><br><span class="hljs-comment">//</span><br>connectionInfoEx-&gt;ConnectionIndex =connectionInfo-&gt;ConnectionIndex;<br>connectionInfoEx-&gt;DeviceDescriptor = connectionInfo-&gt;DeviceDescriptor;<br>connectionInfoEx-&gt;CurrentConfigurationValue =connectionInfo-&gt;CurrentConfigurationValue;<br>connectionInfoEx-&gt;Speed = connectionInfo-&gt;LowSpeed ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>connectionInfoEx-&gt;DeviceIsHub =connectionInfo-&gt;DeviceIsHub;<br>connectionInfoEx-&gt;DeviceAddress = connectionInfo-&gt;DeviceAddress;<br>connectionInfoEx-&gt;NumberOfOpenPipes = connectionInfo-&gt;NumberOfOpenPipes;<br>connectionInfoEx-&gt;ConnectionStatus = connectionInfo-&gt;ConnectionStatus;<br><br><span class="hljs-built_in">memcpy</span>(&amp;connectionInfoEx-&gt;PipeList[<span class="hljs-number">0</span>],<br>&amp;connectionInfo-&gt;PipeList[<span class="hljs-number">0</span>],<br><span class="hljs-built_in">sizeof</span>(USB_PIPE_INFO) * <span class="hljs-number">30</span>);<br><br><span class="hljs-keyword">delete</span> []connectionInfo;<br><br>&#125;<br><br><span class="hljs-comment">// If there is a device connected, get the Device Description</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">if</span> (connectionInfoEx-&gt;ConnectionStatus != NoDeviceConnected)<br>&#123;<br>driverKeyName = <span class="hljs-built_in">GetDriverKeyName</span>(hHubDevice,index);<br>_strupr_s(<span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(deviceDesc.<span class="hljs-built_in">c_str</span>()), deviceDesc.<span class="hljs-built_in">length</span>()<span class="hljs-number">+1</span>);<br><span class="hljs-keyword">if</span> (connectionInfoEx-&gt;DeviceIsHub)<br>&#123;<br>std::string extHubName = <span class="hljs-built_in">GetExternalHubName</span>(hHubDevice, index);<br><span class="hljs-built_in">EnumerateHub</span>(extHubName);<br><br>bHaveOneHubPort = TRUE;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">delete</span> []connectionInfoEx;<br>&#125;<br>&#125;<br><br><br><span class="hljs-function">std::string <span class="hljs-title">GetRootHubName</span><span class="hljs-params">(HANDLE HostController)</span></span><br><span class="hljs-function"></span>&#123;<br>BOOL                success;<br>ULONG               nBytes;<br>USB_ROOT_HUB_NAME   rootHubName;<br>PUSB_ROOT_HUB_NAME  rootHubNameW= <span class="hljs-literal">NULL</span>;<br>std::string          rootHubNameA;<br><br><span class="hljs-comment">// Get the length of the name of the Root Hub attached to the</span><br><span class="hljs-comment">// Host Controller</span><br><span class="hljs-comment">//</span><br>success = <span class="hljs-built_in">DeviceIoControl</span>(HostController,<br>IOCTL_USB_GET_ROOT_HUB_NAME,<br><span class="hljs-number">0</span>,<br><span class="hljs-number">0</span>,<br>&amp;rootHubName,<br><span class="hljs-built_in">sizeof</span>(rootHubName),<br>&amp;nBytes,<br><span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (!success)<br>&#123;<br><span class="hljs-keyword">goto</span> GetRootHubNameError;<br>&#125;<br><br><span class="hljs-comment">// Allocate space to hold the Root Hub name</span><br><span class="hljs-comment">//</span><br>nBytes = rootHubName.ActualLength;<br><br>rootHubNameW = (PUSB_ROOT_HUB_NAME)<span class="hljs-keyword">new</span> BYTE[nBytes];<br><br><span class="hljs-keyword">if</span> (rootHubNameW == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">goto</span> GetRootHubNameError;<br>&#125;<br><br><span class="hljs-comment">// Get the name of the Root Hub attached to the Host Controller</span><br><span class="hljs-comment">//</span><br>success = <span class="hljs-built_in">DeviceIoControl</span>(HostController,<br>IOCTL_USB_GET_ROOT_HUB_NAME,<br><span class="hljs-literal">NULL</span>,<br><span class="hljs-number">0</span>,<br>rootHubNameW,<br>nBytes,<br>&amp;nBytes,<br><span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">if</span> (!success)<br>&#123;<br><span class="hljs-keyword">goto</span> GetRootHubNameError;<br>&#125;<br><br><span class="hljs-comment">// Convert the Root Hub name</span><br><span class="hljs-comment">//</span><br>USES_CONVERSION;<br>rootHubNameA = <span class="hljs-built_in">W2A</span>(rootHubNameW-&gt;RootHubName);<br><br><span class="hljs-comment">// All done, free the uncoverted Root Hub name and return the</span><br><span class="hljs-comment">// converted Root Hub name</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">delete</span> []rootHubNameW;<br><br><span class="hljs-keyword">return</span> rootHubNameA;<br><br><br>GetRootHubNameError:<br><span class="hljs-comment">// There was an error, free anything that was allocated</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">if</span> (rootHubNameW != <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">delete</span> []rootHubNameW;<br>rootHubNameW = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">EnumerateHub</span><span class="hljs-params">(std::string rootHubName, <span class="hljs-type">bool</span> bRoot <span class="hljs-comment">/*= false*/</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (rootHubName.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>_strupr_s(<span class="hljs-built_in">const_cast</span>&lt;<span class="hljs-type">char</span>*&gt;(rootHubName.<span class="hljs-built_in">c_str</span>()), rootHubName.<span class="hljs-built_in">length</span>()<span class="hljs-number">+1</span>);<br><br>std::string DeviceName;<br>HANDLE  hHubDevice;<br>USB_NODE_INFORMATION   hubInfo;<br>ULONG                   nBytes;<br>DeviceName = <span class="hljs-string">&quot;\\\\.\\&quot;</span>;<br>DeviceName += rootHubName;<br>hHubDevice = <span class="hljs-built_in">CreateFile</span>(DeviceName.<span class="hljs-built_in">c_str</span>(),<br>GENERIC_WRITE,<br>FILE_SHARE_WRITE,<br><span class="hljs-literal">NULL</span>,<br>OPEN_EXISTING,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hHubDevice != INVALID_HANDLE_VALUE)<br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">DeviceIoControl</span>(hHubDevice,<br>IOCTL_USB_GET_NODE_INFORMATION,<br>&amp;hubInfo,<br><span class="hljs-built_in">sizeof</span>(USB_NODE_INFORMATION),<br>&amp;hubInfo,<br><span class="hljs-built_in">sizeof</span>(USB_NODE_INFORMATION),<br>&amp;nBytes,<br><span class="hljs-literal">NULL</span>))<br>&#123;<br><span class="hljs-built_in">EnumerateHubPorts</span>(<br>rootHubName.<span class="hljs-built_in">c_str</span>(),<br>hHubDevice,<br>hubInfo.u.HubInformation.HubDescriptor.bNumberOfPorts,<br><span class="hljs-number">0</span>,<br>bRoot);<br><br><span class="hljs-built_in">CloseHandle</span>(hHubDevice);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function">DWORD <span class="hljs-title">EnumeAllDeviceByDeviceIOControl</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_HCD_COUNT = <span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> hcdName[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> nHCDNo = <span class="hljs-number">0</span>; nHCDNo &lt; MAX_HCD_COUNT; nHCDNo++)<br>&#123;<br><span class="hljs-built_in">sprintf_s</span>(hcdName, <span class="hljs-string">&quot;\\\\.\\HCD%d&quot;</span>, nHCDNo);<br>HANDLE hHCDev = <span class="hljs-built_in">CreateFile</span>(hcdName, GENERIC_WRITE, FILE_SHARE_WRITE, <span class="hljs-literal">NULL</span>, OPEN_EXISTING, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (hHCDev == INVALID_HANDLE_VALUE)<br><span class="hljs-keyword">continue</span>;<br><br>std::string strRootHubName = <span class="hljs-built_in">GetRootHubName</span>(hHCDev);<br><span class="hljs-keyword">if</span> (strRootHubName.<span class="hljs-built_in">empty</span>())<br><span class="hljs-keyword">continue</span>;<br><br><span class="hljs-built_in">EnumerateHub</span>(strRootHubName.<span class="hljs-built_in">c_str</span>(), <span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-几种方式的关系"><a href="#5-几种方式的关系" class="headerlink" title="5. 几种方式的关系"></a><font style="color:rgb(79, 79, 79);">5. 几种方式的关系</font></h2><h3 id="5-1-SetupAPI与CM"><a href="#5-1-SetupAPI与CM" class="headerlink" title="5.1. SetupAPI与CM"></a><font style="color:rgb(79, 79, 79);">5.1. SetupAPI与CM</font></h3><ul><li><strong><font style="color:rgba(0, 0, 0, 0.75);">SetupDiEnumDeviceInfo</font></strong><font style="color:rgba(0, 0, 0, 0.75);">和</font><strong><font style="color:rgba(0, 0, 0, 0.75);">SetupDiGetDeviceInterfaceDetail</font></strong><font style="color:rgba(0, 0, 0, 0.75);">都可以获取到设备实例句柄，供CM序列函数使用。</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.75);">SetupGet</font></strong><font style="color:rgba(0, 0, 0, 0.75);">获取的属性与CM_Get获取的属性基本相同。</font></li></ul><h3 id="5-2-DeviceIoControl与SetupAPI及CM序列函数"><a href="#5-2-DeviceIoControl与SetupAPI及CM序列函数" class="headerlink" title="5.2. DeviceIoControl与SetupAPI及CM序列函数"></a><font style="color:rgb(79, 79, 79);">5.2. DeviceIoControl与SetupAPI及CM序列函数</font></h3><ul><li><strong><font style="color:rgba(0, 0, 0, 0.75);">DeviceIoControl</font></strong><font style="color:rgba(0, 0, 0, 0.75);">中的</font><strong><font style="color:rgba(0, 0, 0, 0.75);">IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME</font></strong><font style="color:rgba(0, 0, 0, 0.75);">可以获取设备驱动名，可以与设备信息集中的驱动名属性以及CM注册表的属性名相匹配。</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.75);">SetupDiGetDeviceInterfaceDetail</font></strong><font style="color:rgba(0, 0, 0, 0.75);">可以获取设备路径，可以供</font><strong><font style="color:rgba(0, 0, 0, 0.75);">CreateFile</font></strong><font style="color:rgba(0, 0, 0, 0.75);">打开然后通过</font><strong><font style="color:rgba(0, 0, 0, 0.75);">DeviceIoControl</font></strong><font style="color:rgba(0, 0, 0, 0.75);">的</font><strong><font style="color:rgba(0, 0, 0, 0.75);">IOCTL_STORAGE_GET_DEVICE_NUMBER</font></strong><font style="color:rgba(0, 0, 0, 0.75);">获取物理设备名。</font></li></ul><hr><h1 id="SetupDiDestroyDeviceInfoList-函数-setupapi-h"><a href="#SetupDiDestroyDeviceInfoList-函数-setupapi-h" class="headerlink" title="SetupDiDestroyDeviceInfoList 函数 (setupapi.h)"></a><font style="color:rgba(0, 0, 0, 0.75);">SetupDiDestroyDeviceInfoList 函数 (setupapi.h)</font></h1><p><strong><font style="color:rgb(22, 22, 22);">SetupDiDestroyDeviceInfoList</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数删除设备信息集并释放所有关联的内存。</font></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiDestroyDeviceInfoList</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HDEVINFO DeviceInfoSet</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h2><p><code>[in] DeviceInfoSet</code></p><p><font style="color:rgb(22, 22, 22);">要删除</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-information-sets">的设备信息的句</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">柄。</font></p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果成功，函数将返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">TRUE</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">。 否则，它将返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">FALSE</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">，并且可以通过调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">来检索记录的错误。</font></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">在 Microsoft Windows 2000 及更高版本的 Windows 中可用。</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">桌面</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 Setupapi.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Setupapi.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Setupapi.dll</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">API 集</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">windows 8 中引入的 ext-ms-win-setupapi-classinstallers-l1-1-0 ()</font></td></tr></tbody></table><h2 id="另请参阅"><a href="#另请参阅" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdicreatedeviceinfolist">SetupDiCreateDeviceInfoList</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsw">SetupDiGetClassDevs</a></p><hr><h1 id="CM-Get-Device-ID-函数-cfgmgr32-h"><a href="#CM-Get-Device-ID-函数-cfgmgr32-h" class="headerlink" title="CM_Get_Device_ID 函数 (cfgmgr32.h)"></a>CM_Get_Device_ID 函数 (cfgmgr32.h)</h1><p><strong><font style="color:rgb(22, 22, 22);">CM_Get_Device_ID</font></strong><font style="color:rgb(22, 22, 22);">函数检索本地计算机上指定</font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/">设备实例的设备实例</a><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-instance-ids">ID</a><font style="color:rgb(22, 22, 22);">。</font></p><p>****<strong>备注</strong></p><p><font style="color:rgb(22, 22, 22);">在 Windows Vista 及更高版本的 Windows 中，</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">统一设备属性模型</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">使用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/devpkey-device-instanceid">DEVPKEY_Device_InstanceId</a><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/property-keys">属性键</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">来表示设备实例标识符。 有关详细信息</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/retrieving-a-device-instance-identifier">，请参阅检索设备实例标识符</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_Device_IDW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DEVINST dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] PWSTR   Buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  ULONG   BufferLen,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  ULONG   ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h2><p><code>[in] dnDevInst</code></p><p>绑定到本地计算机的调用方提供的设备实例句柄。</p><p><code>[out] Buffer</code></p><p>用于接收设备实例 ID 字符串的缓冲区的地址。 可以通过调用 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_device_id_size">CM_Get_Device_ID_Size</a>，然后递增接收的值来获取所需的缓冲区大小，以便为字符串的终止 <strong>NULL</strong> 留出空间。</p><p><code>[in] BufferLen</code></p><p>由 <em>Buffer</em> 指定的缓冲区的调用方提供的长度（以字符为单位）。</p><p><code>[in] ulFlags</code></p><p>未使用，必须为零。</p><h2 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果操作成功，函数将返回CR_SUCCESS。 否则，它将返回</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">Cfgmgr32.h</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">中定义的CR_前缀错误代码之一。</font></p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">该函数将 NULL 终止符追加到提供的设备实例 ID 字符串，除非缓冲区太小而无法容纳该字符串。 在这种情况下， 函数提供缓冲区中容纳的标识符字符串，然后返回CR_BUFFER_SMALL。</font></p><p><font style="color:rgb(22, 22, 22);">有关设备实例 ID 的信息，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-identification-strings">设备标识字符串</a><font style="color:rgb(22, 22, 22);">。</font></p><p><font style="color:rgb(22, 22, 22);">有关使用绑定到本地计算机的设备实例句柄的信息，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_child">CM_Get_Child</a><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">在 Microsoft Windows 2000 及更高版本的 Windows 中可用。</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">通用</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">cfgmgr32.h (包括 Cfgmgr32.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Cfgmgr32.lib</font></td></tr></tbody></table><h2 id="另请参阅-1"><a href="#另请参阅-1" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_child">CM_Get_Child</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_device_id_exw">CM_Get_Device_ID_Ex</a></p><hr><h1 id="CM-Get-Parent-函数-cfgmgr32-h"><a href="#CM-Get-Parent-函数-cfgmgr32-h" class="headerlink" title="CM_Get_Parent 函数 (cfgmgr32.h)"></a><font style="color:rgb(38, 38, 38);">CM_Get_Parent 函数 (cfgmgr32.h)</font></h1><p><strong><font style="color:rgb(22, 22, 22);">CM_Get_Parent</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数获取指定设备节点的父节点的设备实例句柄， (本地计算机的设备树中的</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/">devnode</a><font style="color:rgb(22, 22, 22);">) 。</font></p><p>****<strong>备注</strong></p><p><font style="color:rgb(22, 22, 22);">在 Windows Vista 和更高版本的 Windows 中，</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/unified-device-property-model--windows-vista-and-later-">统一设备属性模型</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">使用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/devpkey-device-parent">DEVPKEY_Device_Parent</a><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/property-keys">属性键</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">来表示设备父级。 有关详细信息</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/retrieving-device-relations">，请参阅检索设备关系</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">CMAPI CONFIGRET <span class="hljs-title">CM_Get_Parent</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [out] PDEVINST pdnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  DEVINST  dnDevInst,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]  ULONG    ulFlags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h2><p><code>[out] pdnDevInst</code></p><p>调用方提供的指向此函数检索的父节点的设备实例句柄的指针。 检索到的句柄绑定到本地计算机。</p><p><code>[in] dnDevInst</code></p><p>绑定到本地计算机的调用方提供的设备实例句柄。</p><p><code>[in] ulFlags</code></p><p>未使用，必须为零。</p><h2 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果操作成功，函数将返回CR_SUCCESS。 否则，它将返回</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">Cfgmgr32.h</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">中定义的CR_前缀错误代码之一。</font></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a><font style="color:rgb(22, 22, 22);">备注</font></h2><p><font style="color:rgb(22, 22, 22);">有关使用绑定到本地计算机的设备实例句柄的信息，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_child">CM_Get_Child</a><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="要求-2"><a href="#要求-2" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">在 Microsoft Windows 2000 及更高版本的 Windows 中可用。</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">通用</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">cfgmgr32.h (包括 Cfgmgr32.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Cfgmgr32.lib;Windows 10 上的 OneCoreUAP.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">CfgMgr32.dll</font></td></tr></tbody></table><h2 id="另请参阅-2"><a href="#另请参阅-2" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_child">CM_Get_Child</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_parent_ex">CM_Get_Parent_Ex</a></p><hr><h1 id="SetupDiGetDeviceInterfaceDetailW-函数-setupapi-h"><a href="#SetupDiGetDeviceInterfaceDetailW-函数-setupapi-h" class="headerlink" title="SetupDiGetDeviceInterfaceDetailW 函数 (setupapi.h)"></a><font style="color:rgb(38, 38, 38);">SetupDiGetDeviceInterfaceDetailW 函数 (setupapi.h)</font></h1><p><strong><font style="color:rgb(22, 22, 22);">SetupDiGetDeviceInterfaceDetail</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数返回有关设备接口的详细信息。</font></p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiGetDeviceInterfaceDetailW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            HDEVINFO                           DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            PSP_DEVICE_INTERFACE_DATA          DeviceInterfaceData,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]            DWORD                              DeviceInterfaceDetailDataSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PDWORD                             RequiredSize,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PSP_DEVINFO_DATA                   DeviceInfoData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h2><p><code>[in] DeviceInfoSet</code></p><p>指向 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-information-sets">设备信息集</a> 的指针，其中包含要检索其详细信息的接口。 此句柄通常由 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsw">SetupDiGetClassDevs</a> 返回。</p><p><code>[in] DeviceInterfaceData</code></p><p>指向 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/ns-setupapi-sp_device_interface_data">SP_DEVICE_INTERFACE_DATA</a> 结构的指针，该结构指定要检索其详细信息 <em>的 DeviceInfoSet</em> 中的接口。 此类型的指针通常由 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdienumdeviceinterfaces">SetupDiEnumDeviceInterfaces</a> 返回。</p><p><code>[out, optional] DeviceInterfaceDetailData</code></p><p>指向 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/setupapi/ns-setupapi-sp_device_interface_detail_data_a">SP_DEVICE_INTERFACE_DETAIL_DATA</a> 结构的指针，用于接收有关指定接口的信息。 此参数是可选的，可以为 <strong>NULL</strong>。 如果 <em>DeviceInterfaceDetailSize</em> 为零，此参数必须为 <strong>NULL</strong>。 如果指定此参数，调用方必须在调用此函数之前将 <em>DeviceInterfaceDetailData.cbSize</em> 设置为 <strong>sizeof</strong> (SP_DEVICE_INTERFACE_DETAIL_DATA) 。 <strong>cbSize</strong> 成员始终包含数据结构的固定部分的大小，而不是反映末尾可变长度字符串的大小。</p><p><code>[in] DeviceInterfaceDetailDataSize</code></p><p><em>DeviceInterfaceDetailData</em> 缓冲区的大小。 缓冲区必须至少 <strong>(偏移量</strong> （ (SP_DEVICE_INTERFACE_DETAIL_DATA、 <strong>DevicePath</strong>) + <strong>size 为</strong> (TCHAR) ) 字节）才能包含结构的固定部分和单个 <strong>NULL</strong> 以终止空MULTI_SZ字符串。</p><p>如果 <em>DeviceInterfaceDetailData</em> 为 NULL，此参数必须为 <strong>零</strong>。</p><p><code>[out, optional] RequiredSize</code></p><p>指向 DWORD 类型的变量的指针，该变量接收 <em>DeviceInterfaceDetailData</em> 缓冲区的所需大小。 此大小包括结构的固定部分的大小以及可变长度设备路径字符串所需的字节数。 此参数是可选的，可以为 <strong>NULL</strong>。</p><p><code>[out, optional] DeviceInfoData</code></p><p>指向缓冲区的指针，该缓冲区接收有关支持所请求接口的设备的信息。 调用方必须将 <em>DeviceInfoData.cbSize</em> 设置为 <strong>sizeof</strong> (SP_DEVINFO_DATA) 。 此参数是可选的，可以为 <strong>NULL</strong>。</p><h2 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果函数完成且未出错，</font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetDeviceInterfaceDetail</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">TRUE</font></strong><font style="color:rgb(22, 22, 22);">。 如果函数完成时出现错误，则返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">FALSE</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">，并且可以通过调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">来检索失败的错误代码。</font></p><h2 id="注解-1"><a href="#注解-1" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">使用此函数获取接口的详细信息通常是一个两步过程：</font></p><ol><li><font style="color:rgb(22, 22, 22);">获取所需的缓冲区大小。 使用</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><em><font style="color:rgb(22, 22, 22);">DeviceInterfaceDetailData 指针、DeviceInterfaceDetailDataSize</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">为零和有效的 RequiredSize 变量调用</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetDeviceInterfaceDetail</font></strong><font style="color:rgb(22, 22, 22);">。</font><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">为了响应此类调用，此函数在</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">RequiredSize</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">处返回所需的缓冲区大小，并失败并返回ERROR_INSUFFICIENT_BUFFER</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">。</font></li><li><font style="color:rgb(22, 22, 22);">分配适当大小的缓冲区，然后再次调用函数以获取接口详细信息。</font></li></ol><p><font style="color:rgb(22, 22, 22);">此函数返回的接口详细信息包含可传递给 Win32 函数（如</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea">CreateFile）</a><font style="color:rgb(22, 22, 22);">的设备路径。 请勿尝试分析设备路径符号名称。 设备路径可以在系统启动之间重复使用。</font></p><p><strong><font style="color:rgb(22, 22, 22);">SetupDiGetDeviceInterfaceDetail</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">可用于仅获取</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">DeviceInfoData</font></em><font style="color:rgb(22, 22, 22);">。 如果接口存在，但</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">DeviceInterfaceDetailData</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">，则此函数将失败，</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">返回ERROR_INSUFFICIENT_BUFFER，并且</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">DeviceInfoData</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">结构将填充有关公开接口的设备的信息。</font></p><p>****<strong>备注</strong></p><p>setupapi.h 标头将 SetupDiGetDeviceInterfaceDetail 定义为别名，该别名根据 UNICODE 预处理器常量的定义自动选择此函数的 ANSI 或 Unicode 版本。 将非特定编码别名的使用与非非特定编码的代码混合使用可能会导致不匹配，从而导致编译或运行时错误。 有关详细信息，请参阅 <a href="https://learn.microsoft.com/zh-cn/windows/win32/intl/conventions-for-function-prototypes">函数原型的约定</a>。</p><h2 id="要求-3"><a href="#要求-3" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">在 Microsoft Windows 2000 及更高版本的 Windows 中可用。</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">桌面</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 Setupapi.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Setupapi.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">API 集</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Windows 10版本 10.0.1439 (3 中引入的 ext-ms-win-setupapi-classinstallers-l1-1-2)</font></td></tr></tbody></table><h2 id="另请参阅-3"><a href="#另请参阅-3" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdienumdeviceinterfaces">SetupDiEnumDeviceInterfaces</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsw">SetupDiGetClassDevs</a></p><hr><h1 id="setupDiEnumDeviceInterfaces-函数-setupapi-h"><a href="#setupDiEnumDeviceInterfaces-函数-setupapi-h" class="headerlink" title="setupDiEnumDeviceInterfaces 函数 (setupapi.h)"></a>setupDiEnumDeviceInterfaces 函数 (setupapi.h)</h1><p><strong><font style="color:rgb(22, 22, 22);">SetupDiEnumDeviceInterfaces</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数枚举包含在设备信息集中的设备接口。</font></p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI BOOL <span class="hljs-title">SetupDiEnumDeviceInterfaces</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           HDEVINFO                  DeviceInfoSet,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] PSP_DEVINFO_DATA          DeviceInfoData,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           <span class="hljs-type">const</span> GUID                *InterfaceClassGuid,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD                     MemberIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out]          PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h2><p><code>[in] DeviceInfoSet</code></p><p>指向包含要为其返回信息的设备接口的设备信息 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-information-sets">集</a> 的指针。 此句柄通常由 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsw">SetupDiGetClassDevs</a> 返回。</p><p><code>[in, optional] DeviceInfoData</code></p><p>指向 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/ns-setupapi-sp_devinfo_data">SP_DEVINFO_DATA</a> 结构的指针，该结构指定 <em>DeviceInfoSet</em> 中的设备信息元素。 此参数是可选的，可以为 <strong>NULL</strong>。 如果指定此参数， <strong>SetupDiEnumDeviceInterfaces</strong> 会将枚举限制为指定设备支持的接口。 如果此参数为 <strong>NULL</strong>，则重复调用 <strong>SetupDiEnumDeviceInterfaces</strong> 将返回与 <em>DeviceInfoSet</em> 中的所有设备信息元素关联的接口的相关信息。 此指针通常由 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdienumdeviceinfo">SetupDiEnumDeviceInfo</a> 返回。</p><p><code>[in] InterfaceClassGuid</code></p><p>指向 GUID 的指针，该 GUID 指定所请求接口的设备接口类。</p><p><code>[in] MemberIndex</code></p><p>设备信息集中接口列表中的从零开始的索引。 调用方应先调用此函数，并将 <em>MemberIndex</em> 设置为零，以获取第一个接口。 然后，重复递增 <em>MemberIndex</em> 并检索接口，直到此函数失败且 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> 返回ERROR_NO_MORE_ITEMS。</p><p>如果 <em>DeviceInfoData</em> 指定特定设备，则 <em>MemberIndex</em> 仅相对于该设备公开的接口。</p><p><code>[out] DeviceInterfaceData</code></p><p>指向调用方分配的缓冲区的指针，该缓冲区在成功返回时包含一个标识满足搜索参数的接口的已完成 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/ns-setupapi-sp_device_interface_data">SP_DEVICE_INTERFACE_DATA</a> 结构。 调用方必须设置 <em>DeviceInterfaceData</em>。在调用此函数之前，<strong>cbSize</strong> 为 <strong>sizeof</strong> (SP_DEVICE_INTERFACE_DATA) 。</p><h2 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果函数完成且未出错，</font><strong><font style="color:rgb(22, 22, 22);">SetupDiEnumDeviceInterfaces</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">将返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">TRUE</font></strong><font style="color:rgb(22, 22, 22);">。 如果函数完成但出现错误，则返回</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">FALSE</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">，并且可以通过调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">来检索失败的错误代码。</font></p><h2 id="注解-2"><a href="#注解-2" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">重复调用此函数会返回不同设备接口</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/ns-setupapi-sp_device_interface_data">的SP_DEVICE_INTERFACE_DATA</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">结构。 可以重复调用此函数来获取与特定设备信息元素关联或与所有设备信息元素关联的设备信息集中的接口的相关信息。</font></p><p><em><font style="color:rgb(22, 22, 22);">DeviceInterfaceData</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">指向一个结构，该结构标识请求的设备接口。 若要获取有关接口的详细信息，请调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetdeviceinterfacedetaila">SetupDiGetDeviceInterfaceDetail</a><font style="color:rgb(22, 22, 22);">。 详细信息包括可传递给 Win32 函数的设备接口的名称，如Microsoft Windows SDK文档) 中所述的</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea">CreateFile</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">(以获取接口的句柄。</font></p><p><font style="color:rgb(22, 22, 22);">有关详细信息</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/overview-of-device-interface-classes">，请参阅设备接口类概述</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="要求-4"><a href="#要求-4" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">在 Microsoft Windows 2000 及更高版本的 Windows 中可用。</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">桌面</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 Setupapi.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Setupapi.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">Setupapi.dll</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">API 集</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">ext-ms-win-setupapi-classinstallers-l1-1-2 (在 Windows 10 版本 10.0.14393 中引入)</font></td></tr></tbody></table><h2 id="另请参阅-4"><a href="#另请参阅-4" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdienumdeviceinfo">SetupDiEnumDeviceInfo</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsw">SetupDiGetClassDevs</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetdeviceinterfacedetaila">SetupDiGetDeviceInterfaceDetail</a></p><hr><h1 id="SP-DEVINFO-DATA-结构-setupapi-h"><a href="#SP-DEVINFO-DATA-结构-setupapi-h" class="headerlink" title="SP_DEVINFO_DATA 结构 (setupapi.h)"></a>SP_DEVINFO_DATA 结构 (setupapi.h)</h1><p><strong><font style="color:rgb(22, 22, 22);">SP_DEVINFO_DATA</font></strong><font style="color:rgb(22, 22, 22);">结构定义作为设备信息集成员的设备实例。</font></p><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_SP_DEVINFO_DATA</span> &#123;<br>  DWORD     cbSize;<br>  GUID      ClassGuid;<br>  DWORD     DevInst;<br>  ULONG_PTR Reserved;<br>&#125; SP_DEVINFO_DATA, *PSP_DEVINFO_DATA;<br></code></pre></td></tr></table></figure><h2 id="成员"><a href="#成员" class="headerlink" title="成员"></a><font style="color:rgb(22, 22, 22);">成员</font></h2><p><code>cbSize</code></p><p>SP_DEVINFO_DATA结构的大小（以字节为单位）。 有关更多信息，请参见下面的“备注”部分。</p><p><code>ClassGuid</code></p><p>设备的安装类的 GUID。</p><p><code>DevInst</code></p><p>设备实例的不透明句柄 (也称为 <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/">开发节点</a>) 的句柄。</p><p>某些函数（如 <strong>SetupDi</strong><em>Xxx</em> 函数）采用整个SP_DEVINFO_DATA结构作为输入，以识别设备信息集中的设备。 其他函数（如 <strong>cm</strong>_<em>Xxx</em> 函数（如 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/cfgmgr32/nf-cfgmgr32-cm_get_devnode_status">CM_Get_DevNode_Status</a>）将此 <strong>DevInst</strong> 句柄作为输入。</p><p><code>Reserved</code></p><p>保留。 仅限内部使用。</p><h2 id="注解-3"><a href="#注解-3" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">SP_DEVINFO_DATA结构标识设备信息集中的设备。 例如，当 Windows 向类安装程序和辅助安装程序发送</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/dif-installdevice">DIF_INSTALLDEVICE</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">请求时，它包括设备信息集的句柄和指向指定特定设备的SP_DEVINFO_DATA的指针。 除了 DIF 请求外，此结构还用于某些</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDi</font></strong><em><font style="color:rgb(22, 22, 22);">Xxx</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数。</font></p><p><font style="color:rgb(22, 22, 22);">采用 SP_DEVINFO_DATA 结构作为参数的</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDi</font></strong><em><font style="color:rgb(22, 22, 22);">Xxx</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数验证所提供的结构的</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员是否等于结构的大小（以字节为单位）。 如果未正确为输入参数设置</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员，则函数将失败，并将错误代码设置为 ERROR_INVALID_PARAMETER。 如果未为输出参数正确设置</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员，则函数将失败，并将错误代码设置为 ERROR_INVALID_USER_BUFFER。</font></p><h2 id="要求-5"><a href="#要求-5" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 Setupapi.h)</font></td></tr></tbody></table><h2 id="另请参阅-5"><a href="#另请参阅-5" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/ns-setupapi-sp_devinfo_list_detail_data_a">SP_DEVINFO_LIST_DETAIL_DATA</a></p><hr><h1 id="SP-DEVICE-INTERFACE-DATA-结构-setupapi-h"><a href="#SP-DEVICE-INTERFACE-DATA-结构-setupapi-h" class="headerlink" title="SP_DEVICE_INTERFACE_DATA 结构(setupapi.h)"></a>SP_DEVICE_INTERFACE_DATA 结构(setupapi.h)</h1><p><strong><font style="color:rgb(22, 22, 22);">SP_DEVICE_INTERFACE_DATA</font></strong><font style="color:rgb(22, 22, 22);">结构定义设备信息集中的设备接口。</font></p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_SP_DEVICE_INTERFACE_DATA</span> &#123;<br>  DWORD     cbSize;<br>  GUID      InterfaceClassGuid;<br>  DWORD     Flags;<br>  ULONG_PTR Reserved;<br>&#125; SP_DEVICE_INTERFACE_DATA, *PSP_DEVICE_INTERFACE_DATA;<br></code></pre></td></tr></table></figure><h2 id="成员-1"><a href="#成员-1" class="headerlink" title="成员"></a><font style="color:rgb(22, 22, 22);">成员</font></h2><p><code>cbSize</code></p><p>SP_DEVICE_INTERFACE_DATA结构的大小（以字节为单位）。 有关详细信息，请参见“备注”部分。</p><p><code>InterfaceClassGuid</code></p><p>设备接口所属类的 GUID。</p><p><code>Flags</code></p><p>可以是以下一项或多项：</p><blockquote><h4 id="SPINT-ACTIVE"><a href="#SPINT-ACTIVE" class="headerlink" title="SPINT_ACTIVE"></a>SPINT_ACTIVE</h4><p>接口处于活动状态 (启用) 。</p><h4 id="SPINT-DEFAULT"><a href="#SPINT-DEFAULT" class="headerlink" title="SPINT_DEFAULT"></a>SPINT_DEFAULT</h4><p>接口是设备类的默认接口。</p><h4 id="SPINT-REMOVED"><a href="#SPINT-REMOVED" class="headerlink" title="SPINT_REMOVED"></a>SPINT_REMOVED</h4><p>该接口已删除。</p></blockquote><p><code>Reserved</code></p><p>保留。 请勿使用。</p><h2 id="注解-4"><a href="#注解-4" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">采用 SP_DEVICE_INTERFACE_DATA 结构的实例作为参数的 SetupAPI 函数验证所提供的结构的</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员是否等于结构的大小（以字节为单位）。 如果未正确设置</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员，该函数将失败，并将错误代码设置为 ERROR_INVALID_USER_BUFFER。</font></p><h2 id="要求-6"><a href="#要求-6" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 Setupapi.h)</font></td></tr></tbody></table><h2 id="另请参阅-6"><a href="#另请参阅-6" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/setupapi/ns-setupapi-sp_device_interface_detail_data_a">SP_DEVICE_INTERFACE_DETAIL_DATA</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdicreatedeviceinterfacea">SetupDiCreateDeviceInterface</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdienumdeviceinterfaces">SetupDiEnumDeviceInterfaces</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetdeviceinterfacealias">SetupDiGetDeviceInterfaceAlias</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdiopendeviceinterfacea">SetupDiOpenDeviceInterface</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdisetdeviceinterfacedefault">SetupDiSetDeviceInterfaceDefault</a></p><hr><h1 id="SP-DEVICE-INTERFACE-DETAIL-DATA-A-结构-setupapi-h"><a href="#SP-DEVICE-INTERFACE-DETAIL-DATA-A-结构-setupapi-h" class="headerlink" title="SP_DEVICE_INTERFACE_DETAIL_DATA_A 结构 (setupapi.h)"></a>SP_DEVICE_INTERFACE_DETAIL_DATA_A 结构 (setupapi.h)</h1><p><strong><font style="color:rgb(22, 22, 22);">SP_DEVICE_INTERFACE_DETAIL_DATA</font></strong><font style="color:rgb(22, 22, 22);"> 结构包含设备接口的路径。</font></p><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_SP_DEVICE_INTERFACE_DETAIL_DATA_A</span> &#123;<br>  DWORD cbSize;<br>  CHAR  DevicePath[ANYSIZE_ARRAY];<br>&#125; SP_DEVICE_INTERFACE_DETAIL_DATA_A, *PSP_DEVICE_INTERFACE_DETAIL_DATA_A;<br></code></pre></td></tr></table></figure><h2 id="成员-2"><a href="#成员-2" class="headerlink" title="成员"></a><font style="color:rgb(22, 22, 22);">成员</font></h2><p><code>cbSize</code></p><p>SP_DEVICE_INTERFACE_DETAIL_DATA结构的大小（以字节为单位）。 有关更多信息，请参见下面的“备注”部分。</p><p><code>DevicePath[ANYSIZE_ARRAY]</code></p><p>包含设备接口路径的以 NULL 结尾的字符串。 此<font style="color:rgb(22, 22, 22);">路径可以传递给 Win32 函数，如 </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-createfilea">CreateFile</a><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="注解-5"><a href="#注解-5" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">SP_DEVICE_INTERFACE_DETAIL_DATA结构标识设备信息集中设备接口的路径。</font></p><p><font style="color:rgb(22, 22, 22);">采用 SP_DEVICE_INTERFACE_DETAIL_DATA 结构作为参数的</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDi</font></strong><em><font style="color:rgb(22, 22, 22);">Xxx</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数验证所提供的结构的</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员是否等于结构的大小（以字节为单位）。 如果未为输入参数正确设置</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员，该函数将失败，并将错误代码设置为 ERROR_INVALID_PARAMETER。 如果未为输出参数正确设置</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">cbSize</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">成员，则函数将失败，并将错误代码设置为 ERROR_INVALID_USER_BUFFER。</font></p><p>****<strong>备注</strong></p><p><font style="color:rgb(22, 22, 22);">setupapi.h 标头将 SP_DEVICE_INTERFACE_DETAIL_DATA 定义为别名，该别名根据 UNICODE 预处理器常量的定义自动选择此函数的 ANSI 或 Unicode 版本。 将非特定编码别名与非非特定编码的代码混合使用可能会导致不匹配，从而导致编译或运行时错误。 有关详细信息，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/intl/conventions-for-function-prototypes">函数原型的约定</a><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="要求-7"><a href="#要求-7" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 Setupapi.h)</font></td></tr></tbody></table><h2 id="另请参阅-7"><a href="#另请参阅-7" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetdeviceinterfacedetaila">SetupDiGetDeviceInterfaceDetail</a></p><hr><h1 id="SetupDiGetClassDevs-函数-setupapi-h"><a href="#SetupDiGetClassDevs-函数-setupapi-h" class="headerlink" title="SetupDiGetClassDevs 函数 (setupapi.h)"></a>SetupDiGetClassDevs 函数 (setupapi.h)</h1><p><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数返回包含本地计算机请求的设备信息元素的设备信息</font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-information-sets">集</a><font style="color:rgb(22, 22, 22);">的句柄。</font></p><h2 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a><font style="color:rgb(22, 22, 22);">语法</font></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">WINSETUPAPI HDEVINFO <span class="hljs-title">SetupDiGetClassDevsW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] <span class="hljs-type">const</span> GUID *ClassGuid,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] PCWSTR     Enumerator,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional] HWND       hwndParent,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in]           DWORD      Flags</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a><font style="color:rgb(22, 22, 22);">参数</font></h2><p><code>[in, optional] ClassGuid</code></p><p>指向<a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/overview-of-device-setup-classes">设备安装类或设备</a><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/overview-of-device-interface-classes">接口类</a>的 GUID 的指针。 此指针是可选的，可以为 <strong>NULL</strong>。 有关如何设置 <em>ClassGuid</em> 的详细信息，请参阅以下 <strong>“备注”</strong> 部分。</p><p><code>[in, optional] Enumerator</code></p><p>指向以 NULL 结尾的字符串的指针，该字符串指定：</p><ul><li>即插即用 (PnP) <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/">枚举器的</a>标识符 (ID) 。 此 ID 可以是值的全局唯一标识符 (GUID) 或符号名称。 例如，“PCI”可用于指定 PCI PnP 值。 PnP 值的其他符号名称示例包括“USB”、“PCMCIA”和“SCSI”。</li><li>PnP <a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-instance-ids">设备实例 ID</a>。 指定 PnP 设备实例 ID 时，必须在 Flags 参数中设置DIGCF_DEVICEINTERFACE。</li></ul><p>此指针是可选的，可以为 <strong>NULL</strong>。 如果未使用 <em>枚举</em> 值来选择设备，请将 <em>枚举器</em> 设置为 <strong>NULL</strong></p><p>有关如何设置 <em>枚举器</em> 值的详细信息，请参阅以下 <strong>“备注”</strong> 部分。</p><p><code>[in, optional] hwndParent</code></p><p>顶级窗口的句柄，用于与在设备信息集中安装设备实例关联的用户界面。 此句柄是可选的，可以为 <strong>NULL</strong>。</p><p><code>[in] Flags</code></p><p>DWORD 类型的变量，指定用于筛选添加到设备信息集的设备信息元素的控制选项。 此参数可以是零个或多个以下标志的按位 OR。 有关组合这些标志的详细信息，请参阅以下 <strong>“备注”</strong> 部分。</p><blockquote><h4 id="DIGCF-ALLCLASSES"><a href="#DIGCF-ALLCLASSES" class="headerlink" title="DIGCF_ALLCLASSES"></a>DIGCF_ALLCLASSES</h4><p>返回所有设备安装类或所有设备接口类的已安装设备的列表。</p><h4 id="DIGCF-DEVICEINTERFACE"><a href="#DIGCF-DEVICEINTERFACE" class="headerlink" title="DIGCF_DEVICEINTERFACE"></a>DIGCF_DEVICEINTERFACE</h4><p>返回支持指定设备接口类的设备接口的设备。 如果 <em>Enumerator</em> 参数指定<a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-instance-ids">设备实例 ID</a>，则必须在 <em>Flags</em> 参数中设置此标志。</p><h4 id="DIGCF-DEFAULT"><a href="#DIGCF-DEFAULT" class="headerlink" title="DIGCF_DEFAULT"></a>DIGCF_DEFAULT</h4><p>对于指定的设备接口类，仅返回与系统默认设备接口关联的设备（如果已设置）。</p><h4 id="DIGCF-PRESENT"><a href="#DIGCF-PRESENT" class="headerlink" title="DIGCF_PRESENT"></a>DIGCF_PRESENT</h4><p>仅返回系统中当前存在的设备。</p><h4 id="DIGCF-PROFILE"><a href="#DIGCF-PROFILE" class="headerlink" title="DIGCF_PROFILE"></a>DIGCF_PROFILE</h4><p>仅返回属于当前硬件配置文件的设备。</p></blockquote><h2 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a><font style="color:rgb(22, 22, 22);">返回值</font></h2><p><font style="color:rgb(22, 22, 22);">如果操作成功，</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">将返回</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-information-sets">设备信息集</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">的句柄，该句柄包含与所提供的参数匹配的所有已安装设备。 如果操作失败，函数将返回INVALID_HANDLE_VALUE。 要获得更多的错误信息，请调用 GetLastError。</font></p><h2 id="注解-6"><a href="#注解-6" class="headerlink" title="注解"></a><font style="color:rgb(22, 22, 22);">注解</font></h2><p><font style="color:rgb(22, 22, 22);">当不再需要</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdidestroydeviceinfolist">SetupDiDestroyDeviceInfoList</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">时，</font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">的调用方必须删除返回的设备信息集。</font></p><p><font style="color:rgb(22, 22, 22);">调用</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsexa">SetupDiGetClassDevsEx</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">以检索远程计算机上的类的设备。</font></p><h3 id="设备安装程序类控制选项"><a href="#设备安装程序类控制选项" class="headerlink" title="设备安装程序类控制选项"></a><font style="color:rgb(22, 22, 22);">设备安装程序类控制选项</font></h3><p><font style="color:rgb(22, 22, 22);">使用以下筛选选项来控制</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">是返回所有设备安装类的设备，还是仅返回指定设备安装程序类的设备：</font></p><ul><li><font style="color:rgb(22, 22, 22);">若要返回所有设备安装类的设备，请设置DIGCF_ALLCLASSES标志，并将</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数设置为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">。</font></li><li><font style="color:rgb(22, 22, 22);">若要仅返回特定设备安装类的设备，请不要设置DIGCF_ALLCLASSES，并使用</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">提供设备安装类的 GUID。</font></li></ul><p><font style="color:rgb(22, 22, 22);">此外，可以结合使用以下筛选选项来进一步限制返回的设备：</font></p><ul><li><font style="color:rgb(22, 22, 22);">若要仅返回系统中存在的设备，请设置DIGCF_PRESENT标志。</font></li><li><font style="color:rgb(22, 22, 22);">若要仅返回属于当前硬件配置文件的设备，请设置DIGCF_PROFILE标志。</font></li><li><font style="color:rgb(22, 22, 22);">若要仅返回特定 PnP</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/">枚举器</a><font style="color:rgb(22, 22, 22);">的设备，请使用</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">Enumerator</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数提供枚举器的 GUID 或符号名称</font><em><font style="color:rgb(22, 22, 22);">。</font>__<font style="color:rgb(22, 22, 22);"> </font></em><font style="color:rgb(22, 22, 22);">如果</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">Enumerator</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">，</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">将返回所有 PnP 枚举器的设备。</font></li></ul><h3 id="设备接口类控制选项"><a href="#设备接口类控制选项" class="headerlink" title="设备接口类控制选项"></a><font style="color:rgb(22, 22, 22);">设备接口类控制选项</font></h3><p><font style="color:rgb(22, 22, 22);">使用以下筛选选项来控制</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">是返回支持任何设备接口类的设备还是仅返回支持指定设备接口类的设备：</font></p><ul><li><font style="color:rgb(22, 22, 22);">若要返回支持任何类的设备接口的设备，请设置 DIGCF_DEVICEINTERFACE 标志，设置 DIGCF_ALLCLASSES 标志，然后将</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">设置为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">。 函数向设备信息集添加表示此类设备的设备信息元素，然后向设备信息元素添加包含设备支持的所有设备接口的设备接口列表。</font></li><li><font style="color:rgb(22, 22, 22);">若要仅返回支持指定类的设备接口的设备，请设置 DIGCF_DEVICEINTERFACE 标志并使用</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数提供设备接口类的类 GUID。 函数向设备信息集添加表示此类设备的设备信息元素，然后将指定类的设备接口添加到该设备信息元素的设备接口列表中。</font></li></ul><p><font style="color:rgb(22, 22, 22);">此外，还可以使用以下筛选选项来控制</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">是否仅返回支持设备接口类的系统默认接口的设备：</font></p><ul><li><font style="color:rgb(22, 22, 22);">若要仅返回支持系统默认接口的设备（如果已设置），请为指定的设备接口类设置DIGCF_DEVICEINTERFACE标志，设置DIGCF_DEFAULT标志，并使用</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">提供设备接口类的类 GUID。 函数将表示此类设备的设备信息元素添加到设备信息集，然后将系统默认接口添加到该设备信息元素的设备接口列表。</font></li><li><font style="color:rgb(22, 22, 22);">若要返回支持未指定设备接口类的系统默认接口的设备，请设置DIGCF_DEVICEINTERFACE标志，设置DIGCF_ALLCLASSES标志，设置DIGCF_DEFAULT标志，并将</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">设置为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">。 函数将表示此类设备的设备信息元素添加到设备信息集，然后将系统默认接口添加到该设备信息元素的设备接口列表。</font></li></ul><p><font style="color:rgb(22, 22, 22);">还可以将以下选项与其他选项结合使用，以进一步限制返回的设备：</font></p><ul><li><font style="color:rgb(22, 22, 22);">若要仅返回系统中存在的设备，请设置DIGCF_PRESENT标志。</font></li><li><font style="color:rgb(22, 22, 22);">若要仅返回属于当前硬件配置文件的设备，请设置DIGCF_PROFILE标志。</font></li><li><font style="color:rgb(22, 22, 22);">若要仅返回特定设备，请设置 DIGCF_DEVICEINTERFACE 标志，并使用</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">Enumerator</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数提供设备的</font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-instance-ids">设备实例 ID</a><em><font style="color:rgb(22, 22, 22);">。</font>__<font style="color:rgb(22, 22, 22);"> </font></em><font style="color:rgb(22, 22, 22);">若要包括所有可能的设备，请将</font><em><font style="color:rgb(22, 22, 22);">枚举器</font></em><font style="color:rgb(22, 22, 22);">设置为</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">NULL</font></strong><font style="color:rgb(22, 22, 22);">。</font></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a><font style="color:rgb(22, 22, 22);">示例</font></h4><p><font style="color:rgb(22, 22, 22);">下面是如何使用</font><font style="color:rgb(22, 22, 22);"> </font><strong><font style="color:rgb(22, 22, 22);">SetupDiGetClassDevs</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">函数的一些示例。</font></p><p><strong><font style="color:rgb(22, 22, 22);">示例 1：</font>****<font style="color:rgb(22, 22, 22);"> </font></strong><font style="color:rgb(22, 22, 22);">生成系统中所有设备的列表，包括当前不存在的设备。</font></p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES);<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(22, 22, 22);">示例 2：</font>****<font style="color:rgb(22, 22, 22);"> </font></strong><font style="color:rgb(22, 22, 22);">生成系统中存在的所有设备的列表。</font></p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Handle = SetupDiGetClassDevs(NULL, NULL, NULL, DIGCF_ALLCLASSES | DIGCF_PRESENT);<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(22, 22, 22);">示例 3：</font>****<font style="color:rgb(22, 22, 22);"> </font></strong><font style="color:rgb(22, 22, 22);">从网络适配器设备</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">安装程序类</a><font style="color:rgb(22, 22, 22);">生成系统中存在的所有设备的列表。</font></p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Handle = SetupDiGetClassDevs(&amp;GUID_DEVCLASS_NET, NULL, NULL, DIGCF_PRESENT);<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(22, 22, 22);">示例 4：</font>****<font style="color:rgb(22, 22, 22);"> </font></strong><font style="color:rgb(22, 22, 22);">生成系统中已从存储卷设备接口类启用接口的所有</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/overview-of-device-interface-classes">设备</a><font style="color:rgb(22, 22, 22);">的列表。</font></p><p>复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Handle = SetupDiGetClassDevs(&amp;GUID_DEVINTERFACE_VOLUME, NULL, NULL, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(22, 22, 22);">示例 5：</font>****<font style="color:rgb(22, 22, 22);"> </font></strong><font style="color:rgb(22, 22, 22);">生成系统中存在但不属于任何已知</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/system-defined-device-setup-classes-available-to-vendors">设备安装程序类的所有设备</a><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">的列表，这些设备 (Windows Vista 和更高版本的 Windows) 。</font></p><p><strong><font style="color:rgb(22, 22, 22);">注意</font></strong><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">不能将</font><font style="color:rgb(22, 22, 22);"> </font><em><font style="color:rgb(22, 22, 22);">ClassGuid</font></em><font style="color:rgb(22, 22, 22);"> </font><font style="color:rgb(22, 22, 22);">参数设置为GUID_DEVCLASS_UNKNOWN以检测具有未知安装类的设备。 相反，必须遵循此示例。</font></p><p><font style="color:rgb(22, 22, 22);"> </font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs plain">DeviceInfoSet = SetupDiGetClassDevs(<br>                                    NULL,<br>                                    NULL,<br>                                    NULL,<br>                                    DIGCF_ALLCLASSES | DIGCF_PRESENT);<br><br>ZeroMemory(&amp;DeviceInfoData, sizeof(SP_DEVINFO_DATA));<br>DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);<br>DeviceIndex = 0;<br>    <br>while (SetupDiEnumDeviceInfo(<br>                             DeviceInfoSet,<br>                             DeviceIndex,<br>                             &amp;DeviceInfoData)) &#123;<br>    DeviceIndex++;<br><br>    if (!SetupDiGetDeviceProperty(<br>                                  DeviceInfoSet,<br>                                  &amp;DeviceInfoData,<br>                                  &amp;DEVPKEY_Device_Class,<br>                                  &amp;PropType,<br>                                  (PBYTE)&amp;DevGuid,<br>                                  sizeof(GUID),<br>                                  &amp;Size,<br>                                  0) || PropType != DEVPROP_TYPE_GUID) &#123;<br><br>        Error = GetLastError();<br><br>        if (Error == ERROR_NOT_FOUND) &#123;<br>            \\<br>            \\ This device has an unknown device setup class.<br>            \\<br>            &#125;<br>        &#125;                 <br>    &#125;<br><br>if (DeviceInfoSet) &#123;<br>    SetupDiDestroyDeviceInfoList(DeviceInfoSet);<br>    &#125;<br></code></pre></td></tr></table></figure><p>****<strong>备注</strong></p><p><font style="color:rgb(22, 22, 22);">setupapi.h 标头将 SetupDiGetClassDevs 定义为别名，该别名根据 UNICODE 预处理器常量的定义自动选择此函数的 ANSI 或 Unicode 版本。 将非特定编码别名与非非特定编码的代码混合使用可能会导致不匹配，从而导致编译或运行时错误。 有关详细信息，请参阅</font><font style="color:rgb(22, 22, 22);"> </font><a href="https://learn.microsoft.com/zh-cn/windows/win32/intl/conventions-for-function-prototypes">函数原型的约定</a><font style="color:rgb(22, 22, 22);">。</font></p><h2 id="要求-8"><a href="#要求-8" class="headerlink" title="要求"></a><font style="color:rgb(22, 22, 22);">要求</font></h2><table><thead><tr><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th><th align="left"><font style="color:rgb(22, 22, 22);"> </font></th></tr></thead><tbody><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">最低受支持的客户端</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">在 Microsoft Windows 2000 及更高版本的 Windows 中可用。</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">目标平台</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">DesktopFor universal，call CM_Get_Device_ID_ListFor universal，call CM_Get_Device_Interface_List</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">标头</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">setupapi.h (包括 SetupAPI.h)</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">Library</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">SetupAPI.lib</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">DLL</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">SetupAPI.dll</font></td></tr><tr><td align="left"><strong><font style="color:rgb(22, 22, 22);">API 集</font></strong></td><td align="left"><font style="color:rgb(22, 22, 22);">windows 8 中引入的 ext-ms-win-setupapi-classinstallers-l1-1-0 ()</font></td></tr></tbody></table><h2 id="另请参阅-8"><a href="#另请参阅-8" class="headerlink" title="另请参阅"></a><font style="color:rgb(22, 22, 22);">另请参阅</font></h2><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-information-sets">设备信息集</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows-hardware/drivers/install/device-instance-ids">设备实例 ID</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdicreatedeviceinfolist">SetupDiCreateDeviceInfoList</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdidestroydeviceinfolist">SetupDiDestroyDeviceInfoList</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdienumdeviceinterfaces">SetupDiEnumDeviceInterfaces</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/setupapi/nf-setupapi-setupdigetclassdevsexa">SetupDiGetClassDevsEx</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>USB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VirtualAlloc函数使用总结</title>
    <link href="/2023/11/20/Win32_Api/VirtualAlloc%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/20/Win32_Api/VirtualAlloc%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>如果我们的程序需要动态内存的话，则迟早会调用Win32函数VirtualAlloc。但是程序也可以不调用VirtualAlloc，而是直接调用Windows堆函数或者CRT堆函数。不过，知道VirtualAlloc如何工作，可以帮助我们更好地理解这些调用函数。</p><p>首先，必须知道保留(Reserved)内存和占用（Committed）内存的含义。当内存放保留时，一段连续虚拟地址空间被留出。例如，假如我们的程序要使用5 -MB内存块（称为区域），但并不是要马上全部使用，则我们可以调用VirtualAlloc函数，使用MEM_RESERVE分配类型参数。Windows会以64 KB为边界计算该区域的起始地址，并防止进程在同一个范围内为其他内存保留。我们可以指定区域的起始地址，但更常见的是让Windows为区域分配地址。此时除了地址分配外，其他什么也没发生。没有RAM被分配，也没有交换文件空间被保留出来。</p><p>当我们对内存的需求更迫切时，我们可以再次调用函数VirtualAlloc来占用被保留的内存，调用时使用MEM_COMMIT分配类型参数。现在，区域的起始和结束地址都被计算到4KB边界，对应的交换文件页和所要求的页表被留出来。内存块可以被指定为只读或者可读写。然而，仍然没有RAM被分配；只有当程序访问这部分内存时RAM内存才会被真正分配。如果在此之前内存没有被保留，那就不会有问题；如果在此之前内存被占用了的话，也不会有问题。所以原则是，在使用内存之前一定要先占用。</p><p>我们可以调用VirtualFree函数“收回”(decommit)占用的内存，使指定的页回到保留的状态。VirtualFree也能够释放保留的内存区域，但我们必须指定其基地址，这个基地址是在前面调用VirtualAlloc保留内存时获得的。</p><p><strong>什么时候才要用到VirtualAlloc</strong></p><p>在没有C运行库可用的时候，要用VirtualAlloc来申请内存。另外，VirtualAlloc还可对申请的内存有许多的控制。</p><p>1、可以保留地址空间但不是及分配内存，在需要的时候再分配；</p><p>2、可以声明分配的内存不使用分页；</p><p>3、可以指定内存在尽可能高的地址上分配；</p><p>4、指定内存的读、写、执行属性和内存保护；</p><p>5、禁止所分配内存被高速缓存。</p><p>我的理解是在 malloc,new的内部实际上还是调用了virtualalloc，virtualalloc是可以自己控制页面的保留，提交，释放的实际的。实际上我们申请的内存没有使用的时候，都是被放在内存页面中，在使用的时候才会被切换到真正的物理存储器里。对于c++程序员来说 一般情况使用malloc,new就好了，除非一开始就想给自己保留一大片空间。</p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows核心编程</title>
    <link href="/2023/11/20/Win32_Api/Windows%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/11/20/Win32_Api/Windows%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/column/7091613740176506917">https://juejin.cn/column/7091613740176506917</a></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows环境下提升进程的权限</title>
    <link href="/2023/11/15/Win32_Api/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%8F%90%E5%8D%87%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%9D%83%E9%99%90/"/>
    <url>/2023/11/15/Win32_Api/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%8F%90%E5%8D%87%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p><font style="color:rgb(77, 77, 77);"></font></p><p><font style="color:rgb(77, 77, 77);">有时候我们需要对进程的权限进行提升，从而使进程能进行某种操作，如打开系统进程等等。<br></font><font style="color:rgb(77, 77, 77);">在Windows环境下，进程权限的种类定义如下（定义在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">winnt.h</font><font style="color:rgb(77, 77, 77);">）：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_CREATE_TOKEN_NAME                         TEXT(<span class="hljs-string">&quot;SeCreateTokenPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_ASSIGNPRIMARYTOKEN_NAME                   TEXT(<span class="hljs-string">&quot;SeAssignPrimaryTokenPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_LOCK_MEMORY_NAME                          TEXT(<span class="hljs-string">&quot;SeLockMemoryPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_INCREASE_QUOTA_NAME                       TEXT(<span class="hljs-string">&quot;SeIncreaseQuotaPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_UNSOLICITED_INPUT_NAME                    TEXT(<span class="hljs-string">&quot;SeUnsolicitedInputPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_MACHINE_ACCOUNT_NAME                      TEXT(<span class="hljs-string">&quot;SeMachineAccountPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_TCB_NAME                                  TEXT(<span class="hljs-string">&quot;SeTcbPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_SECURITY_NAME                             TEXT(<span class="hljs-string">&quot;SeSecurityPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_TAKE_OWNERSHIP_NAME                       TEXT(<span class="hljs-string">&quot;SeTakeOwnershipPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_LOAD_DRIVER_NAME                          TEXT(<span class="hljs-string">&quot;SeLoadDriverPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_SYSTEM_PROFILE_NAME                       TEXT(<span class="hljs-string">&quot;SeSystemProfilePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_SYSTEMTIME_NAME                           TEXT(<span class="hljs-string">&quot;SeSystemtimePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_PROF_SINGLE_PROCESS_NAME                  TEXT(<span class="hljs-string">&quot;SeProfileSingleProcessPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_INC_BASE_PRIORITY_NAME                    TEXT(<span class="hljs-string">&quot;SeIncreaseBasePriorityPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_CREATE_PAGEFILE_NAME                      TEXT(<span class="hljs-string">&quot;SeCreatePagefilePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_CREATE_PERMANENT_NAME                     TEXT(<span class="hljs-string">&quot;SeCreatePermanentPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_BACKUP_NAME                               TEXT(<span class="hljs-string">&quot;SeBackupPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_RESTORE_NAME                              TEXT(<span class="hljs-string">&quot;SeRestorePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_SHUTDOWN_NAME                             TEXT(<span class="hljs-string">&quot;SeShutdownPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_DEBUG_NAME                                TEXT(<span class="hljs-string">&quot;SeDebugPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_AUDIT_NAME                                TEXT(<span class="hljs-string">&quot;SeAuditPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_SYSTEM_ENVIRONMENT_NAME                   TEXT(<span class="hljs-string">&quot;SeSystemEnvironmentPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_CHANGE_NOTIFY_NAME                        TEXT(<span class="hljs-string">&quot;SeChangeNotifyPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_REMOTE_SHUTDOWN_NAME                      TEXT(<span class="hljs-string">&quot;SeRemoteShutdownPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_UNDOCK_NAME                               TEXT(<span class="hljs-string">&quot;SeUndockPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_SYNC_AGENT_NAME                           TEXT(<span class="hljs-string">&quot;SeSyncAgentPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_ENABLE_DELEGATION_NAME                    TEXT(<span class="hljs-string">&quot;SeEnableDelegationPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_MANAGE_VOLUME_NAME                        TEXT(<span class="hljs-string">&quot;SeManageVolumePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_IMPERSONATE_NAME                          TEXT(<span class="hljs-string">&quot;SeImpersonatePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_CREATE_GLOBAL_NAME                        TEXT(<span class="hljs-string">&quot;SeCreateGlobalPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_TRUSTED_CREDMAN_ACCESS_NAME               TEXT(<span class="hljs-string">&quot;SeTrustedCredManAccessPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_RELABEL_NAME                              TEXT(<span class="hljs-string">&quot;SeRelabelPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_INC_WORKING_SET_NAME                      TEXT(<span class="hljs-string">&quot;SeIncreaseWorkingSetPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_TIME_ZONE_NAME                            TEXT(<span class="hljs-string">&quot;SeTimeZonePrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_CREATE_SYMBOLIC_LINK_NAME                 TEXT(<span class="hljs-string">&quot;SeCreateSymbolicLinkPrivilege&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME    TEXT(<span class="hljs-string">&quot;SeDelegateSessionUserImpersonatePrivilege&quot;</span>)</span><br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">提升进程权限的流程如下：</font></p><ol><li><font style="color:rgba(0, 0, 0, 0.75);">使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">OpenProcessToken</font><font style="color:rgba(0, 0, 0, 0.75);">获取需要提升权限的进程的“令牌”。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">LookupPrivilegeValue</font><font style="color:rgba(0, 0, 0, 0.75);">函数，根据权限的“名称字符串”查找到权限在对应系统上的LUID。同一个权限在不同系统上的LUID不同。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">AdjustTokenPrivileges</font><font style="color:rgba(0, 0, 0, 0.75);">函数，向指定进程的“令牌”添加或删除权限。</font></li></ol><p><font style="color:rgb(77, 77, 77);">将上面流程封装到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">EnablePrivilege</font><font style="color:rgb(77, 77, 77);">函数，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">szPrivilege</font><font style="color:rgb(77, 77, 77);">传入权限名称字符串，添加权限时</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">fEnable</font><font style="color:rgb(77, 77, 77);">传</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TRUE</font><font style="color:rgb(77, 77, 77);">, 移除权限时</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">fEnable</font><font style="color:rgb(77, 77, 77);">传</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">FALSE</font><font style="color:rgb(77, 77, 77);">：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">EnablePrivilege</span><span class="hljs-params">(LPCTSTR szPrivilege, BOOL fEnable)</span> </span>&#123;<br>    BOOL fOk = FALSE;<br>    HANDLE hToken = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">OpenProcessToken</span>(<span class="hljs-built_in">GetCurrentProcess</span>(), TOKEN_ADJUST_PRIVILEGES, &amp;hToken)) &#123;<br>        TOKEN_PRIVILEGES tp;<br>        tp.PrivilegeCount = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">LookupPrivilegeValue</span>(<span class="hljs-literal">NULL</span>, szPrivilege, &amp;tp.Privileges[<span class="hljs-number">0</span>].Luid);<br>        tp.Privileges-&gt;Attributes = fEnable ? SE_PRIVILEGE_ENABLED : <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">AdjustTokenPrivileges</span>(hToken, FALSE, &amp;tp, <span class="hljs-built_in">sizeof</span>(TOKEN_PRIVILEGES), <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        fOk = (<span class="hljs-built_in">GetLastError</span>() == ERROR_SUCCESS);<br><br>        <span class="hljs-built_in">CloseHandle</span>(hToken);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> fOk;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用户界面特权隔离</title>
    <link href="/2023/11/15/Win32_Api/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%89%B9%E6%9D%83%E9%9A%94%E7%A6%BB/"/>
    <url>/2023/11/15/Win32_Api/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%89%B9%E6%9D%83%E9%9A%94%E7%A6%BB/</url>
    
    <content type="html"><![CDATA[<p>写这篇文章源于本人在开发过程中遇到向某个进程发送消息失败而起。</p><h2 id="一、用户界面特权隔离"><a href="#一、用户界面特权隔离" class="headerlink" title="一、用户界面特权隔离"></a>一、用户界面特权隔离</h2><p>在早期的Windows操作系统中，在同一用户下运行的所有进程有着相同的安全等级，拥有相同的权限。例如，一个进程可以自由地发送一个Windows消息到另外一个进程的窗口。从Windows Vista开始，当然也包括Windows 7、Windows 10，对于某些Windows消息，这一方式再也行不通了。进程(或者其他的对象)开始拥有一个新的属性——特权等级(Privilege Level)。一个特权等级较低的进程不再可以向一个特权等级较高的进程发送消息，虽然他们在相同的用户权限下运行。这就是所谓的用户界面特权隔离(User Interface Privilege Isolation ，UIPI)。</p><p>引入UIPI的最大目的是为了防止恶意程序发送消息给那些拥有较高权限的窗口，以对其进行攻击，从而获取较高的权限等等。在计算机系统中，这是一种维护系统安全的合适方式。</p><h2 id="二、UIPI的运行机制"><a href="#二、UIPI的运行机制" class="headerlink" title="二、UIPI的运行机制"></a>二、UIPI的运行机制</h2><p>在Windows 7中，当UAC(User Account Control)启用的时候，UIPI的运行可以得到最明显的体现。在UAC中，当一个管理员用户登录系统后，操作系统会创建两个令牌对象(Token Object)：一个是管理员令牌，拥有大多数特权(类似于Windows Vista之前的System中的用户)，而另一个是经过过滤后的简化版本，只拥有普通用户的权限。</p><p>默认情况下，以普通用户权限启动的进程拥有普通特权等级【UIPI的等级划分为低等级(low)，普通(normal)，高等级(high)，系统(system)】。同样的，以管理员权限运行的进程，例如，用户右键单击选择“以管理员身份运行”或者是通过添加“runas”参数调用ShellExecute运行的进程，这样的进程就相应地拥有一个较高(high)的特权等级。</p><p>这将导致系统会运行两种不同类型、不同特权等级的进程(当然，从技术上讲这两个进程都是在同一用户下)。我们可以使用Windows Sysinternals工具集中的进程浏览器(Process Explorer)查看各个进程的特权等级。</p><p><img src="/2023/11/15/Win32_Api/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E7%89%B9%E6%9D%83%E9%9A%94%E7%A6%BB/image-0.png"></p><p>所以，当你发现你的进程之间Windows消息通信发生问题时，不妨使用进程浏览器查看一下两个进程之间是否有合适的特权等级。</p><h2 id="三、UIPI所带来的限制"><a href="#三、UIPI所带来的限制" class="headerlink" title="三、UIPI所带来的限制"></a>三、UIPI所带来的限制</h2><p>正如我们前文所说，等级的划分，是为了防止以下犯上。所以，有了用户界面特权隔离，一个运行在较低特权等级的应用程序的行为就受到了诸多限制，它不可以进行如下操作：</p><ul><li>验证由较高特权等级进程创建的窗口句柄</li><li>通过调用SendMessage和PostMessage向由较高特权等级进程创建的窗口发送Windows消息</li><li>使用线程钩子处理较高特权等级进程</li><li>使用普通钩子(SetWindowsHookEx)监视较高特权等级进程</li><li>向一个较高特权等级进程执行DLL注入</li></ul><p>但是，一些特殊Windows消息是被容许的，因为这些消息对进程的安全性没有太大影响。这些Windows消息包括：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-number">0x000</span> - WM_NULL<br><span class="hljs-number">0x003</span> - WM_MOVE<br><span class="hljs-number">0x005</span> - WM_SIZE<br><span class="hljs-number">0x00D</span> - WM_GETTEXT<br><span class="hljs-number">0x00E</span> - WM_GETTEXTLENGTH<br><span class="hljs-number">0x033</span> - WM_GETHOTKEY<br><span class="hljs-number">0x07F</span> - WM_GETICON<br><span class="hljs-number">0x305</span> - WM_RENDERFORMAT<br><span class="hljs-number">0x308</span> - WM_DRAWCLIPBOARD<br><span class="hljs-number">0x30D</span> - WM_CHANGECBCHAIN<br><span class="hljs-number">0x31A</span> - WM_THEMECHANGED<br><span class="hljs-number">0x313</span>, <span class="hljs-number">0x31B</span> (WM_???)<br></code></pre></td></tr></table></figure><h2 id="四、修复UIPI问题"><a href="#四、修复UIPI问题" class="headerlink" title="四、修复UIPI问题"></a>四、修复UIPI问题</h2><p>基于Windows Vista之前的操作系统行为所设计的应用程序，可能希望Windows消息能够在进程之间自由的传递，以完成一些特殊的工作。当这些应用程序在Windows 7&#x2F;10上运行时，因为UIPI机制，这种消息传递被阻断了，应用程序就会遇到兼容性问题。</p><p>为了解决这个问题，Windows Vista引入了新的API函数<strong>ChangeWindowMessageFilter</strong>和<strong>ChangeWindowMessageFilterEx</strong>。利用这2个函数，我们可以添加或者删除能够通过特权等级隔离的Windows消息。这就像拥有较高特权等级的进程，设置了一个过滤器，被允许通过的Windows消息都将被添加到这个过滤器的白名单，只有在这个白名单上的消息才允许传递进来。</p><p>下面对添加&#x2F;移除白名单功能进行了简单封装（<strong>UIPIMsgFilter</strong>函数），该函数可以针对特定的窗体添加、移除消息白名单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">PPX_API BOOL <span class="hljs-title">UIPIMsgFilter</span><span class="hljs-params">(HWND hWnd, UINT uMessageID, BOOL bAllow)</span> </span>&#123;<br>    OSVERSIONINFO VersionTmp;<br>    VersionTmp.dwOSVersionInfoSize = <span class="hljs-built_in">sizeof</span>(OSVERSIONINFO);<br>    <span class="hljs-built_in">GetVersionEx</span>(&amp;VersionTmp);<br>    BOOL res = FALSE;<br><br>    <span class="hljs-keyword">if</span> (VersionTmp.dwMajorVersion &gt;= <span class="hljs-number">6</span>) &#123; <span class="hljs-comment">// vista above.</span><br>        <span class="hljs-built_in">BOOL</span>(WINAPI * pfnChangeMessageFilterEx)(HWND, UINT, DWORD, PCHANGEFILTERSTRUCT);<br>        <span class="hljs-built_in">BOOL</span>(WINAPI * pfnChangeMessageFilter)(UINT, DWORD);<br><br>        CHANGEFILTERSTRUCT filterStatus;<br>        filterStatus.cbSize = <span class="hljs-built_in">sizeof</span>(CHANGEFILTERSTRUCT);<br><br>        HINSTANCE hlib = <span class="hljs-built_in">LoadLibrary</span>(_T(<span class="hljs-string">&quot;user32.dll&quot;</span>));<br><br>        <span class="hljs-keyword">if</span> (hlib != <span class="hljs-literal">NULL</span>) &#123;<br>            (FARPROC &amp;)pfnChangeMessageFilterEx = <span class="hljs-built_in">GetProcAddress</span>(hlib, <span class="hljs-string">&quot;ChangeWindowMessageFilterEx&quot;</span>);<br><br>            <span class="hljs-keyword">if</span> (pfnChangeMessageFilterEx != <span class="hljs-literal">NULL</span> &amp;&amp; hWnd != <span class="hljs-literal">NULL</span>) &#123;<br>                res = <span class="hljs-built_in">pfnChangeMessageFilterEx</span>(hWnd, uMessageID, (bAllow ? MSGFLT_ADD : MSGFLT_REMOVE), &amp;filterStatus);<br>            &#125;<br><br>            <span class="hljs-comment">// If failed, try again.</span><br>            <span class="hljs-keyword">if</span> (!res) &#123;<br>                (FARPROC &amp;)pfnChangeMessageFilter = <span class="hljs-built_in">GetProcAddress</span>(hlib, <span class="hljs-string">&quot;ChangeWindowMessageFilter&quot;</span>);<br><br>                <span class="hljs-keyword">if</span> (pfnChangeMessageFilter != <span class="hljs-literal">NULL</span>) &#123;<br>                    res = <span class="hljs-built_in">pfnChangeMessageFilter</span>(uMessageID, (bAllow ? MSGFLT_ADD : MSGFLT_REMOVE));<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (hlib != <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">FreeLibrary</span>(hlib);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        res = TRUE;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows平台“路径”相关API汇总</title>
    <link href="/2023/11/14/Win32_Api/Windows%E5%B9%B3%E5%8F%B0%E2%80%9C%E8%B7%AF%E5%BE%84%E2%80%9D%E7%9B%B8%E5%85%B3API%E6%B1%87%E6%80%BB/"/>
    <url>/2023/11/14/Win32_Api/Windows%E5%B9%B3%E5%8F%B0%E2%80%9C%E8%B7%AF%E5%BE%84%E2%80%9D%E7%9B%B8%E5%85%B3API%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">#include &lt;Shlwapi.h&gt;<br>#pragma comment(lib, &quot;shlwapi.lib&quot;)<br></code></pre></td></tr></table></figure><h3 id="路径截断与合并函数"><a href="#路径截断与合并函数" class="headerlink" title="路径截断与合并函数"></a><font style="color:rgb(79, 79, 79);">路径截断与合并函数</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">PathRemoveArgs                去除路径后面的参数<br>PathRemoveBackslash           去除路径最后的反斜杠“\”<br>PathAddBackslash              在路径最后加上反斜杠“\”<br>PathRemoveBlanks              去除路径前后的空格<br>PathAddExtension              在文件路径后面加上扩展名<br>PathRemoveExtension           去除文件路径扩展名<br>PathRenameExtension           更改文件路径扩展名<br>PathRemoveFileSpec            去除文件名，得到目录<br>PathUnquoteSpaces             去除路径中的首尾引号<br>PathQuoteSpaces               判断路径中是否有空格，有的话，就是用“”引号把整个路径包含起来<br>PathAppend                    将一个路径追加到另一个路径后面<br>PathCombine                   合并两个路径<br>PathSkipRoot                  去掉路径中的磁盘符或UNC部分。<br>PathStripPath                 去掉路径中的目录部分，得到文件名。<br>PathStripToRoot               去掉路径的文件部分，得到根目录。<br>PathCompactPath               根据像素值生成符合长度的路径。<br>                              如原始路径：          C:\path1\path2\sample.txt<br>                              根据120像素截断后为：  C:\pat...\sample.txt<br>                              根据25像素截断后为:   ...\sample.txt<br><br>PathCompactPathEx             根据字符个数来生成符合长度的路径。<br>PathSetDlgItemPath            将路径数据设置到对话框的子控件上。<br>PathUndecorate                去除路径中的修饰 <br>PathUnExpandEnvStrings        将路径中部分数据替换为系统环境变量格式<br></code></pre></td></tr></table></figure><h3 id="路径查找比较函数"><a href="#路径查找比较函数" class="headerlink" title="路径查找比较函数"></a><font style="color:rgb(79, 79, 79);">路径查找比较函数</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">PathFindOnPath                从路径中查找路径<br>PathFindExtension             查找路径的扩展名<br>PathFindFileName              获取路径的文件名<br>PathFindNextComponent         查找匹配路径（不太熟悉）<br>PathFindSuffixArray           查找给定的文件名是否有给定的后缀。<br>PathGetArgs                   获取路径参数<br>PathGetCharType               获取路径字符类型<br>PathGetDriveNumber            根据逻辑盘符返回驱动器序号<br></code></pre></td></tr></table></figure><h3 id="路径转换函数"><a href="#路径转换函数" class="headerlink" title="路径转换函数"></a><font style="color:rgb(79, 79, 79);">路径转换函数</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plain">PathRelativePathTo            创建一个路径到另一个路径的相对路径。<br>PathResolve                   将一个相对路径或绝对路径转换为一个合格的路径<br>PathCanonicalize              规范化路径。将格式比较乱的路径整理成规范的路径格式。<br>PathBuildRoot                 根据给定的磁盘序号创建根目录路径<br>CreateDirectory               创建目录<br>GetShortPathName              将长路径转为8.3格式的短路径格式<br>GetLongPathName               将短路径格式转为长路径。<br>PathGetShortPath              将长路径转为短路径格式（8.3格式）<br>PathCreateFromUrl             将URL路径转为MS-DOS格式<br>PathMakePretty                把路径全部转为小写，增加可读性。<br>PathMakeSystemFolder          给路径增加系统属性<br>PathUnmakeSystemFolder        去除路径中的系统属性。<br>PathMakeUniqueName            从模板创建统一的路径格式<br>PathProcessCommand            生成一个可执行的路径，比如有参数的，会自动将路径用“”包含，这在ShellExecute中比较有用。<br></code></pre></td></tr></table></figure><h3 id="路径验证函数"><a href="#路径验证函数" class="headerlink" title="路径验证函数"></a><font style="color:rgb(79, 79, 79);">路径验证函数</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">PathCleanupSpec               去除路径中不合法的字符<br>PathCommonPrefix              比较并提取两个路径相同的前缀<br>PathFileExists                验证路径是否存在<br>PathMatchSpec                 判断路径是否匹配制定的扩展名。<br>PathIsDirectory               判断路径是否是一个有效的目录<br>PathIsFileSpec                验证路径是否一个文件名（有可能是一个路径）<br>PathIsExe                     验证路径是否是可执行文件。注意：不仅仅是.exe，还有.bat，.com，.src等<br>PathIsRoot                    路径是否为根路径<br>PathIsRelative                判断路径是否是相对路径<br>PathIsContentType             检测文件是否为制定类型。<br>                              例如：PathIsContentType( “hello.txt” , “text/plain” ) 返回TRUE<br>　                                  PathIsContentType( “hello.txt” , “image/gif” ) 返回FALSE<br>PathIsHTMLFile                判断路径是否是html文件类型——根据系统注册类型判断。<br>PathIsLFNFileSpec             判断路径是否是长路径格式<br>PathIsNetworkPath             判断路径是否是一个网络路径。<br>PathIsPrefix                  判断路径是否含有指定前缀<br>PathIsSameRoot                判断路径是否有相同根目录<br>PathIsSlow                    判断路径是否是一个高度延迟的网络连接<br>PathIsSystemFolder            判断路径是否有系统属性（属性可以自己设定）<br>PathIsUNC                     路径是否是UNC格式（网络路径）<br>PathIsUNCServer               路径是否是UNC服务器<br>PathIsUNCServerShare          路径是否仅仅是UNC的共享路径格式<br>PathIsURL                     路径是否是http格式。<br>PathYetAnotherMakeUniqueName  基于已存在的文件，自动创建一个唯一的文件名。比较有用，比如存在“新建文件”，此函数会创建文件名“新建文件夹 (2)”。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows的消息机制</title>
    <link href="/2023/11/14/Win32_Api/Windows%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/11/14/Win32_Api/Windows%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="一、消息队列"><a href="#一、消息队列" class="headerlink" title="一、消息队列"></a><font style="color:rgb(79, 79, 79);">一、消息队列</font></h3><p><font style="color:rgb(77, 77, 77);">首先我们要明确一个观点：</font><strong><font style="color:rgb(77, 77, 77);">窗口是和线程相关联的，消息队列也是和线程相关联的，这个线程无论是主线程还是子线程</font></strong><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">当一个线程被创建时，系统假定该线程不会被用于任何与用户界面相关的任务，所以不会为它分配相应的资源（如消息队列等），因为这样可以减少线程对系统资源的占用。</font></p><p><font style="color:rgb(77, 77, 77);">但是，一旦这个线程调用一个与图形用户界面有关的函数（例如检查它的消息队列或建立一个窗口），系统就会为该线程分配一些额外的资源，以便它能够执行与用户界面有关的任务。特别是，系统会分配一个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构，并将这个数据结构与线程关联起来。</font></p><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构是微软内部的、没有被公开的数据结构，我们无法找到这个结构体的准确的定义。但从其他文档中可以得知，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构包含：</font></p><ul><li><font style="color:rgba(0, 0, 0, 0.75);">一组成员变量，利用这组成员，线程可以认为它是在自己独占的环境中运行。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">登记消息队列（posted-message queue）</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">发送消息队列（ send-message queue）</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">应答消息队列（ reply -message queue）</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">虚拟输入队列（virtualized-input queue）</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">唤醒标志（wake flag）</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">用来描述线程局部输入状态的若干变量。</font></li></ul><p><img src="/2023/11/14/Win32_Api/Windows%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/image-0.png"></p><p><font style="color:rgb(77, 77, 77);">上图描述了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构中的各个成员。线程拥有了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构也就有了各种消息队列。</font></p><h3 id="二、窗口消息处理函数"><a href="#二、窗口消息处理函数" class="headerlink" title="二、窗口消息处理函数"></a><font style="color:rgb(79, 79, 79);">二、窗口消息处理函数</font></h3><p><font style="color:rgb(77, 77, 77);">下面是一个完整的、简单的创建Windows窗体的C++代码：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function">LRESULT CALLBACK <span class="hljs-title">WndProc</span><span class="hljs-params">(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)</span> </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (message) &#123;<br>        <span class="hljs-keyword">case</span> WM_DESTROY:<br>            <span class="hljs-built_in">PostQuitMessage</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">DefWindowProc</span>(hwnd, message, wParam, lParam);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> WINAPI <span class="hljs-title">WinMain</span><span class="hljs-params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="hljs-type">int</span> iCmdShow)</span></span><br><span class="hljs-function"></span>&#123;<br>    WNDCLASS wndclass;<br>    wndclass.style = CS_HREDRAW | CS_VREDRAW;<br>    wndclass.cbClsExtra = <span class="hljs-number">0</span>;<br>    wndclass.cbWndExtra = <span class="hljs-number">0</span>;<br>    wndclass.hInstance = hInstance;<br>    wndclass.hIcon = <span class="hljs-built_in">LoadIcon</span>(<span class="hljs-literal">NULL</span>, IDI_APPLICATION);<br>    wndclass.hCursor = <span class="hljs-built_in">LoadCursor</span>(<span class="hljs-literal">NULL</span>, IDC_ARROW);<br>    wndclass.hbrBackground = (HBRUSH)<span class="hljs-built_in">GetStockObject</span>(WHITE_BRUSH);<br>    wndclass.lpszMenuName = <span class="hljs-literal">NULL</span>;<br>    wndclass.lpfnWndProc = WndProc; <span class="hljs-comment">//设置窗体消息处理函数</span><br>    wndclass.lpszClassName = <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;SimpleWindow&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">RegisterClass</span>(&amp;wndclass)) &#123;  <span class="hljs-comment">//注册窗体类</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;;<br><br>    HWND hwnd = <span class="hljs-built_in">CreateWindow</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;SimpleWindow&quot;</span>), <span class="hljs-comment">// window class name</span><br>    <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;SimpleWindow&quot;</span>),   <span class="hljs-comment">// window caption</span><br>    WS_OVERLAPPEDWINDOW, <span class="hljs-comment">// window style</span><br>    CW_USEDEFAULT,<span class="hljs-comment">// initial x position</span><br>    CW_USEDEFAULT,<span class="hljs-comment">// initial y position</span><br>    CW_USEDEFAULT,<span class="hljs-comment">// initial x size</span><br>    CW_USEDEFAULT,<span class="hljs-comment">// initial y size</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// parent window handle</span><br>    <span class="hljs-literal">NULL</span>, <span class="hljs-comment">// window menu handle</span><br>    hInstance, <span class="hljs-comment">// program instance handle</span><br>    <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-built_in">ShowWindow</span>(hwnd, SW_SHOW);<br><br>    MSG msg;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">GetMessage</span>(&amp;msg, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">TranslateMessage</span>(&amp;msg);<br>        <span class="hljs-built_in">DispatchMessage</span>(&amp;msg);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> msg.wParam;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">上面代码中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WndProc</font><font style="color:rgb(77, 77, 77);">函数就是窗口消息处理函数。消息循环中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">DispatchMessage</font><font style="color:rgb(77, 77, 77);">函数派发消息时，系统就会调用这个函数对消息进行处理。</font></p><h3 id="三、消息循环"><a href="#三、消息循环" class="headerlink" title="三、消息循环"></a><font style="color:rgb(79, 79, 79);">三、消息循环</font></h3><p><font style="color:rgb(77, 77, 77);">消息循环是程序员自己编写的从线程消息队列中循环获取（Get或Peek）消息的循环体，代码大致如下：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">GetMessage</span>(&amp;Msg, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))   <br>&#123;   <br>    <span class="hljs-built_in">TranslateMessage</span>(&amp;Msg);<br>    <span class="hljs-built_in">DispatchMessage</span>(&amp;Msg);<br>&#125;   <br><br></code></pre></td></tr></table></figure><h5 id="3-1-循环何时结束？"><a href="#3-1-循环何时结束？" class="headerlink" title="3.1 循环何时结束？"></a><font style="color:rgb(79, 79, 79);">3.1 循环何时结束？</font></h5><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">GetMessage</font><font style="color:rgb(77, 77, 77);">函数的返回值如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">收到WM_QUIT消息，返回0<br>收到非WM_QUIT消息，返回非0<br>错误，返回-1<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">利用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">GetMessage</font><font style="color:rgb(77, 77, 77);">函数返回值的特性，在收到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WM_QUIT</font><font style="color:rgb(77, 77, 77);">消息之后，消息循环就会结束。</font></p><h5 id="3-2-TranslateMessage"><a href="#3-2-TranslateMessage" class="headerlink" title="3.2 TranslateMessage"></a><font style="color:rgb(79, 79, 79);">3.2 TranslateMessage</font></h5><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TranslateMessage</font><font style="color:rgb(77, 77, 77);">函数的作用就是将虚拟键值信息转换为字符信息。这一步并不是必须的。</font></p><h5 id="3-3-DispatchMessage"><a href="#3-3-DispatchMessage" class="headerlink" title="3.3 DispatchMessage"></a><font style="color:rgb(79, 79, 79);">3.3 DispatchMessage</font></h5><p><font style="color:rgb(77, 77, 77);">将消息派发到窗口的消息处理函数（如第2节中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WndProc</font><font style="color:rgb(77, 77, 77);">函数）。</font></p><h3 id="四、PostMessage"><a href="#四、PostMessage" class="headerlink" title="四、PostMessage"></a><font style="color:rgb(79, 79, 79);">四、PostMessage</font></h3><h4 id="4-1-PostMessage原理"><a href="#4-1-PostMessage原理" class="headerlink" title="4.1 PostMessage原理"></a><font style="color:rgb(79, 79, 79);">4.1 PostMessage原理</font></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">PostMessage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    HWND hwnd,</span></span><br><span class="hljs-params"><span class="hljs-function">    UINT uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">    WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">当一个线程调用这个函数时，系统要确定是哪一个线程建立了用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">hwnd</font><font style="color:rgb(77, 77, 77);">参数标识的窗口。然后系统分配一块内存，将这个消息参数存储在这块内存中，并将这块内存增加到相应线程的登记消息队列中。并且，这个函数还设置</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">QS_POSTMESSAGE</font><font style="color:rgb(77, 77, 77);">唤醒位。</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostMessage</font><font style="color:rgb(77, 77, 77);">函数在登记了消息之后立即返回，调用该函数的线程不知道登记的消息是否被指定窗口的窗口过程所处理。实际上，有可能这个指定的窗口永远不会收到登记的消息。</font></p><h4 id="4-2-PostThreadMessage"><a href="#4-2-PostThreadMessage" class="headerlink" title="4.2 PostThreadMessage"></a><font style="color:rgb(79, 79, 79);">4.2 PostThreadMessage</font></h4><p><font style="color:rgb(77, 77, 77);">还可以通过调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostThreadMessage</font><font style="color:rgb(77, 77, 77);">将消息放置在线程的登记消息队列中。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">PostThreadMessage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD dwThreadId,</span></span><br><span class="hljs-params"><span class="hljs-function">    UINT uMsg,</span></span><br><span class="hljs-params"><span class="hljs-function">    WPARAM wParam,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPARAM lParam</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="4-3-PostQuitMessage"><a href="#4-3-PostQuitMessage" class="headerlink" title="4.3 PostQuitMessage"></a><font style="color:rgb(79, 79, 79);">4.3 PostQuitMessage</font></h4><p><font style="color:rgb(77, 77, 77);">为了终止线程的消息循环，可以调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostQuitMessage</font><font style="color:rgb(77, 77, 77);">函数。</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostQuitMessage</font><font style="color:rgb(77, 77, 77);">函数类似于：<br></font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostThreadMessage(GetCurrentThreadId(), WM_QUIT, nExitCode, 0);</font><font style="color:rgb(77, 77, 77);"><br></font><font style="color:rgb(77, 77, 77);">但是，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostQuitMessage</font><font style="color:rgb(77, 77, 77);">并不实际登记一个消息到任何一个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构的消息队列。只是在内部，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostQuitMessage</font><font style="color:rgb(77, 77, 77);">会设定</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">QS_QUIT</font><font style="color:rgb(77, 77, 77);">唤醒标志，并对</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">THREADINFO</font><font style="color:rgb(77, 77, 77);">结构的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">nExitCode</font><font style="color:rgb(77, 77, 77);">成员进行设置。因为这些操作永远不会失败，所以</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PostQuitMessage</font><font style="color:rgb(77, 77, 77);">的原型被定义成</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VOID</font><font style="color:rgb(77, 77, 77);">返回类型。</font></p><h3 id="五、SendMessage"><a href="#五、SendMessage" class="headerlink" title="五、SendMessage"></a><font style="color:rgb(79, 79, 79);">五、SendMessage</font></h3><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的实现分为2种情况：向本线程的窗口发送消息、向其他线程的窗口发送消息。</font></p><h4 id="5-1-向本线程的窗口发送消息"><a href="#5-1-向本线程的窗口发送消息" class="headerlink" title="5.1 向本线程的窗口发送消息"></a><font style="color:rgb(79, 79, 79);">5.1 向本线程的窗口发送消息</font></h4><p><font style="color:rgb(77, 77, 77);">如果调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的线程向本线程所建立的一个窗口发送一个消息，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的做法很简单：直接调用指定窗口的“窗口消息处理函数”，将其作为一个子例程。当“窗口消息处理函数”完成对消息的处理后，该函数会返回一个值给</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">再将这个值返回给调用线程。</font></p><h4 id="5-2-向其他线程的窗口发送消息"><a href="#5-2-向其他线程的窗口发送消息" class="headerlink" title="5.2 向其他线程的窗口发送消息"></a><font style="color:rgb(79, 79, 79);">5.2 向其他线程的窗口发送消息</font></h4><p><font style="color:rgb(77, 77, 77);">但是，当调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的线程向其他线程所建立的窗口发送消息时，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的内部工作就复杂得多（即使两个线程在同一进程中也是如此）。</font></p><p><font style="color:rgb(77, 77, 77);">Windows要求建立窗口的线程来处理该窗口的消息。所以当一个线程调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">向一个由其他进程所建立的窗口发送一个消息，也就是向其他的线程发送消息，发送线程不可能处理窗口消息，因为发送线程不是运行在接收进程的地址空间中，因此不能访问相应窗口过程的代码和数据。实际上，发送线程要挂起，而由另外的线程处理消息。所以为了向其他线程建立的窗口发送一个窗口消息，系统必须执行下面的动作：</font></p><p><font style="color:rgb(77, 77, 77);">首先，发送的消息要追加到接收线程的发送消息队列，同时还为这个线程设定</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">QS_SENDMESSAGE</font><font style="color:rgb(77, 77, 77);">标志（后面将讨论）。<br></font><font style="color:rgb(77, 77, 77);">其次，如果接收线程已经在执行代码并且没有等待消息（等待消息是指：如调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">GetMessage</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PeekMessage</font><font style="color:rgb(77, 77, 77);">或</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WaitMessage</font><font style="color:rgb(77, 77, 77);">等），发送的消息不会被处理，系统不能中断线程来立即处理消息。当接收进程在等待消息时，系统首先检查线程的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">QS_SENDMESSAGE</font><font style="color:rgb(77, 77, 77);">唤醒标志是否被设定，如果是，系统扫描发送消息队列中消息的列表，并找到第一个发送的消息。有可能在这个队列中有几个发送的消息。例如，几个线程可以同时向一个窗口分别发送消息。当发生这样的事时，系统只是将这些消息追加到接收线程的发送消息队列中。</font></p><p><font style="color:rgb(77, 77, 77);">当接收线程等待消息时，系统从发送消息队列中取出第一个消息并调用适当的窗口过程来处理消息。如果在发送消息队列中再没有消息了，则</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">QS_SENDMESSAGE</font><font style="color:rgb(77, 77, 77);">唤醒标志被关闭。当接收线程处理消息的时候，调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的线程被设置成空闲状态（idle），等待一个消息出现在它的应答消息队列中。在发送的消息处理之后，窗口过程的返回值被登记到发送线程的应答消息队列中。发送线程现在被唤醒，取出包含在应答消息队列中的返回值。这个返回值就是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的返回值。这时，发送线程继续正常执行。</font></p><p><font style="color:rgb(77, 77, 77);">当一个线程等待</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">返回时，它基本上是处于空闲状态。但它可以执行一个任务：如果系统中另外一个线程向一个窗口发送消息，这个窗口是由这个等待</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">返回的线程所建立的，则系统要立即处理发送的消息。在这种情况下，系统不必等待线程去调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">GetMessage</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">PeekMessage</font><font style="color:rgb(77, 77, 77);">或</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WaitMessage</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">由于Windows使用上述方法处理线程之间发送的消息，所以有可能造成线程挂起。例如，当处理发送消息的线程含有错误时，会导致进入死循环。那么对于调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessage</font><font style="color:rgb(77, 77, 77);">的线程会发生什么事呢？它会恢复执行吗？这是否意味着一个程序中的bug会导致另一个程序挂起？答案是确实有这种可能。</font></p><p><font style="color:rgb(77, 77, 77);">利用4个函数—— </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessageTimeOut</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendMessageCallback</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SendNotifyMessage</font><font style="color:rgb(77, 77, 77);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ReplayMessage</font><font style="color:rgb(77, 77, 77);">，可以编写保护性代码防止出现这种情况。</font></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【NOTE】Windows内存体系</title>
    <link href="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/"/>
    <url>/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="一、虚拟地址空间"><a href="#一、虚拟地址空间" class="headerlink" title="一、虚拟地址空间"></a>一、虚拟地址空间</h2><h3 id="1-实模式下内存分配机制"><a href="#1-实模式下内存分配机制" class="headerlink" title="1. 实模式下内存分配机制"></a><font style="color:rgb(79, 79, 79);">1. 实模式下</font>内存<font style="color:rgb(79, 79, 79);">分配机制</font></h3><p><font style="color:rgb(77, 77, 77);">在8086或者80186以前，要运行一个程序，操作系统会把这些程序全都装入内存，程序都是直接运行在物理内存上的，也就是说程序中访问的内存地址都是实际的物理内存地址。当计算机同时运行多个程序时，必须保证这些程序用到的内存总量要小于计算机实际物理内存的大小。</font></p><p><font style="color:rgb(77, 77, 77);">例如某台计算机总的内存大小是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">128M</font><font style="color:rgb(77, 77, 77);"> ，现在同时运行两个程序 A和B ，A需占用内存</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">10M</font><font style="color:rgb(77, 77, 77);"> ， B需占用内存</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">110M</font><font style="color:rgb(77, 77, 77);"> 。计算机在给程序分配内存时会采取这样的方法：先将内存中的前</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">10M</font><font style="color:rgb(77, 77, 77);">分配给程序 A ，接着再从内存中剩余的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">118M</font><font style="color:rgb(77, 77, 77);">中划分出 </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">110M</font><font style="color:rgb(77, 77, 77);">分配给程序B 。这种分配方法虽然可以保证程序A和程序B都能运行，但是这种简单的内存分配策略会导致很多问题：</font></p><ul><li><font style="color:rgb(77, 77, 77);">问题 1 ：进程</font><font style="color:#DF2A3F;">地址空间</font><font style="color:rgb(77, 77, 77);">不隔离。由于程序都是直接访问物理内存，所以恶意程序可以随意修改别的进程的内存数据，以达到破坏的目的。有些非恶意的，但是有 bug 的程序也可能不小心修改了其它程序的内存数据，就会导致其它程序的运行出现异常。这种情况对用户来说是无法容忍的，因为用户希望使用计算机的时候，其中一个任务失败了，至少不能影响其它的任务。</font></li><li><font style="color:rgb(77, 77, 77);">问题 2 ：内存使用效率低。在 A 和 B 都运行的情况下，如果用户又运行了程序 C ，而程序 C 需要 20M 大小的内存才能运行，而此时系统只剩下 8M 的空间可供使用，所以此时系统必须在已运行的程序中选择一个将该程序的数据暂时拷贝到硬盘上，释放出部分空间来供程序 C 使用，然后再将程序 C 的数据全部装入内存中运行。可以想象得到，在这个过程中，有大量的数据在装入装出，导致效率十分低下。</font></li><li><font style="color:rgb(77, 77, 77);">问题 3 ：程序运行的地址不确定。当内存中的剩余空间可以满足程序 C 的要求后，操作系统会在剩余空间中随机分配一段连续的 20M 大小的空间给程序 C 使用，因为是随机分配的，所以程序运行的地址是不确定的。</font></li></ul><hr><h3 id="2-虚拟地址空间介绍"><a href="#2-虚拟地址空间介绍" class="headerlink" title="2. 虚拟地址空间介绍"></a><font style="color:rgb(79, 79, 79);">2. 虚拟地址空间介绍</font></h3><p><font style="color:rgb(77, 77, 77);">操作系统让每个进程都有自己的虚拟地址空间（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Virtual Address Space</font><font style="color:rgb(77, 77, 77);">，简称</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VAS</font><font style="color:rgb(77, 77, 77);">）。以32位进程为例，每个进程都有</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x00000000 ~ 0xFFFFFFFF</font><font style="color:rgb(77, 77, 77);">(4GB)的虚拟地址空间，所以每个进程都可能分配到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x123456</font><font style="color:rgb(77, 77, 77);">地址的内存，但这个地址不能在进程间相互访问。</font></p><p><font style="color:rgb(77, 77, 77);">因为这些都是“虚拟”的地址空间，这些“地址”都不能直接使用，CPU在寻址的时候虽然是按照虚拟地址来寻址的，但是还要通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">MMU</font><font style="color:rgb(77, 77, 77);">(内存管理单元)来将虚拟地址转换为物理存储器（如内存等）上的物理地址：</font></p><p><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-0.jpeg"></p><p><font style="color:rgb(77, 77, 77);">从图上可以看出，进程A和B虽然都有地址</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x123456</font><font style="color:rgb(77, 77, 77);">，但它们分别对应的物理地址不一样。</font></p><hr><h3 id="3-虚拟地址空间分区"><a href="#3-虚拟地址空间分区" class="headerlink" title="3. 虚拟地址空间分区"></a><font style="color:rgb(79, 79, 79);">3. 虚拟地址空间分区</font></h3><p><font style="color:rgb(77, 77, 77);">进程的虚拟地址空间虽然很大，但是它被划分成了很多分区，供Ring3层应用程序使用的用户模式分区并不大（一半不到），如图：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-1.jpeg"></p><p><strong><font style="color:rgb(79, 79, 79);">3.1 空指针赋值分区</font></strong></p><p><font style="color:rgb(77, 77, 77);">这一分区的进程地址空间的范围为：[</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x00000000</font><font style="color:rgb(77, 77, 77);">,</font><font style="color:rgb(77, 77, 77);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x0000FFFF</font><font style="color:rgb(77, 77, 77);">]，总大小为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">64K</font><font style="color:rgb(77, 77, 77);">，保留该分区的目的是为了帮助应用程序员捕获对空指针的赋值。如</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">分配内存失败，就会返回</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">NULL</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">如果进程中的线程试图访问该分区内的内存地址，就会引发访问违规。</font></p><p><strong><font style="color:rgb(79, 79, 79);">3.2 用户模式分区</font></strong></p><p><font style="color:rgb(77, 77, 77);">在Windows中，所有的exe和动态链接库都载入到这一区域。系统同时会把该进程可以访问的所有内存映射文件（后面会介绍）映射到这一分区。</font></p><p><font style="color:rgb(77, 77, 77);">进程无法通过指针来读取、写入、访问其他进程的这一分区，因此一个应用程序破坏另一个应用程序的可能性就非常小了，从而使整个系统更加坚固。</font></p><p><strong><font style="color:rgb(79, 79, 79);">3.3 内核模式分区</font></strong></p><p><font style="color:rgb(77, 77, 77);">内核模式分区是操作系统代码的驻地。与线程调度、内存管理、文件系统支持、网络支持以及设备驱动程序相关的代码都会载入到这一分区。该分区内的代码和数据被完全的保护起来了，如果一个应用程序试图读取或写入位于这一分区的内存地址，会引发访问违规。</font></p><p><font style="color:rgb(77, 77, 77);">驻留在这一分区内的代码为所有进程共有。</font></p><hr><h3 id="4-虚拟地址空间的使用"><a href="#4-虚拟地址空间的使用" class="headerlink" title="4. 虚拟地址空间的使用"></a><font style="color:rgb(79, 79, 79);">4. 虚拟地址空间的使用</font></h3><p><font style="color:rgb(77, 77, 77);">虚拟地址空间的使用涉及到3个概念：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面大小</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">分配粒度</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">预定和调拨</font><font style="color:rgb(77, 77, 77);">。</font></p><p><strong><font style="color:rgb(79, 79, 79);">4.1 页面大小</font></strong></p><p><font style="color:rgb(77, 77, 77);">虚拟地址空间被分成以</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“页面”</font><font style="color:rgb(77, 77, 77);">为单位，因为硬件内存管理单元是以</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面</font><font style="color:rgb(77, 77, 77);">为粒度将虚拟地址转译成物理地址的。</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面</font><font style="color:rgb(77, 77, 77);">的大小根据不同的CPU不而有所不同。x86和x64系统使用的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面</font><font style="color:rgb(77, 77, 77);">大小都是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">4KB</font><font style="color:rgb(77, 77, 77);">，而IA-64系统使用的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面</font><font style="color:rgb(77, 77, 77);">大小是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">8KB</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">IA-64操作系统只能在INTEL安腾系列处理器及AMD部分服务器处理器运行，所以主流市场并不常见</font></p><p><font style="color:rgb(77, 77, 77);">当</font><strong><font style="color:rgb(77, 77, 77);">应用程序</font></strong><font style="color:rgb(77, 77, 77);">在虚拟地址空间分配空间时，系统需要确保分配区域的大小正好是系统</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面</font><font style="color:rgb(77, 77, 77);">大小的整数倍。</font></p><p><strong><font style="color:rgb(79, 79, 79);">4.2 分配粒度</font></strong></p><p><font style="color:rgb(77, 77, 77);">当</font><strong><font style="color:rgb(77, 77, 77);">应用程序</font></strong><font style="color:rgb(77, 77, 77);">在从虚拟地址空间分配空间时，系统会确保所有分配区域的起始地址都是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">分配粒度</font><font style="color:rgb(77, 77, 77);">的整数倍。</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">分配粒度</font><font style="color:rgb(77, 77, 77);">的会根据不同的CPU平台而有所不同，但目前所有的CPU平台的分配粒度都是使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">64KB</font><font style="color:rgb(77, 77, 77);">。也就是说，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">分配的起始地址 &#x3D; 64 * N</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">通过Windows的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">GetSystemInfo</font><font style="color:rgb(77, 77, 77);">函数也可以获得此分配粒度值。</font></p><p><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">上面所说的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">分配粒度</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面大小</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">的限制，只是针对于</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“应用程序”</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">，系统内核自己不存在这样的限制。</font></p><p><strong><font style="color:rgb(79, 79, 79);">4.3 预定和调拨</font></strong></p><p><font style="color:rgb(77, 77, 77);">虚拟地址空间的使用分为2个步骤：</font></p><ol><li><font style="color:rgba(0, 0, 0, 0.75);">预定（reserve）：告诉系统我们要从虚拟地址空间</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">预定</font><font style="color:rgba(0, 0, 0, 0.75);">哪一块区域，系统为我们保留这一块区域。预定的局域的起始地址和大小遵循上面介绍的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">分配粒度</font><font style="color:rgba(0, 0, 0, 0.75);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页面大小</font><font style="color:rgba(0, 0, 0, 0.75);">的要求。因为预定的只是虚拟地址空间，不占用任何其他物理存储器，所以没有形成实质的开销。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">调拨（commit）：预定的区域还不能使用，我们还需要为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">预定</font><font style="color:rgba(0, 0, 0, 0.75);">的区域从</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页交换文件</font><font style="color:rgba(0, 0, 0, 0.75);">中</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">调拨</font><font style="color:rgba(0, 0, 0, 0.75);">存储器，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">调拨</font><font style="color:rgba(0, 0, 0, 0.75);">之后我们才能使用该区域。<br></font><font style="color:rgba(0, 0, 0, 0.75);">至于为什么要从</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页交换文件</font><font style="color:rgba(0, 0, 0, 0.75);">中调拨存储器？ </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页交换文件</font><font style="color:rgba(0, 0, 0, 0.75);">如何与物理内存之间交互？下一篇文章</font><a href="http://blog.csdn.net/china_jeffery/article/details/79611715">《Windows内存体系（2） – 虚拟内存》</a><font style="color:rgba(0, 0, 0, 0.75);">会介绍。</font></li></ol><hr><h2 id="二、页交换文件"><a href="#二、页交换文件" class="headerlink" title="二、页交换文件"></a><font style="color:rgba(0, 0, 0, 0.75);">二、页交换文件</font></h2><h3 id="1-页交换文件"><a href="#1-页交换文件" class="headerlink" title="1. 页交换文件"></a><font style="color:rgb(79, 79, 79);">1. 页交换文件</font></h3><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">虚拟地址空间</font><font style="color:rgb(77, 77, 77);">只是操作系统为进程“虚拟”出来的一块地址区域，并不代表任何实际的空间。而</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“页交换文件”</font><font style="color:rgb(77, 77, 77);">却对应了实际的空间，这个空间一般是磁盘上名为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“pagefile.sys”</font><font style="color:rgb(77, 77, 77);">的文件。</font></p><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“页交换文件”</font><font style="color:rgb(77, 77, 77);">的大小和位置可以在系统设置（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">系统属性 -&gt; 高级 -&gt; 性能 -&gt; 设置 -&gt; 高级</font><font style="color:rgb(77, 77, 77);"> </font><font style="color:rgb(77, 77, 77);">）中进行设置：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-2.jpeg"></p><p><font style="color:rgb(77, 77, 77);">从微软的官方文档来看，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“虚拟内存”</font><font style="color:rgb(77, 77, 77);">等于</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“物理内存”+“分页文件”</font><font style="color:rgb(77, 77, 77);">总和。可以把</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“虚拟内存”</font><font style="color:rgb(77, 77, 77);">理解为Windows的一种内存管理机制。</font></p><h3 id="2-虚拟地址空间、页交换文件、物理内存"><a href="#2-虚拟地址空间、页交换文件、物理内存" class="headerlink" title="2. 虚拟地址空间、页交换文件、物理内存"></a><font style="color:rgb(79, 79, 79);">2. 虚拟地址空间、页交换文件、物理内存</font></h3><p><font style="color:rgb(77, 77, 77);">虚拟地址空间、页交换文件、物理内存三者的关系如下图：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-3.jpeg"></p><p><font style="color:rgb(77, 77, 77);">《Windows核心编程》第13章关于“物理存储器和页交换文件”章节中讲到了“页交换文件、物理存储器之间的数据交换过程”，流程如下：</font></p><p><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-4.jpeg"></p><p><font style="color:rgb(77, 77, 77);">应用程序从进程的虚拟地址空间</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">预定并调拨</font><font style="color:rgb(77, 77, 77);">了一块地址区域时，起初这块区域只是从“页交换文件”中调拨的，这样作有个好处就是：因为还不确定何时才会使用这块区域，如果立即从物理内存调拨，会将占用很多的物理内存。<br></font><font style="color:rgb(77, 77, 77);">当程序读写该地址区域时，此时就会出现上面图上的页交换文件和物理内存之间的数据交换过程。</font></p><h3 id="3-将页面锁定在物理内存"><a href="#3-将页面锁定在物理内存" class="headerlink" title="3. 将页面锁定在物理内存"></a><font style="color:rgb(79, 79, 79);">3. 将页面锁定在物理内存</font></h3><p><font style="color:rgb(77, 77, 77);">从上面的几节我们知道，当物理内存中没有闲置页面时，系统会将内存中的某些页面的数据写入到交换文件中，从而将该物理内存区域释放出来供后面的程序使用。</font></p><p><font style="color:rgb(77, 77, 77);">我们可以通过调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirtualLock</font><font style="color:rgb(77, 77, 77);">方法，将页面锁定在物理内存中，从而防止</font><a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">虚拟内存</a><font style="color:rgb(77, 77, 77);">管理机制将页面交换至页面文件，而引起不必要的硬盘和物理内存之间的低效页面交换。</font></p><p><font style="color:rgb(77, 77, 77);">也可以通过调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirtualUnlock</font><font style="color:rgb(77, 77, 77);">方法解锁页面，允许系统对页面进行交换操作。</font></p><p><font style="color:rgb(77, 77, 77);">需要注意的是，锁定页面时系统会根据当前可用实际物理内存情况，以及进程工作集配额判定当前最大可锁定的页面的实际数量，超过此数量会引起一个错误。我们可以调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">SetProcessWorkingSetSize</font><font style="color:rgb(77, 77, 77);">可以改变一个进程工作集大小的配额，从而可以锁定更多的物理页面。</font></p><hr><h2 id="三、虚拟内存使用实例"><a href="#三、虚拟内存使用实例" class="headerlink" title="三、虚拟内存使用实例"></a>三、虚拟内存使用实例</h2><p>虚拟内存<font style="color:rgb(77, 77, 77);">方面的API属于页面粒度API，通过这些API分配的内存的最小粒度是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">64KB</font><font style="color:rgb(77, 77, 77);">。另外通过前面的</font><a href="http://blog.csdn.net/china_jeffery/article/details/79611715">《Windows内存体系（2） – 页交换文件》</a><font style="color:rgb(77, 77, 77);">文章，我们可以知道，这些API分配（调拨）的内存区域最初都是位于</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“页交换文件”</font><font style="color:rgb(77, 77, 77);">上面，当程序对该区域的某些“页面”（</font><strong><font style="color:rgb(77, 77, 77);">对虚拟内存的管理以页面为单位进行的</font></strong><font style="color:rgb(77, 77, 77);">）进行读写时，才会将这些页面交换到物理内存上面。</font></p><p><font style="color:rgb(77, 77, 77);">从</font><a href="http://blog.csdn.net/china_jeffery/article/details/79610915">《Windows内存体系（1） – 虚拟地址空间》</a><font style="color:rgb(77, 77, 77);">中我们知道虚拟地址空间要经过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">预定</font><font style="color:rgb(77, 77, 77);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">调拨</font><font style="color:rgb(77, 77, 77);">2个步骤之后才能使用，这2个步骤都可以通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirtualAlloc</font><font style="color:rgb(77, 77, 77);">函数实现：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">LPVOID <span class="hljs-title">VirtualAlloc</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    LPVOID lpAddress, </span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD dwSize, </span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD flAllocationType, </span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD flProtect </span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>; <br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">当预定或者调拨的空间我们不在需要时，我们需要调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirtualFree</font><font style="color:rgb(77, 77, 77);">来释放该地址空间：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">VirtualFree</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    LPVOID lpAddress, </span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD dwSize, </span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD dwFreeType </span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>; <br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">下面是的示例演示了在预定、调拨、使用等操作前后，进程的各项内存的占用情况：</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    SIZE_T size = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>; <span class="hljs-comment">// 1GB</span><br><br>    <span class="hljs-comment">// 预定1GB的空间</span><br>    <span class="hljs-type">char</span> *pVirtualAddress = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">VirtualAlloc</span>(<span class="hljs-literal">NULL</span>, size, MEM_RESERVE, PAGE_READWRITE);<br>    <span class="hljs-keyword">if</span> (pVirtualAddress == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Reserve 1GB failed.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 验证分配粒度是不是64KB</span><br>    <span class="hljs-type">int</span> n = (<span class="hljs-type">long</span>)pVirtualAddress % (<span class="hljs-number">64</span>*<span class="hljs-number">1024</span>);<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配粒度为64K\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已经预定1GB\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">// 暂停</span><br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">VirtualAlloc</span>(pVirtualAddress, size, MEM_COMMIT, PAGE_READWRITE) == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Commit 1GB failed.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已经调拨1GB\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">// 暂停</span><br><br>    <span class="hljs-comment">// 页面大小为4K，访问2560个页面，即2560*4K = 10MB</span><br>    <span class="hljs-comment">// </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2560</span>; i++) &#123;<br>        <span class="hljs-type">char</span> * p = pVirtualAddress + i * (<span class="hljs-number">4</span> * <span class="hljs-number">1024</span>);<br>        *p = <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-comment">// 只访问每个页面的第一个字节</span><br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;已经使用前10MB\n&quot;</span>);<br>    <span class="hljs-built_in">getchar</span>(); <span class="hljs-comment">// 暂停</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">在程序运行各个阶段进程的内存情况如下图：（“内存专用工作集”表示占用的物理内存的大小，“提交大小”表示调拨的页交换文件的大小）</font></p><p><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-5.png"></p><hr><h2 id="四、内存映射文件"><a href="#四、内存映射文件" class="headerlink" title="四、内存映射文件"></a><font style="color:rgb(77, 77, 77);">四、内存映射文件</font></h2><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“内存映射文件”</font><font style="color:rgb(77, 77, 77);">可以将硬盘上的文件映射到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">虚拟地址空间</font><font style="color:rgb(77, 77, 77);">，这样就不需要将所有东西都放入到页交换文件中，比如系统有许多程序同时运行时，如果将这些程序文件都加载到页交换文件中，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页交换文件</font><font style="color:rgb(77, 77, 77);">将会变得非常大。事实上，Windows也并没有将硬盘上的程序文件复制到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页交换文件</font><font style="color:rgb(77, 77, 77);">中，因为这样不仅会让</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">页交换文件</font><font style="color:rgb(77, 77, 77);">将会变得非常大，也会浪费很多时间，特别是可执行程序非常大的时候。</font></p><p><font style="color:rgb(77, 77, 77);">当用户要求执行一个应用程序时，系统会打开该应用程序的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">.exe</font><font style="color:rgb(77, 77, 77);">文件，并计算出应用程序的代码和数据的大小，然后系统会在进程的虚拟</font><a href="https://so.csdn.net/so/search?q=%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4&spm=1001.2101.3001.7020">地址空间</a><font style="color:rgb(77, 77, 77);">预定一块地址空间，并注明与该区域相关联的物理存储器就是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">.exe</font><font style="color:rgb(77, 77, 77);">文件本身。</font></p><p><font style="color:rgb(77, 77, 77);">当把一个位于硬盘上的文件（可以是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">.exe</font><font style="color:rgb(77, 77, 77);">，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">.dll</font><font style="color:rgb(77, 77, 77);">也可以是普通文件）映像用作地址空间区域对应的物理存储器时，我们称这个文件映像为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“内存映射文件”</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">现在我们可以对</font><a href="http://blog.csdn.net/china_jeffery/article/details/79611715">《 Windows内存体系（2） – 虚拟内存》</a><font style="color:rgb(77, 77, 77);">第2节的图进行完善了，加入“</font><a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a><font style="color:rgb(77, 77, 77);">映射文件”部分：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-6.png"></p><hr><h2 id="五、内存映射文件技术的使用"><a href="#五、内存映射文件技术的使用" class="headerlink" title="五、内存映射文件技术的使用"></a>五、内存映射文件技术的使用</h2><h3 id="1-内存映射文件技术介绍"><a href="#1-内存映射文件技术介绍" class="headerlink" title="1. 内存映射文件技术介绍"></a><font style="color:rgb(79, 79, 79);">1. 内存映射文件技术介绍</font></h3><p><font style="color:rgb(77, 77, 77);">常用的有Win32 API的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">CreateFile()</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">WriteFile()</font><font style="color:rgb(77, 77, 77);">、</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">ReadFile()</font><font style="color:rgb(77, 77, 77);">和MFC提供的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">CFile</font><font style="color:rgb(77, 77, 77);">类都可以实现文件的读写操作。一般来说，以上这些函数可以满足大多数场合的要求，但是对于某些特殊应用领域所需要的动辄几十GB、几百GB、乃至几TB的海量存储，再以平常的文件处理方法进行处理显然是行不通的（效率低下，而且内存没那么大）。目前，对于这种大文件的操作一般是以内存映射文件的方式来加以处理的。</font></p><p><font style="color:rgb(77, 77, 77);">内存映射文件也是Windows的一种内存管理方法，提供了一个统一的内存管理特征，使应用程序可以通过内存指针对磁盘上的文件进行访问。通过文件映射将磁盘文件内容（全部或者部分）与进程虚拟地址空间的某个区域建立映射关联，可以直接对被映射的文件进行访问，而不必执行文件I&#x2F;O操作也无需对文件内容进行缓冲处理。内存文件映射的这种特性是非常适合于用来管理大尺寸文件的。</font></p><h3 id="2-大文件读写实例"><a href="#2-大文件读写实例" class="headerlink" title="2. 大文件读写实例"></a><font style="color:rgb(79, 79, 79);">2. 大文件读写实例</font></h3><p><font style="color:rgb(77, 77, 77);">通过C++调用系统API实现文件映射的步骤大致如下：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-7.jpeg"></p><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>本示例先在**D:**生成一个<font style="color:rgb(77, 77, 77);">大小为1GB的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">BigFile.data</font><font style="color:rgb(77, 77, 77);">文件，然后使用内存映射技术将该文件内全部填充字符A，随后读取其中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">第20000~20100字节</font><font style="color:rgb(77, 77, 77);">，并将这些字节修改为字符B，然后再次读取已验证是否修改成功。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span> </span>&#123;<br>    HANDLE file_ = <span class="hljs-built_in">CreateFile</span>(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;D:\\BigFile.data&quot;</span>), <br>    GENERIC_READ | GENERIC_WRITE, <br>    <span class="hljs-number">0</span>, <br>    <span class="hljs-literal">NULL</span>, <br>    OPEN_ALWAYS, <br>    FILE_ATTRIBUTE_NORMAL,<br>    <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">if</span> (file_ == INVALID_HANDLE_VALUE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CreateFile failed, GLE:%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    LARGE_INTEGER filesize;<br>    filesize.QuadPart = <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>; <span class="hljs-comment">// 1GB</span><br><br>    HANDLE mapping_ = <span class="hljs-built_in">CreateFileMapping</span>(file_, <span class="hljs-literal">NULL</span>, PAGE_READWRITE, filesize.HighPart, filesize.LowPart, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (mapping_ == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CreateFileMapping failed, GLE:%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    LARGE_INTEGER offset;<br>    offset.QuadPart = <span class="hljs-number">0</span>;<br><br>    LPVOID mapping_addr = <span class="hljs-built_in">MapViewOfFile</span>(mapping_, FILE_MAP_WRITE | FILE_MAP_READ, offset.HighPart, offset.LowPart, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mapping_addr == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MapViewOfFile failed, GLE:%d\n&quot;</span>, <span class="hljs-built_in">GetLastError</span>());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 向文件中填充1GB的字符&#x27;A&#x27;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1024</span>; i++) &#123;<br>        buf[i] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 每次填充1024字节，填充1024*1024次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> l = <span class="hljs-number">0</span>; l &lt; <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>; l++) &#123;<br>        <span class="hljs-built_in">memcpy</span>((LPVOID)((<span class="hljs-type">long</span>)mapping_addr + l * <span class="hljs-number">1024</span>), buf, <span class="hljs-number">1024</span>);<br>    &#125;<br><br><br><br>    <span class="hljs-comment">// 填充完毕</span><br>    <span class="hljs-comment">// 读取第20000~20100字节，共100字节</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-type">char</span> read_content[<span class="hljs-number">101</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-built_in">memcpy</span>(read_content, (LPVOID)((<span class="hljs-type">long</span>)mapping_addr + <span class="hljs-number">20000</span>), <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, read_content);<br><br>    <span class="hljs-comment">// 将第20000~20100字节，共100字节全部修改为字符&#x27;B&#x27;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-type">char</span> write_content[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>        write_content[i] = <span class="hljs-string">&#x27;B&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">memcpy</span>((LPVOID)((<span class="hljs-type">long</span>)mapping_addr + <span class="hljs-number">20000</span>), write_content, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-comment">// 再次读取第20000~20100字节，共100字节，验证修改是成功</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-built_in">memcpy</span>(read_content, (LPVOID)((<span class="hljs-type">long</span>)mapping_addr + <span class="hljs-number">20000</span>), <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, read_content);<br><br><br>    <span class="hljs-built_in">UnmapViewOfFile</span>(mapping_addr);<br>    <span class="hljs-built_in">CloseHandle</span>(mapping_);<br>    <span class="hljs-built_in">CloseHandle</span>(file_);<br><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">Test</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="六、内存对齐"><a href="#六、内存对齐" class="headerlink" title="六、内存对齐"></a>六、内存对齐</h2><h3 id="1-内存为什么要对齐"><a href="#1-内存为什么要对齐" class="headerlink" title="1. 内存为什么要对齐"></a><font style="color:rgb(79, 79, 79);">1. 内存为什么要对齐</font></h3><p><font style="color:rgb(77, 77, 77);">虽然所有的变量都是保存在特定地址的内存中，但最好还是按照内存对齐的要求来存储。这主要出于两个方面的原因考虑：</font></p><ol><li><font style="color:rgba(0, 0, 0, 0.75);">平台原因：<br></font><font style="color:rgba(0, 0, 0, 0.75);">不是所有的硬件平台(特别是嵌入式系统中使用的低端处理器)都能访问任意地址上的任意数据，某些硬件平台只能访问对齐的地址，否则会出现硬件异常。</font></li><li><font style="color:rgba(0, 0, 0, 0.75);">性能原因：<br></font><font style="color:rgba(0, 0, 0, 0.75);">如果数据存放在未对齐的内存空间中，则处理器访问变量时需要进行两次内存访问才能完整读取该变量的值，而对齐的内存访问仅需一次访问。</font></li></ol><h3 id="2-内存对齐的规则"><a href="#2-内存对齐的规则" class="headerlink" title="2. 内存对齐的规则"></a><font style="color:rgb(79, 79, 79);">2. 内存对齐的规则</font></h3><ol><li><font style="color:rgb(77, 77, 77);">对于结构（或联合）的各个成员，第一个成员位于偏移为0，以后每个数据成员的偏移量必须是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">#pragma pack指定的数值和结构体(或联合)中最大数据成员长度 这2个数值中较小的一个</font><font style="color:rgb(77, 77, 77);">的倍数。<br></font><font style="color:rgb(77, 77, 77);">使用伪代码表示：</font><font style="color:rgb(77, 77, 77);"> </font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">min(#pragma pack, 结构最大数据成员长度) * N</font></li><li><font style="color:rgb(77, 77, 77);">在数据成员完成各自对齐之后，结构(或联合)本身也要进行对齐，对齐也按照</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">#pragma pack指定的数值和结构(或联合)最大数据成员长度这2个数值中较小的一个</font><font style="color:rgb(77, 77, 77);">进行。</font></li></ol><p><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">如果没有使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">#pragma pack</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">指令来显式的指定内存对齐的字节数，则按照默认字节数来对齐，各个平台的默认对齐规则如下：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">32位CPU默认按照4字节对齐；64位CPU默认按照8字节对齐。</font></p><h3 id="3-pragma-pack命令"><a href="#3-pragma-pack命令" class="headerlink" title="3. #pragma pack命令"></a><font style="color:rgb(79, 79, 79);">3. #pragma pack命令</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">#pragma pack(n) // 使用自定义n字节对齐  n可以为1，2，4，8，16<br>#pragma pack()  // 使用缺省字节对齐<br>#pragma pack(show) // 在编译输出窗口以警告的形式显示出当前的内存以几个字节对齐<br></code></pre></td></tr></table></figure><h3 id="4-结构体内存对齐示例"><a href="#4-结构体内存对齐示例" class="headerlink" title="4. 结构体内存对齐示例"></a><font style="color:rgb(79, 79, 79);">4. 结构体内存对齐示例</font></h3><p><font style="color:rgb(77, 77, 77);">在64位系统上编译下面的测试程序，已知在64位系统上各类型占用字节数如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">char     1字节<br>short    2字节<br>int      4字节<br>long     4字节<br>double   8字节<br>long long 8字节<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">示例代码如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plain">#pragma pack(8)<br><br>struct A &#123;<br>char s[5];<br>short c;<br>int a;<br>&#125;;<br><br>int main()<br>&#123;<br>int i = sizeof(A);<br>printf(&quot;%d&quot;, i);<br><br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">按照第二节所讲的内存对齐规则，分析如下：<br></font><font style="color:rgb(77, 77, 77);">因为结构体中最大的数据成员长度为int（即4字节），而且</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">#pragma pack(8)</font><font style="color:rgb(77, 77, 77);">指令指定按照8字节对齐，所以</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">min(4,8) &#x3D; 4</font><font style="color:rgb(77, 77, 77);">，故我们可以知道结构体A按照4字节对齐。</font></p><p><font style="color:rgb(77, 77, 77);">下图是结构体A按照4字节对齐的内存布局（需要注意的是“内存不是填充在s5后面，而是填充在c后面”）：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-8.jpeg"></p><p><font style="color:rgb(77, 77, 77);">从图我们很容易知道</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">sizeof(A) &#x3D; 12</font><font style="color:rgb(77, 77, 77);">.</font></p><hr><h2 id="七、堆"><a href="#七、堆" class="headerlink" title="七、堆"></a>七、堆</h2><h3 id="1-为什么要使用堆？"><a href="#1-为什么要使用堆？" class="headerlink" title="1. 为什么要使用堆？"></a>1. 为什么要使用堆？</h3><p><font style="color:rgb(77, 77, 77);">应用程序虽然可以使用页面粒度的函数（如</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirualAlloc</font><font style="color:rgb(77, 77, 77);">）来分配一个最小为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">4KB</font><font style="color:rgb(77, 77, 77);">或</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">8K</font><font style="color:rgb(77, 77, 77);">的</font><a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a><font style="color:rgb(77, 77, 77);">块，但是很多时候我们并不需要分配这么大的内存块，我们可能只想分配1K，2K的内存块，那么这个时候无论从内存的使用率，还是从性能的角度来看，再分配这么大的一个内存区域显然不是最优的了。</font></p><p><font style="color:rgb(77, 77, 77);">为了满足这种需求，Windows提供了一个被称为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“堆管理器”</font><font style="color:rgb(77, 77, 77);">的组件，它负责管理大内存区域中的内存分配，这些大内存区域就是通过一些页面粒度的内存分配函数（如</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirualAlloc</font><font style="color:rgb(77, 77, 77);">）来预定（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">reserve</font><font style="color:rgb(77, 77, 77);">）的。</font></p><p><font style="color:rgb(77, 77, 77);">堆管理器中的分配粒度相对比较小：</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">在32位系统上是8字节，在64位系统上是16字节</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">堆管理器已经被windows系统精心设计成：在这些很小的内存分配的情况下进行了内存使用率和性能两个方面的优化。</font></p><h3 id="2-进程的默认堆"><a href="#2-进程的默认堆" class="headerlink" title="2. 进程的默认堆"></a><font style="color:rgb(79, 79, 79);">2. 进程的默认堆</font></h3><p><font style="color:rgb(77, 77, 77);">每个进程至少有一个堆，那就是进程的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">默认堆</font><font style="color:rgb(77, 77, 77);">。进程的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">默认堆</font><font style="color:rgb(77, 77, 77);">是在进程启动的时候创建的，而且在进程的生命周期中永远不会被删除。</font></p><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“默认堆”</font><font style="color:rgb(77, 77, 77);">的默认大小为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">1MB</font><font style="color:rgb(77, 77, 77);">，但是可以通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">&#x2F;HEAP</font><font style="color:rgb(77, 77, 77);">链接器编译器选项来指定一个更大的起始大小。这个大小值只是初始的保留内存大小，后期根据需要它可以自动扩充。</font></p><p><font style="color:rgb(77, 77, 77);">应用程序可以调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">GetProcessHeap</font><font style="color:rgb(77, 77, 77);">来获取进程的默认堆，也可以通过调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapCreate</font><font style="color:rgb(77, 77, 77);">函数来创建额外的私有堆，当一个进程不在需要一个私有堆的时候，它可以调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapDestory</font><font style="color:rgb(77, 77, 77);">来释放虚拟地址空间。</font></p><h3 id="3-crt堆"><a href="#3-crt堆" class="headerlink" title="3. crt堆"></a><font style="color:rgb(79, 79, 79);">3. crt堆</font></h3><p><font style="color:rgb(77, 77, 77);">C语言的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc,free</font><font style="color:rgb(77, 77, 77);">函数以及C++的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">new,delete</font><font style="color:rgb(77, 77, 77);">都是从</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">堆</font><font style="color:rgb(77, 77, 77);">上分配和释放内存的。但是他们所使用的堆不是进程的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">默认堆</font><font style="color:rgb(77, 77, 77);">，他们使用的是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">私有堆</font><font style="color:rgb(77, 77, 77);">。可是我们在使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">函数之前并没有进行任何私有堆的创建操作呀？ 因为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">函数使用的这个私有堆不需要程序员来创建，而是C或C++运行时库DLL的启动代码</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_DllMainCRTStartup</font><font style="color:rgb(77, 77, 77);">中自动创建的。下面通过解析</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">函数的调用过程来说明这一点。</font></p><p><strong><font style="color:rgb(79, 79, 79);">malloc函数调用过程解析</font></strong></p><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">函数的定义在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc.c</font><font style="color:rgb(77, 77, 77);">文件中，调用流程如下：<br></font><font style="color:rgb(77, 77, 77);">（以</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Microsoft Visual Studio 10.0</font><font style="color:rgb(77, 77, 77);">为例，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc.c</font><font style="color:rgb(77, 77, 77);">文件路径为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\crt\src</font><font style="color:rgb(77, 77, 77);">）</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">(1). void* __cdecl malloc(size_t const size)<br>(2). void * __cdecl _malloc_base (size_t size)<br>(3). void * __cdecl _heap_alloc (size_t size)<br></code></pre></td></tr></table></figure><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_heap_alloc</font><font style="color:rgb(77, 77, 77);">的定义如下：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">__forceinline void * __cdecl _heap_alloc (size_t size)<br>&#123;<br>    if (_crtheap == 0) &#123;<br>        _FF_MSGBANNER();    /* write run-time error banner */<br>        _NMSG_WRITE(_RT_CRT_NOTINIT);  /* write message */<br>        __crtExitProcess(255);  /* normally _exit(255) */<br>    &#125;<br><br>    return HeapAlloc(_crtheap, 0, size ? size : 1);<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">从上面的代码中，我们可以看到分配内存块的时候使用的是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap</font><font style="color:rgb(77, 77, 77);">句柄标记的堆。那么</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap</font><font style="color:rgb(77, 77, 77);">堆是何时创建的了？</font></p><p><font style="color:rgb(77, 77, 77);">我们从</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">heapinit.c</font><font style="color:rgb(77, 77, 77);">文件中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_heap_init</font><font style="color:rgb(77, 77, 77);">函数可以看到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap</font><font style="color:rgb(77, 77, 77);">堆的创建过程：</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plain">HANDLE _crtheap=NULL;<br><br>/***<br>*_heap_init() - Initialize the heap<br>*<br>*Purpose:<br>*       Setup the initial C library heap.<br>*<br>*       NOTES:<br>*       (1) This routine should only be called once!<br>*       (2) This routine must be called before any other heap requests.<br>*<br>*Entry:<br>*       &lt;void&gt;<br>*Exit:<br>*       Returns 1 if successful, 0 otherwise.<br>*<br>*Exceptions:<br>*       If heap cannot be initialized, the program will be terminated<br>*       with a fatal runtime error.<br>*<br>*******************************************************************************/<br><br>int __cdecl _heap_init (void)<br>&#123;<br>        ULONG HeapType = 2;<br><br>        //  Initialize the &quot;big-block&quot; heap first.<br>        if ( (_crtheap = HeapCreate(0, BYTES_PER_PAGE, 0)) == NULL )<br>            return 0;<br><br>#ifdef _WIN64<br>        // Enable the Low Fragmentation Heap by default on Windows XP and<br>        // Windows Server 2003.  It&#x27;s the 8 byte overhead heap, and has<br>        // generally better performance charateristics than standard heap,<br>        // particularly for apps that perform lots of small allocations.<br><br>        if (LOBYTE(GetVersion()) &lt; 6)<br>        &#123;<br>            HeapSetInformation(_crtheap, HeapCompatibilityInformation,<br>                               &amp;HeapType, sizeof(HeapType));<br>        &#125;<br>#endif  /* _WIN64 */<br>        return 1;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">从上面的代码，我们可以看到，创建的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">私有堆</font><font style="color:rgb(77, 77, 77);">句柄存放在一个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">全局的_crtheap变量</font><font style="color:rgb(77, 77, 77);">中，后面每次调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">函数都是从该堆分配内存块。</font></p><h3 id="4-Win32堆函数"><a href="#4-Win32堆函数" class="headerlink" title="4. Win32堆函数"></a><font style="color:rgb(79, 79, 79);">4. Win32堆函数</font></h3><p><font style="color:rgb(77, 77, 77);">我们最常用的Windows堆函数如下：</font></p><ul><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapCreate</font><font style="color:rgba(0, 0, 0, 0.75);">或</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapDestory</font><font style="color:rgba(0, 0, 0, 0.75);"> </font><font style="color:rgba(0, 0, 0, 0.75);">— 创建或删除一个私有堆</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapAlloc</font><font style="color:rgba(0, 0, 0, 0.75);"> </font><font style="color:rgba(0, 0, 0, 0.75);">— 分配一个堆内存块</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapFree</font><font style="color:rgba(0, 0, 0, 0.75);"> </font><font style="color:rgba(0, 0, 0, 0.75);">— 释放一个原先由</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapAlloc</font><font style="color:rgba(0, 0, 0, 0.75);">分配的内存块</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapReAlloc</font><font style="color:rgba(0, 0, 0, 0.75);"> </font><font style="color:rgba(0, 0, 0, 0.75);">— 增长或缩减一个已分配的内存块的大小</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapLock</font><font style="color:rgba(0, 0, 0, 0.75);">或</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapUnLock</font><font style="color:rgba(0, 0, 0, 0.75);"> </font><font style="color:rgba(0, 0, 0, 0.75);">— 控制堆操作的内存访问</font></li><li><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapWalk</font><font style="color:rgba(0, 0, 0, 0.75);"> — 列举一个堆内部的内存项和区域。</font></li></ul><hr><h2 id="八、内存管理API分层结构"><a href="#八、内存管理API分层结构" class="headerlink" title="八、内存管理API分层结构"></a>八、内存管理API分层结构</h2><p><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-9.jpeg"></p><p><font style="color:rgb(77, 77, 77);">从上图可以看到，</font><a href="https://so.csdn.net/so/search?q=%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">虚拟内存</a><font style="color:rgb(77, 77, 77);">机制（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">Virtual Memory</font><font style="color:rgb(77, 77, 77);">）是windows</font><a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a><font style="color:rgb(77, 77, 77);">体系的基础，无论你是使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">堆</font><font style="color:rgb(77, 77, 77);">，还是使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">内存映射文件</font><font style="color:rgb(77, 77, 77);">，它们的底层都是基于虚拟内存来实现的。</font></p><p><font style="color:rgb(77, 77, 77);">从上往下，每一层的</font><a href="https://so.csdn.net/so/search?q=API&spm=1001.2101.3001.7020">API</a><font style="color:rgb(77, 77, 77);">在内部会依次调用下一层的API。下图中列举了每层API中经常使用的函数：</font></p><ul><li><strong><font style="color:rgba(0, 0, 0, 0.75);">CRT Memory Functions：</font></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc, free, new, delete</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.75);">Local, Global Memory API:</font>****<font style="color:rgba(0, 0, 0, 0.75);"> </font></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">LocalAlloc, GlobalAlloc</font><font style="color:rgba(0, 0, 0, 0.75);"> </font><font style="color:rgba(0, 0, 0, 0.75);">（</font><strong><font style="color:rgba(0, 0, 0, 0.75);">这2个函数现在不建议使用，注意是为了兼容以前的老代码才保留下来的</font></strong><font style="color:rgba(0, 0, 0, 0.75);">）</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.75);">Heap Memory API：</font></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapCreate, HeapAlloc, HeapDestory</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.75);">Virtual Memory API：</font></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">VirtualAlloc, VirtualFree</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.75);">Memory Mapped File API：</font></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">CreateFileMapping, MapViewOfFile, MapViewOfFileEx, UnMapViewOfFile</font></li></ul><hr><h2 id="九、跨MT模块的内存相互释放的问题"><a href="#九、跨MT模块的内存相互释放的问题" class="headerlink" title="九、跨MT模块的内存相互释放的问题"></a><font style="color:rgb(77, 77, 77);">九、跨MT模块的内存相互释放的问题</font></h2><p><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">在阅读本文之前，需要先对</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">MT</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">MD</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">运行时库有所了解，参考：</font><a href="https://blog.csdn.net/china_jeffery/article/details/79555947">《理解C&#x2F;C++运行时库》</a><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">。另外建议先阅读《Windows内存体系》系列文章的前几篇文章，对</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“虚拟内存”</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“堆”</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“内存API体系结构”</font><font style="color:rgb(85, 86, 102);background-color:rgb(238, 240, 244);">有所了解。</font></p><p><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">《Windows核心编程 第五版》第19章 DLL基础（511页）</font><font style="color:rgb(77, 77, 77);">中给出了一个建议：“当一个MT版本的模块如果提供一个内存分配函数的时候，它必须同时提供另一个用来释放内存的函数。”。说得更加直白一点就是，“对于MT的模块，不要跨模块进行内存释放。”。但是核心编程这本书上面没有具体分析原因，本文就来分析具体的原因。</font></p><h3 id="1-为什么不同堆分配的内存块不能相互释放？"><a href="#1-为什么不同堆分配的内存块不能相互释放？" class="headerlink" title="1. 为什么不同堆分配的内存块不能相互释放？"></a><font style="color:rgb(79, 79, 79);">1. 为什么不同堆分配的内存块不能相互释放？</font></h3><p><font style="color:rgb(77, 77, 77);">Windows的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">堆管理器</font><font style="color:rgb(77, 77, 77);">对每个进程都维护了多个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“堆”</font><font style="color:rgb(77, 77, 77);">，我们从每个</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“堆”</font><font style="color:rgb(77, 77, 77);">中分配处理的内存块的地址都不一样。所以我们不能将从“堆A”中分配出来的内存块拿到“堆B”中，让“堆B”来释放，这样就会导致程序异常。</font></p><p><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-10.png"></p><p><font style="color:rgb(77, 77, 77);">如上图，通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">函数从“堆A”中分配100字节内存块，内存块地址为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x123456</font><font style="color:rgb(77, 77, 77);">；从“堆B”中分配100字节内存块，内存块地址为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x345678</font><font style="color:rgb(77, 77, 77);">.<br></font><font style="color:rgb(77, 77, 77);">如果将</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x123456</font><font style="color:rgb(77, 77, 77);">这个地址拿到“堆B”中去释放，势必会导致异常，因为“堆B”中没有这地址。</font></p><p><font style="color:rgb(77, 77, 77);">那么我们是不是可以使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapFree</font><font style="color:rgb(77, 77, 77);">函数来释放</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">hHeap</font><font style="color:rgb(77, 77, 77);">参数指定的“堆”中的任何内存块了。答案是：不能。<br></font><font style="color:rgb(77, 77, 77);">回忆前面介绍的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapFree</font><font style="color:rgb(77, 77, 77);">函数，</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">BOOL HeapFree(<br>  HANDLE hHeap,<br>  DWORD dwFlags,<br>  LPVOID lpMem<br>);<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">这个函数只要求传入了内存块的起始地址指针，但没有要求传入需要释放的内存块的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">大小</font><font style="color:rgb(77, 77, 77);">，那么该函数是如何知道起始地址指针指向的内存块的大小了？</font></p><p><font style="color:rgb(77, 77, 77);">我们可以简单的理解为，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapAlloc</font><font style="color:rgb(77, 77, 77);">函数每次分配内存块的时候都会额外分配一点空间用于存储一个结构体，该结构体中存储了本次分配的内存块的大小等信息。大致如下图：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-11.jpeg"></p><p><font style="color:rgb(77, 77, 77);">所以，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapFree</font><font style="color:rgb(77, 77, 77);">函数首先会通过</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">lpMem</font><font style="color:rgb(77, 77, 77);">指针计算出“结构体”的地址，然后从结构体中获取到分配的内存块的具体大小，最后执行释放操作。</font></p><p><font style="color:rgb(77, 77, 77);">基于上面的原因，我们不能在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapFree</font><font style="color:rgb(77, 77, 77);">函数的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">lpMem</font><font style="color:rgb(77, 77, 77);">参数中传入随意的地址，因为该地址处可能没有存储用于存放内存块信息的结构体，所以释放操作就会失败。</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">free</font><font style="color:rgb(77, 77, 77);">函数也一样，因为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">free</font><font style="color:rgb(77, 77, 77);">函数内部也是调用的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">HeapFree</font><font style="color:rgb(77, 77, 77);">函数。</font></p><h3 id="2-为什么MT模块内存不能相互释放，而MD的却可以？"><a href="#2-为什么MT模块内存不能相互释放，而MD的却可以？" class="headerlink" title="2. 为什么MT模块内存不能相互释放，而MD的却可以？"></a><font style="color:rgb(79, 79, 79);">2. 为什么MT模块内存不能相互释放，而MD的却可以？</font></h3><p><strong><font style="color:rgb(79, 79, 79);">我们先分析为什么MT模块的内存间相互释放会崩溃。</font></strong></p><p><font style="color:rgb(77, 77, 77);">现在有2个模块（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">A.dll</font><font style="color:rgb(77, 77, 77);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">）都是使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">MT</font><font style="color:rgb(77, 77, 77);">运行时库，即加载的静态库</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">libcmt.lib</font><font style="color:rgb(77, 77, 77);">（可以参考</font><a href="https://blog.csdn.net/china_jeffery/article/details/79555947">《理解C&#x2F;C++运行时库》</a><font style="color:rgb(77, 77, 77);">），在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">A.dll</font><font style="color:rgb(77, 77, 77);">中使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">分配100字节的内存，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">返回的内存地址为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x123456</font><font style="color:rgb(77, 77, 77);">。然后将该地址传给</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">，在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">中调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">free</font><font style="color:rgb(77, 77, 77);">函数来释放这个内存。如图：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-12.jpeg"></p><p><font style="color:rgb(77, 77, 77);">从</font><a href="https://blog.csdn.net/china_jeffery/article/details/79627032">《Windows内存体系（7） – 堆》</a><font style="color:rgb(77, 77, 77);">我们知道，DLL在启动代码</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_DllMainCRTStartup</font><font style="color:rgb(77, 77, 77);">中会建立一个“堆”（堆句柄存放在_crtheap变量中），所以A.dll和B.dll中都会有一个crt堆。</font></p><p><font style="color:rgb(77, 77, 77);">为了区分，我们将</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">A.dll</font><font style="color:rgb(77, 77, 77);">中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">crt堆</font><font style="color:rgb(77, 77, 77);">称作</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap_A</font><font style="color:rgb(77, 77, 77);">，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">crt堆</font><font style="color:rgb(77, 77, 77);">称作</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap_B</font><font style="color:rgb(77, 77, 77);">。</font></p><p><font style="color:rgb(77, 77, 77);">从上面图可以看到，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">A.dll</font><font style="color:rgb(77, 77, 77);">中</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">的内存拿到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">去中去</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">free</font><font style="color:rgb(77, 77, 77);">，就相当于从堆</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap_A</font><font style="color:rgb(77, 77, 77);">中分配的内存拿到另一个堆</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap_B</font><font style="color:rgb(77, 77, 77);">中的释放。第一节已经解释了为什么不能这样做了。</font></p><p><strong><font style="color:rgb(79, 79, 79);">现在我们分析为什么MD模块的内存间相互释放不会崩溃。</font></strong></p><p><font style="color:rgb(77, 77, 77);">还是2个模块（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">A.dll</font><font style="color:rgb(77, 77, 77);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">），但是现在他们都是使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">MD</font><font style="color:rgb(77, 77, 77);">运行时库，即加载的动态库</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">msvcr100.dll</font><font style="color:rgb(77, 77, 77);">（可以参考</font><a href="https://blog.csdn.net/china_jeffery/article/details/79555947">《理解C&#x2F;C++运行时库》</a><font style="color:rgb(77, 77, 77);">），程序的代码的过程和上面一样，还是在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">A.dll</font><font style="color:rgb(77, 77, 77);">中使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">分配100字节的内存，</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">返回的内存地址为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">0x123456</font><font style="color:rgb(77, 77, 77);">。然后将该地址传给</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">，在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">B.dll</font><font style="color:rgb(77, 77, 77);">中调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">free</font><font style="color:rgb(77, 77, 77);">函数来释放这个内存。但是这个时候程序却不会崩溃，通过下面的图我们基本可以明白原因了，如图：<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-13.jpeg"></p><p><font style="color:rgb(77, 77, 77);">因为A、B两个dll都是链接的·msvcr100.dll·，同一个dll在一个进程只会被加载一次，所以进程中只会有一个crt堆（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap</font><font style="color:rgb(77, 77, 77);">），</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">malloc</font><font style="color:rgb(77, 77, 77);">和</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">free</font><font style="color:rgb(77, 77, 77);">都是运行时库提供的函数，所以都会调到运行时库里面去，然后从运行时库里面的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">_crtheap</font><font style="color:rgb(77, 77, 77);">分配和释放内存块。因为分配和释放都是在同一个堆上，所以不会崩溃。</font></p><hr><h2 id="十、使用std-string跨MT模块传参"><a href="#十、使用std-string跨MT模块传参" class="headerlink" title="十、使用std::string跨MT模块传参"></a>十、使用std::string跨MT模块传参</h2><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a><font style="color:rgb(79, 79, 79);">1. 问题描述</font></h3><p><font style="color:rgb(77, 77, 77);">这篇文章主要介绍我们在实际开发中经常遇到的一个问题：针对MT模块定义接口函数时，接口参数使用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">std::string</font><font style="color:rgb(77, 77, 77);">类型，在程序运行时遇到</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">“Debug Assertion Failed”</font><font style="color:rgb(77, 77, 77);">错误的问题。<br></font><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-14.jpeg"></p><p><font style="color:rgb(77, 77, 77);">上面的错误提示是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">debug_heap.cpp</font><font style="color:rgb(77, 77, 77);">文件中的一个调试断言（</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">release模式</font><font style="color:rgb(77, 77, 77);">下调用的是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">heap.cpp</font><font style="color:rgb(77, 77, 77);">中的分配函数），用于判断指针是否指向堆分配的内存块的第一块。在release模式下不会弹出这样的断言错误，程序可能会直接崩溃（崩溃相对来说还比较好排查），或者出现其他不可预料的、难以排查的错误。</font></p><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a><font style="color:rgb(79, 79, 79);">2. 实例</font></h3><p><font style="color:rgb(77, 77, 77);">现有</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">DLLUser.exe</font><font style="color:rgb(77, 77, 77);">调用</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">DLL.dll</font><font style="color:rgb(77, 77, 77);">中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TestFun</font><font style="color:rgb(77, 77, 77);">函数，代码量非常小：</font></p><p><strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">DLL.dll</font><strong><strong><font style="color:rgb(79, 79, 79);">中</font></strong></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TestFun</font>****<font style="color:rgb(79, 79, 79);">函数定义：</font></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">DLL_API void TestFun( std::string str)<br>&#123;<br>    return;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">DLLUser.exe</font><strong><strong><font style="color:rgb(79, 79, 79);">中调用</font></strong></strong><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TestFun</font>****<font style="color:rgb(79, 79, 79);">函数：</font></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">int _tmain(int argc, _TCHAR* argv[])<br>&#123;<br>    std::string str = &quot;test&quot;;<br><br>    TestFun(str);<br><br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">上面的代码运行之后程序就会弹出错误断言。原因是</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">std::string</font><font style="color:rgb(77, 77, 77);">在进行</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">值传参</font><font style="color:rgb(77, 77, 77);">的过程中会执行一次深拷贝，即：在堆上分配内存块，拷贝“test”到内存块中，然后将临时形参</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">std::string</font><font style="color:rgb(77, 77, 77);">对象传递到dll中，dll中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TestFun</font><font style="color:rgb(77, 77, 77);">函数在作用域结束后对临时形参进行释放时就出现了错误，因为尝试在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">dll的crt堆</font><font style="color:rgb(77, 77, 77);">中释放由在</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">exe的crt堆</font><font style="color:rgb(77, 77, 77);">中分配的内存块。</font></p><p><img src="/2023/11/14/Win32_Api/%E3%80%90NOTE%E3%80%91Windows%E5%86%85%E5%AD%98%E4%BD%93%E7%B3%BB/image-15.jpeg"></p><h3 id="3-自定义std-allocator解决崩溃"><a href="#3-自定义std-allocator解决崩溃" class="headerlink" title="3. 自定义std::allocator解决崩溃"></a>3. 自定义std::allocator解决崩溃</h3><p><font style="color:rgb(77, 77, 77);">通过上面问题的分析，加上前面几篇文章对Windows内存体系的介绍，我们不难想出解决方案，其中一种方案就是让</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">std::string</font><font style="color:rgb(77, 77, 77);">统一在进程的默认堆上分配内存块，而不是在各个模块的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">crt堆</font><font style="color:rgb(77, 77, 77);">上分配。</font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">vm_allocator</span> : <span class="hljs-keyword">public</span> std::allocator&lt;T&gt; &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-type">size_t</span> size_type;<br>    <span class="hljs-keyword">typedef</span> T* pointer;<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> T* const_pointer;<br><br>    <span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _Tp1&gt;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">rebind</span> &#123;<br>        <span class="hljs-keyword">typedef</span> vm_allocator&lt;_Tp1&gt; other;<br>    &#125;;<br><br>    <span class="hljs-function">pointer <span class="hljs-title">allocate</span><span class="hljs-params">(size_type n, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *hint = <span class="hljs-number">0</span>)</span> </span>&#123;<br>        <span class="hljs-built_in">UNREFERENCED_PARAMETER</span>(hint);<br>        <span class="hljs-type">void</span>* pBuffer = <span class="hljs-built_in">HeapAlloc</span>(<span class="hljs-built_in">GetProcessHeap</span>(), HEAP_ZERO_MEMORY, n * <span class="hljs-built_in">sizeof</span>(T));<br><br>        <span class="hljs-keyword">return</span> (pointer)pBuffer;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deallocate</span><span class="hljs-params">(pointer p, size_type n)</span> </span>&#123;<br>        <span class="hljs-built_in">UNREFERENCED_PARAMETER</span>(n);<br>        <span class="hljs-keyword">if</span> (p) &#123;<br>            <span class="hljs-built_in">HeapFree</span>(<span class="hljs-built_in">GetProcessHeap</span>(), <span class="hljs-number">0</span>, p);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">vm_allocator</span>() <span class="hljs-keyword">throw</span>() : std::<span class="hljs-built_in">allocator</span>&lt;T&gt;() &#123;<br>    &#125;<br><br>    <span class="hljs-built_in">vm_allocator</span>(<span class="hljs-type">const</span> vm_allocator &amp;a) <span class="hljs-built_in">throw</span>() : std::<span class="hljs-built_in">allocator</span>&lt;T&gt;(a) &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> U&gt;<br>    <span class="hljs-built_in">vm_allocator</span>(<span class="hljs-type">const</span> vm_allocator&lt;U&gt; &amp;a) <span class="hljs-built_in">throw</span>() : std::<span class="hljs-built_in">allocator</span>&lt;T&gt;(a) &#123;<br>    &#125;<br><br>    ~<span class="hljs-built_in">vm_allocator</span>() <span class="hljs-built_in">throw</span>() &#123;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> std::basic_string&lt;<span class="hljs-type">char</span>, std::char_traits&lt;<span class="hljs-type">char</span>&gt;, vm_allocator&lt;<span class="hljs-type">char</span>&gt; &gt; mystring;<br><br></code></pre></td></tr></table></figure><p><font style="color:rgb(77, 77, 77);">上面的代码使用自定义的内存分配器</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">vm_allocator<char></font><font style="color:rgb(77, 77, 77);">定义了</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">mystring</font><font style="color:rgb(77, 77, 77);">类，我们只需要将</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">TestFun</font><font style="color:rgb(77, 77, 77);">函数接口中的</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">std::string</font><font style="color:rgb(77, 77, 77);">修改为</font><font style="color:rgb(199, 37, 78);background-color:rgb(249, 242, 244);">mystring</font><font style="color:rgb(77, 77, 77);">即可解决崩溃问题。</font></p><p><font style="color:rgb(77, 77, 77);"></font></p><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows系统上的VirtualAlloc,HeapAlloc和malloc,new的区别</title>
    <link href="/2023/11/14/Win32_Api/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84VirtualAlloc,HeapAlloc%E5%92%8Cmalloc,new%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/11/14/Win32_Api/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84VirtualAlloc,HeapAlloc%E5%92%8Cmalloc,new%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="1-VirtualAlloc"><a href="#1-VirtualAlloc" class="headerlink" title="1. VirtualAlloc"></a>1. VirtualAlloc</h2><p>PVOID VirtualAlloc(PVOID pvAddress, SIZE_T dwSize, DWORD fdwAllocationType, DWORD fdwProtect)</p><p>VirtualAlloc是Windows提供的API，通常用来分配大块的内存。不要用该函数实现通常情况的内存分配。该函数的一个重要特性是可以预定指定地址和大小的虚拟内存空间。例如，希望在进程的地址空间中第50MB的地方分配内存，那么将参数 50<em>1024</em>&#96;1024 &#x3D; 52428800 传递给pvAddress，将需要的内存大小传递给dwSize。如果系统有足够大的闲置区域能满足请求，则系统会将该块区域预订下来并返回预订内存的基地址，否则返回NULL。</p><p>使用VirtualAlloc分配的内存需要使用VirtualFree来释放.</p><h2 id="2-HeapAlloc"><a href="#2-HeapAlloc" class="headerlink" title="2. HeapAlloc"></a>2. HeapAlloc</h2><p>HeapAlloc是Windows提供的API，在进程初始化的时候，系统会在进程的地址空间中创建1M大小的堆，称为默认堆（Default Heap），该大小为默认值，可以通过&#x2F;HEAP连接器开关进行修改。用户也可以通过HeapCreate创建额外的堆，堆的使用可以更有效的进行内存管理，避免线程同步的开销以及快速的释放内存等。HeapAlloc用于从堆上分配一个内存块，如果分配成功则返回内存块的地址。HeapAlloc内部会根据请求的大小以及堆的大小来决定具体的实现，例如在需要大的内存空间时，会自动调用VirtualAlloc函数分配空间。该函数通常用来分配一般大小的内存空间，一些Windows API可能会要求使用该函数进行内存分配并传递给API参数。注意，在分配大的内存块时（例如1M或者更多）最好避免使用堆函数，建议使用VirtualAlloc。</p><p>使用HeapFree释放由HeapAlloc的分配的内存.</p><h2 id="3-malloc"><a href="#3-malloc" class="headerlink" title="3. malloc"></a>3. malloc</h2><p>C语言的内存分配函数，用于分配一般的内存空间，该函数分配的内存不会自动进行初始化。如果使用C语言编程，使用该函数。在Visual C++ 中，malloc函数会调用HeapAlloc函数。</p><p>malloc分配的内存由free函数释放。</p><h2 id="4-new"><a href="#4-new" class="headerlink" title="4. new"></a>4. new</h2><p>C++语言的实现方式，在Visual C++ 中，通过调用HeapAlloc实现内存分配，如果使用C++编程，建议使用new进行一般内存的分配。系统根据调用的方式决定是否对对象进行初始化。</p><p>注意： new 在C++中实际上是操作符而不是函数。</p><p>使用new 分配的内存由delete &#x2F; delete[] 进行释放。</p><h2 id="内存管理有三种方式："><a href="#内存管理有三种方式：" class="headerlink" title="内存管理有三种方式："></a>内存管理有三种方式：</h2><ol><li>虚拟内存，VirtualAlloc之类的函数</li><li>堆，Heapxxx函数，<a href="https://so.csdn.net/so/search?q=malloc&spm=1001.2101.3001.7020">malloc</a>，new等</li><li>内存映射文件，Memory Mapped File</li></ol><p>很多人都会困惑，但是看下面的图片就会比较明白了。这个图片从MSDN上拷来。<br><img src="/2023/11/14/Win32_Api/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84VirtualAlloc,HeapAlloc%E5%92%8Cmalloc,new%E7%9A%84%E5%8C%BA%E5%88%AB/image-0.png"></p><p>堆和虚拟内存，从上面的图片就可以看出，其实所谓的堆，也就是在虚拟内存上抽象出来的。如果直接用Virtualxxx系列函数，是有一些限制的，比如每次只能分配页大小倍数的内存，内存地址也必须对齐什么的。新手很难用。正因为如此，才出现了堆。实际上堆Heap内部就是使用<strong>Virtual</strong>系列函数的。基本思想就是：**先用VirtualAlloc分配一个比较大的内存，然后用户每次申请堆内存的时候，从分配出来的虚拟内存块上指定一块给用户。**比如第一次分配堆内存从A地址开始的100个字节，第二次分配的时候就是A+100开始。</p><p>Memory Mapped File就不太一样了，从上面的图可以看出MMF并没有调用Virtual系列函数。它直接调用内核层了。</p><p>对于malloc和new，这2个并不是操作系统API，它们是语言提供的函数。在不同的系统上面有不同的实现方法，在Windows上面，new调用malloc，malloc调用堆函数（heapxxx），堆函数调用Virtual系列函数。在Linux上面就调用相应的linux API.</p><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>获取磁盘容量</title>
    <link href="/2023/10/16/Win32_Api/%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F/"/>
    <url>/2023/10/16/Win32_Api/%E8%8E%B7%E5%8F%96%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ULARGE_INTEGER lFreeBytesAvailable; <span class="hljs-comment">// bytes available to caller</span><br>ULARGE_INTEGER lTotalNumberOfBytes; <span class="hljs-comment">// bytes on disk</span><br>ULARGE_INTEGER lTotalNumberOfFreeBytes; <span class="hljs-comment">// free bytes on disk</span><br><br>BOOL bRet = <span class="hljs-built_in">GetDiskFreeSpaceEx</span>(strDrvLetter, <br>    &amp;lFreeBytesAvailable, <br>    &amp;lTotalNumberOfBytes, <br>    &amp;lTotalNumberOfFreeBytes<br>    );<br><br><span class="hljs-keyword">if</span>(bRet)<br>&#123;<br>    uTolCapOfBytes = lTotalNumberOfBytes.QuadPart;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="GetDiskFreeSpaceExW-函数-（fileapi-h）"><a href="#GetDiskFreeSpaceExW-函数-（fileapi-h）" class="headerlink" title="GetDiskFreeSpaceExW 函数 （fileapi.h）"></a>GetDiskFreeSpaceExW 函数 （fileapi.h）</h1><p>检索有关磁盘卷上可用空间量的信息，即总空间量、可用空间总量以及与调用线程关联的用户可用的可用空间总量。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">GetDiskFreeSpaceExW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in, optional]  LPCWSTR         lpDirectoryName,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PULARGE_INTEGER lpFreeBytesAvailableToCaller,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PULARGE_INTEGER lpTotalNumberOfBytes,</span></span><br><span class="hljs-params"><span class="hljs-function">  [out, optional] PULARGE_INTEGER lpTotalNumberOfFreeBytes</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>[in, optional] lpDirectoryName</code></p><p>磁盘上的目录。</p><p>如果此参数 <strong>NULL</strong>，则该函数使用当前磁盘的根目录。</p><p>如果此参数是 UNC 名称，则必须包含尾随反斜杠，例如“\MyServer\MyShare\”。</p><p>此参数不必在磁盘上指定根目录。 该函数接受磁盘上的任何目录。</p><p>调用应用程序必须对此具有 FILE_LIST_DIRECTORY 访问权限<br>目录。</p><p><code>[out, optional] lpFreeBytesAvailableToCaller</code></p><p>指向一个变量的指针，该变量接收与调用线程关联的用户可用的磁盘上的可用字节总数。</p><p>此参数可以 <strong>NULL</strong>。</p><p>如果使用每用户配额，此值可能小于磁盘上的可用字节总数。</p><p><code>[out, optional] lpTotalNumberOfBytes</code></p><p>指向一个变量的指针，该变量接收与调用线程关联的用户可用的磁盘上的字节总数。</p><p>此参数可以 <strong>NULL</strong>。</p><p>如果使用每用户配额，此值可能小于磁盘上的字节总数。</p><p>若要确定磁盘或卷上的字节总数，请使用 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/winioctl/ni-winioctl-ioctl_disk_get_length_info">IOCTL_DISK_GET_LENGTH_INFO</a>。</p><p><code>[out, optional] lpTotalNumberOfFreeBytes</code></p><p>指向接收磁盘上可用字节总数的变量的指针。</p><p>此参数可以 <strong>NULL</strong>。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>如果函数成功，则返回值为非零。</p><p>如果函数失败，则返回值为零（0）。 若要获取扩展的错误信息，请调用 <a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>。</p><h2 id="言论"><a href="#言论" class="headerlink" title="言论"></a>言论</h2><p>此函数获取的值的类型为 <a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-ularge_integer~r1">ULARGE_INTEGER</a>。 不要将这些值截断为 32 位。</p><p><strong>GetDiskFreeSpaceEx</strong>函数为<strong>lpTotalNumberOfFreeBytes</strong>返回零（0），并且 所有 CD 请求的 <strong>lpFreeBytesAvailable</strong>，除非磁盘是 CD-RW 驱动器中的未写入 CD。</p><p>符号链接行为 - 如果路径指向符号链接，则对目标执行操作。</p><p><font style="background-color:#D8DAD9;">备注</font></p><p><font style="background-color:#D8DAD9;">fileapi.h 标头将 GetDiskFreeSpaceEx 定义为一个别名，该别名根据 UNICODE 预处理器常量的定义自动选择此函数的 ANSI 或 Unicode 版本。 将中性编码别名与不中性编码的代码混合使用可能会导致编译或运行时错误不匹配。 有关详细信息，请参阅函数原型的 约定。</font></p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><table><thead><tr><th>要求</th><th>价值</th></tr></thead><tbody><tr><td><strong>最低支持的客户端</strong></td><td>Windows XP [桌面应用</td></tr><tr><td><strong>支持的最低服务器</strong></td><td>Windows Server 2003 [桌面应用</td></tr><tr><td><strong>目标平台</strong></td><td>窗户</td></tr><tr><td><strong>标头</strong></td><td>fileapi.h （包括 Windows.h）</td></tr><tr><td><strong>库</strong></td><td>Kernel32.lib</td></tr><tr><td><strong>DLL</strong></td><td>Kernel32.dll</td></tr></tbody></table><h2 id="另请参阅"><a href="#另请参阅" class="headerlink" title="另请参阅"></a>另请参阅</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/FileIO/disk-management-functions">磁盘管理功能</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/fileapi/nf-fileapi-getdiskfreespacea">GetDiskFreeSpace</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a></p>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>管理员身份运行、软件单开</title>
    <link href="/2023/08/05/Win32_Api/%E7%AE%A1%E7%90%86%E5%91%98%E8%BA%AB%E4%BB%BD%E8%BF%90%E8%A1%8C%E3%80%81%E8%BD%AF%E4%BB%B6%E5%8D%95%E5%BC%80/"/>
    <url>/2023/08/05/Win32_Api/%E7%AE%A1%E7%90%86%E5%91%98%E8%BA%AB%E4%BB%BD%E8%BF%90%E8%A1%8C%E3%80%81%E8%BD%AF%E4%BB%B6%E5%8D%95%E5%BC%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// MainUI.cpp : 定义应用程序的类行为。</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MainUI.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;MainUIDlg.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _DEBUG</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> new DEBUG_NEW</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">// CMainUIApp</span><br><br><span class="hljs-built_in">BEGIN_MESSAGE_MAP</span>(CMainUIApp, CWinApp)<br><span class="hljs-built_in">ON_COMMAND</span>(ID_HELP, &amp;CWinApp::OnHelp)<br><span class="hljs-built_in">END_MESSAGE_MAP</span>()<br><br><br><span class="hljs-comment">// CMainUIApp 构造</span><br><br>CMainUIApp::<span class="hljs-built_in">CMainUIApp</span>()<br>&#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 在此处添加构造代码，</span><br><span class="hljs-comment">// 将所有重要的初始化放置在 InitInstance 中</span><br>&#125;<br><br><span class="hljs-function">BOOL <span class="hljs-title">RunAsRestart</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> count;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> _UNICODE</span><br>TCHAR** cmd = ::<span class="hljs-built_in">CommandLineToArgvW</span>(::<span class="hljs-built_in">GetCommandLine</span>(), &amp;count);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>TCHAR** cmd = ::__argv;<br>count = ::__argc;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">2</span> || _tcscmp(cmd[<span class="hljs-number">1</span>], _T(<span class="hljs-string">&quot;runas&quot;</span>)) != <span class="hljs-number">0</span>)<br>&#123;<br>TCHAR path[MAX_PATH];<br>::<span class="hljs-built_in">GetModuleFileName</span>(<span class="hljs-literal">NULL</span>, path, MAX_PATH);<br><span class="hljs-keyword">if</span> (::<span class="hljs-built_in">ShellExecute</span>(<span class="hljs-literal">NULL</span>, _T(<span class="hljs-string">&quot;runas&quot;</span>), path, _T(<span class="hljs-string">&quot;runas&quot;</span>), <span class="hljs-literal">NULL</span>, SW_SHOWNORMAL) &gt; (HINSTANCE)<span class="hljs-number">32</span>)<br>&#123;<br><span class="hljs-keyword">return</span> TRUE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">// 唯一的一个 CMainUIApp 对象</span><br><br>CMainUIApp theApp;<br><br><br><span class="hljs-comment">// CMainUIApp 初始化</span><br><br><span class="hljs-function">BOOL <span class="hljs-title">CMainUIApp::InitInstance</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//默认已管理员身份运行</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">IsUserAnAdmin</span>()) &#123; <br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">RunAsRestart</span>()) &#123;<br><span class="hljs-keyword">return</span> FALSE; <br>&#125; <br>&#125; <br><br><span class="hljs-comment">//程序只能运行一次，用互斥量来判断程序是否已运行</span><br>HANDLE m_hMutex = <span class="hljs-built_in">CreateMutex</span>(<span class="hljs-literal">NULL</span>,TRUE,m_pszAppName);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">GetLastError</span>() == ERROR_ALREADY_EXISTS)<br>&#123;<br><span class="hljs-built_in">CloseHandle</span>(m_hMutex);<br>m_hMutex = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">AfxMessageBox</span>(<span class="hljs-string">&quot;该程序已经运行&quot;</span>,MB_ICONEXCLAMATION);<br><span class="hljs-comment">//ExitProcess(0);</span><br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br><span class="hljs-comment">// 如果一个运行在 Windows XP 上的应用程序清单指定要</span><br><span class="hljs-comment">// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，</span><br><span class="hljs-comment">//则需要 InitCommonControlsEx()。否则，将无法创建窗口。</span><br>INITCOMMONCONTROLSEX InitCtrls;<br>InitCtrls.dwSize = <span class="hljs-built_in">sizeof</span>(InitCtrls);<br><span class="hljs-comment">// 将它设置为包括所有要在应用程序中使用的</span><br><span class="hljs-comment">// 公共控件类。</span><br>InitCtrls.dwICC = ICC_WIN95_CLASSES;<br><span class="hljs-built_in">InitCommonControlsEx</span>(&amp;InitCtrls);<br><br>CWinApp::<span class="hljs-built_in">InitInstance</span>();<br><br><span class="hljs-built_in">AfxEnableControlContainer</span>();<br><br><span class="hljs-comment">// 标准初始化</span><br><span class="hljs-comment">// 如果未使用这些功能并希望减小</span><br><span class="hljs-comment">// 最终可执行文件的大小，则应移除下列</span><br><span class="hljs-comment">// 不需要的特定初始化例程</span><br><span class="hljs-comment">// 更改用于存储设置的注册表项</span><br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 应适当修改该字符串，</span><br><span class="hljs-comment">// 例如修改为公司或组织名</span><br><span class="hljs-built_in">SetRegistryKey</span>(_T(<span class="hljs-string">&quot;应用程序向导生成的本地应用程序&quot;</span>));<br><br>CMainUIDlg dlg;<br>m_pMainWnd = &amp;dlg;<br>INT_PTR nResponse = dlg.<span class="hljs-built_in">DoModal</span>();<br><span class="hljs-keyword">if</span> (nResponse == IDOK)<br>&#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 在此处放置处理何时用“确定”来关闭</span><br><span class="hljs-comment">//  对话框的代码</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nResponse == IDCANCEL)<br>&#123;<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 在此放置处理何时用“取消”来关闭</span><br><span class="hljs-comment">//  对话框的代码</span><br>&#125;<br><br><span class="hljs-comment">// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，</span><br><span class="hljs-comment">//  而不是启动应用程序的消息泵。</span><br><span class="hljs-keyword">return</span> FALSE;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ellipse函数画圆</title>
    <link href="/2023/08/05/Win32_Api/Ellipse%E5%87%BD%E6%95%B0%E7%94%BB%E5%9C%86/"/>
    <url>/2023/08/05/Win32_Api/Ellipse%E5%87%BD%E6%95%B0%E7%94%BB%E5%9C%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Ellipse-函数-wingdi-h"><a href="#Ellipse-函数-wingdi-h" class="headerlink" title="Ellipse 函数 (wingdi.h)"></a>Ellipse 函数 (wingdi.h)</h1><p><strong>Ellipse</strong>函数绘制一个椭圆。 椭圆的中心是指定边界矩形的中心。 椭圆形是使用当前笔轮廓的，并使用当前画笔填充。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">BOOL <span class="hljs-title">Ellipse</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] HDC hdc,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> left,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> top,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> right,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> bottom</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>[in] hdc</code></p><p>设备上下文的句柄。</p><p><code>[in] left</code></p><p>边界矩形左上角的 x 坐标（以逻辑坐标表示）。</p><p><code>[in] top</code></p><p>边界矩形左上角的 y 坐标（以逻辑坐标表示）。</p><p><code>[in] right</code></p><p>边界矩形右下角的 x 坐标（以逻辑坐标表示）。</p><p><code>[in] bottom</code></p><p>边界矩形右下角的 y 坐标（以逻辑坐标表示）。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>如果该函数成功，则返回值为非零值。</p><p>如果函数失败，则返回值为零。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>Ellipse</strong> 既不使用也不更新当前位置。</p><p><strong>Windows 95</strong>和<strong>Windows 98</strong>：限定矩形的坐标值之和不能超过32767。nLeftRect与nRigthRect或nTopRectn与BottomRect之和不能超过32767</p><hr><p> <strong>注意：</strong></p><p><strong>Ellipse(x1,y1,x2,y2),你必须确保x2-x1&#x3D;&#x3D;y2-y1,这样你画出的就是正圆,而不是椭圆了.</strong></p><h1 id="不用Windows自带的画椭圆函数画椭圆方法参考"><a href="#不用Windows自带的画椭圆函数画椭圆方法参考" class="headerlink" title="不用Windows自带的画椭圆函数画椭圆方法参考"></a>不用Windows自带的画椭圆函数画椭圆方法参考</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-comment">//画一个椭圆中点算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CGraphicsView::midleEllipse</span><span class="hljs-params">(<span class="hljs-type">int</span> xCenter, <span class="hljs-type">int</span> yCenter, <span class="hljs-type">int</span> Rx, <span class="hljs-type">int</span> Ry, HDC dc)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> Rx2 = Rx*Rx;<br><span class="hljs-type">int</span> Ry2 = Ry*Ry;<br><span class="hljs-type">int</span> twoRx2 = <span class="hljs-number">2</span>*Rx2;<br><span class="hljs-type">int</span> twoRy2 = <span class="hljs-number">2</span>*Ry2;<br><span class="hljs-type">int</span> p;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> y=Ry;<br><span class="hljs-type">int</span> px = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> py = twoRx2*y;<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-comment">//Region 1</span><br>p = (<span class="hljs-type">int</span>)(Ry2-Rx2*Ry<span class="hljs-number">+0.25</span>*Rx2);<br><span class="hljs-keyword">while</span>(px&lt;py)<br>&#123;<br>x++;<br>px+=twoRy2;<br><span class="hljs-keyword">if</span>(p&lt;<span class="hljs-number">0</span>)<br>p+=Ry2+px;<br><span class="hljs-keyword">else</span><br>&#123;<br>y--;<br>py-=twoRx2;<br>p+=Ry2+px-py;<br>&#125;<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>&#125;<br><span class="hljs-comment">//Region 2</span><br>p = (<span class="hljs-type">int</span>)(Ry2*(x<span class="hljs-number">+0.5</span>)*(x<span class="hljs-number">+0.5</span>)+Rx2*(y<span class="hljs-number">-1</span>)*(y<span class="hljs-number">-1</span>)-Rx2*Ry2);<br><span class="hljs-keyword">while</span>(y&gt;<span class="hljs-number">0</span>)<br>&#123;<br>y--;<br>py-=twoRx2;<br><span class="hljs-keyword">if</span>(p&gt;<span class="hljs-number">0</span>)<br>p+=Rx2-py;<br><span class="hljs-keyword">else</span><br>&#123;<br>x++;<br>px+=twoRy2;<br>p+=Rx2-py+px;<br>&#125;<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// 画圆</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">circleMidpoint</span><span class="hljs-params">(<span class="hljs-type">int</span> xCenter,<span class="hljs-type">int</span> yCenter,<span class="hljs-type">int</span> radius,HDC dc)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> y = radius;<br><span class="hljs-type">int</span> p=<span class="hljs-number">1</span>-radius;<br><span class="hljs-keyword">while</span>(x&lt;y)<br>&#123;<br>x++;<br><span class="hljs-keyword">if</span>(p&lt;<span class="hljs-number">0</span>)<br>&#123;<br>p+=<span class="hljs-number">2</span>*x<span class="hljs-number">+1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>y--;<br>p+=<span class="hljs-number">2</span>*(x-y)<span class="hljs-number">+1</span>;<br>&#125;<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter+y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-x,yCenter-y,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+y,yCenter+x,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-y,yCenter+x,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter+y,yCenter-x,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br><span class="hljs-built_in">SetPixel</span>(dc,xCenter-y,yCenter-x,<span class="hljs-built_in">RGB</span>(<span class="hljs-number">255</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MulDiv函数(winbase.h)</title>
    <link href="/2023/08/05/Win32_Api/MulDiv%E5%87%BD%E6%95%B0(winbase.h)/"/>
    <url>/2023/08/05/Win32_Api/MulDiv%E5%87%BD%E6%95%B0(winbase.h)/</url>
    
    <content type="html"><![CDATA[<h1 id="MulDiv函数-winbase-h"><a href="#MulDiv函数-winbase-h" class="headerlink" title="MulDiv函数(winbase.h)"></a>MulDiv函数(winbase.h)</h1><p>将两个 32 位值相乘，然后将 64 位结果除以第三个 32 位值。 最终结果舍入为最接近的整数。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MulDiv</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> nNumber,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> nNumerator,</span></span><br><span class="hljs-params"><span class="hljs-function">  [in] <span class="hljs-type">int</span> nDenominator</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>[in] nNumber</code></p><p>被乘数。</p><p><code>[in] nNumerator</code></p><p>乘数。</p><p><code>[in] nDenominator</code></p><p>乘法运算结果要除以的数字。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>如果函数成功，则返回值是乘法和除法的结果，舍入到最接近的整数。 如果结果为正半整数 (以 .5) 结尾，则会向上舍入。 如果结果为负半整数，则会向下舍入。</p><p>如果发生溢出或 nDenominator 为 0，则返回值为 -1。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><table><thead><tr><th>要求</th><th>值</th></tr></thead><tbody><tr><td><strong>最低受支持的客户端</strong></td><td>Windows XP [桌面应用</td></tr><tr><td><strong>最低受支持的服务器</strong></td><td>Windows Server 2003 [桌面应用</td></tr><tr><td><strong>目标平台</strong></td><td>Windows</td></tr><tr><td><strong>标头</strong></td><td>winbase.h (包括 Windows.h)</td></tr><tr><td><strong>Library</strong></td><td>Kernel32.lib</td></tr><tr><td><strong>DLL</strong></td><td>Kernel32.dll</td></tr></tbody></table><h2 id="另请参阅"><a href="#另请参阅" class="headerlink" title="另请参阅"></a>另请参阅</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/winnt/nf-winnt-int32x32to64">Int32x32To64</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/WinProg/large-integers">大整数</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/winnt/nf-winnt-uint32x32to64">UInt32x32To64</a></p><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于ULARGE_INTEGER在计算磁盘容量时候的运算</title>
    <link href="/2023/08/05/Win32_Api/%E5%85%B3%E4%BA%8EULARGE_INTEGER%E5%9C%A8%E8%AE%A1%E7%AE%97%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%97%B6%E5%80%99%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <url>/2023/08/05/Win32_Api/%E5%85%B3%E4%BA%8EULARGE_INTEGER%E5%9C%A8%E8%AE%A1%E7%AE%97%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%97%B6%E5%80%99%E7%9A%84%E8%BF%90%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h1 id="ULARGE-INTEGER-union-winnt-h"><a href="#ULARGE-INTEGER-union-winnt-h" class="headerlink" title="ULARGE_INTEGER union (winnt.h)"></a>ULARGE_INTEGER union (winnt.h)</h1><p>表示 64 位无符号整数值。</p><p><strong>注意 C 编译器可能本机支持 64 位整数。 例如，Microsoft Visual C++支持</strong><a href="https://learn.microsoft.com/zh-cn/windows/desktop/Midl/--int64"><strong>__int64</strong></a><strong>大小的整数类型。 有关详细信息，请参阅 C 编译器随附的文档。</strong></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span> <span class="hljs-title class_">_ULARGE_INTEGER</span> &#123;<br>  <span class="hljs-keyword">struct</span> &#123;<br>    DWORD LowPart;<br>    DWORD HighPart;<br>  &#125; DUMMYSTRUCTNAME;<br>  <span class="hljs-keyword">struct</span> &#123;<br>    DWORD LowPart;<br>    DWORD HighPart;<br>  &#125; u;<br>  ULONGLONG QuadPart;<br>&#125; ULARGE_INTEGER;<br></code></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><strong>ULARGE_INTEGER</strong>结构实际上是一个联合。 如果编译器具有对 64 位整数的内置支持，请使用 <strong>QuadPart</strong> 成员来存储 64 位整数。 否则，请使用 <strong>LowPart</strong> 和 <strong>HighPart</strong> 成员来存储 64 位整数。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><table><thead><tr><th>要求</th><th>值</th></tr></thead><tbody><tr><td><strong>最低受支持的客户端</strong></td><td>Windows 10内部版本 20348</td></tr><tr><td><strong>最低受支持的服务器</strong></td><td>Windows 10内部版本 20348</td></tr><tr><td><strong>标头</strong></td><td>winnt.h</td></tr></tbody></table><h2 id="另请参阅"><a href="#另请参阅" class="headerlink" title="另请参阅"></a>另请参阅</h2><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/minwinbase/ns-minwinbase-filetime">FILETIME</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/win32/api/winnt/ns-winnt-large_integer-r1">LARGE_INTEGER</a></p><p><a href="https://learn.microsoft.com/zh-cn/windows/desktop/api/minwinbase/ns-minwinbase-systemtime">SYSTEMTIME</a></p><hr><p>上面是MSDN上的说明！</p><p>############################################################</p><p>由于在32位PC上无法int最大值为2^32，所以，对于64位数的存放采取了这样一种数据结构，假如我们要对这个64位的数字进行运算的话应该怎么办呢？</p><p>例如 使用BOOL GetDiskFreeSpaceEx() 获得磁盘信息时候</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">PULARGE_INTEGER FreeBytesAvailableToCaller;<br><br><br>……<br><br><span class="hljs-function">BOOL <span class="hljs-title">GetDiskFreeSpaceEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">  LPCWSTR lpDirectoryName,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULARGE_INTEGER lpFreeBytesAvailableToCaller,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULARGE_INTEGER lpTotalNumberOfBytes,</span></span><br><span class="hljs-params"><span class="hljs-function">  PULARGE_INTEGER lpTotalNumberOfFreeBytes</span></span><br><span class="hljs-params"><span class="hljs-function">)</span></span><br></code></pre></td></tr></table></figure><p><strong>获取了磁盘空间之后，由于得到的值是以字节为单位的，这里，我们想将其转化为以G为单位的。</strong></p><h1 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h1><p><img src="/2023/08/05/Win32_Api/%E5%85%B3%E4%BA%8EULARGE_INTEGER%E5%9C%A8%E8%AE%A1%E7%AE%97%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%97%B6%E5%80%99%E7%9A%84%E8%BF%90%E7%AE%97/image-0.png"></p><p>(float)FreeBytesAvailableToCaller.HighPart &lt;&lt; 2 + (float)FreeBytesAvailableToCaller.LowPart &#x2F; (1024<em>1024</em>1024);</p><p>原理： 首先，在计算机中所有数字都是以二进制存储的，HighPart是高32位，LowPart是低32位，摒弃你脑袋里的10进制概念，将这两部分均以2进制的视角来看。。。1G是2^30字节，所以低32位再除以2^30后，低32位的高2位仍未改变（切记是二进制的视角）。。同理，高32位的每位在计算后也肯定不会改变，即30位以后的都不作改变，所以将30位之后的所有二进制位整合，就可以得到整个64位数除以2^30的二进制整数部分结果了，这里(float)FreeBytesAvailableToCaller.HighPart&lt;&lt;2即空出俩位与后32位的高2位整合（HighPart&lt;&lt;2可以用*4代替）。。。</p><h1 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h1><p><img src="/2023/08/05/Win32_Api/%E5%85%B3%E4%BA%8EULARGE_INTEGER%E5%9C%A8%E8%AE%A1%E7%AE%97%E7%A3%81%E7%9B%98%E5%AE%B9%E9%87%8F%E6%97%B6%E5%80%99%E7%9A%84%E8%BF%90%E7%AE%97/image-1.png"></p><p>(float)FreeBytesAvailableToCaller.QuadPart &#x2F; (1024<em>1024</em>1024)</p><p>直接计算。。。</p><p>实际代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">voidGetDiskFreeSpaceEx</span>(LPCTSTR lpDirectoryName)<br>&#123;<br>    BOOL fResult=::<span class="hljs-built_in">GetDiskFreeSpaceEx</span>(lpDirectoryName,<br>                                      (PULARGE_INTEGER)&amp;m_i64FreeBytesToCaller,<br>                                      (PULARGE_INTEGER)&amp;m_i64TotalBytes,<br>                                      (PULARGE_INTEGER)&amp;m_i64FreeBytes);<br>    <br>    <span class="hljs-keyword">if</span>(fResult)<br>    &#123;<br>        m_i64FreeBytesToCaller=(<span class="hljs-type">float</span>)(((PULARGE_INTEGER)&amp;m_i64FreeBytesToCaller)-&gt;HighPart&lt;&lt;<span class="hljs-number">2</span>)+(<span class="hljs-type">float</span>)((PULARGE_INTEGER)&amp;m_i64FreeBytesToCaller)-&gt;LowPart/(<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>);<br>            m_i64TotalBytes=(<span class="hljs-type">float</span>)(((PULARGE_INTEGER)&amp;m_i64TotalBytes)-&gt;HighPart&lt;&lt;<span class="hljs-number">2</span>)+(<span class="hljs-type">float</span>)((PULARGE_INTEGER)&amp;m_i64TotalBytes)-&gt;LowPart/(<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>);<br>            cout&lt;&lt;<span class="hljs-string">&quot;totalspace:&quot;</span>&lt;&lt;m_i64TotalBytes&lt;&lt;<span class="hljs-string">&quot;GB&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//磁盘总容量</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;freespace:&quot;</span>&lt;&lt;m_i64FreeBytesToCaller&lt;&lt;<span class="hljs-string">&quot;GB&quot;</span>;<span class="hljs-comment">//磁盘剩余容量</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            cout&lt;&lt;<span class="hljs-string">&quot;设备为准备好&quot;</span>;<br>        cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Win32_API</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpirngBoot2</title>
    <link href="/2023/02/21/Spring/SpringBoot2/"/>
    <url>/2023/02/21/Spring/SpringBoot2/</url>
    
    <content type="html"><![CDATA[<h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="1、项目介绍"><a href="#1、项目介绍" class="headerlink" title="1、项目介绍"></a>1、项目介绍</h2><p>商业模式：<u>b2c</u>、b2b2c</p><p>功能模块：</p><p><img src="/2023/02/21/Spring/SpringBoot2/image-0.png"></p><h2 id="2、MyBtis-Plus"><a href="#2、MyBtis-Plus" class="headerlink" title="2、MyBtis-Plus"></a>2、MyBtis-Plus</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:13306/userdb?useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">abc123</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><ol><li><font style="color:#cc7832;">public interface </font>UserMapper<u> </u><u><font style="color:#cc7832;">extends </font></u><u>BaseMapper<User></u></li><li><u><font style="color:#bbb529;">@MapperScan</font></u><u>(</u><u><font style="color:#6a8759;">“com.wx.ssm.mapper”</font></u><u>)</u></li><li><font style="color:#cc7832;">public interface </font>UserService<u> </u><u><font style="color:#cc7832;">extends </font></u><u>IService<User> </u></li><li><font style="color:#cc7832;">public class </font>UserServiceImp<u> </u><u><font style="color:#cc7832;">extends </font></u><u>ServiceImpl&lt;UserMapper</u><u><font style="color:#cc7832;">, </font></u><u>User&gt; </u><font style="color:#cc7832;">implements </font>UserService</li></ol><h3 id="2、主键策略"><a href="#2、主键策略" class="headerlink" title="2、主键策略"></a>2、<font style="color:rgb(0, 0, 0);">主键策略</font></h3><p><font style="color:rgb(255, 0, 0);">参考资料：分布式系统唯一ID生成方案汇总：</font><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><ol><li><font style="color:rgb(0, 0, 0);">ID_WORKER</font></li></ol><p><font style="color:rgb(44, 62, 80);">MyBatis-Plus默认的主键策略是：</font><font style="color:rgb(71, 101, 130);">ID_WORKER  </font><font style="color:rgb(128, 128, 128);">全局唯一ID</font></p><p><font style="color:#595959;">自 3.3.0 开始,默认使用雪花算法+UUID(不含中划线)</font></p><ol start="2"><li><font style="color:rgb(0, 0, 0);">自增策略</font></li><li>UUID</li><li>Redis生成ID</li><li>Twitter的snowflake算法</li></ol><p><font style="color:rgb(75, 75, 75);">snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。具体实现的代码可以参看</font><a href="https://github.com/twitter/snowflake">https://github.com/twitter/snowflake</a><font style="color:rgb(75, 75, 75);">。雪花算法支持的TPS可以达到419万左右（2^22*1000）。</font></p><h3 id="3、自动填充功能"><a href="#3、自动填充功能" class="headerlink" title="3、自动填充功能"></a>3、自动填充功能</h3><ol><li><font style="color:rgb(0, 64, 80);">注解填充字段 </font>@TableField(.. fill &#x3D; FieldFill.INSERT)</li><li><font style="color:rgb(0, 64, 80);">自定义实现类 实现元对象处理器接口：com.baomidou.mybatisplus.core.handlers.</font><u><font style="color:rgb(0, 64, 80);">MetaObjectHandler</font></u></li><li><font style="color:rgb(107, 89, 0);">声明</font>@Component<font style="color:rgb(107, 89, 0);">或</font>@Bean<font style="color:rgb(107, 89, 0);">注入</font></li></ol><h3 id="4、乐观锁"><a href="#4、乐观锁" class="headerlink" title="4、乐观锁"></a>4、乐观锁</h3><ol><li><font style="color:rgb(0, 64, 80);">配置插件</font></li></ol><p><font style="color:rgb(0, 64, 80);">spring xml 方式:</font></p><p><font style="color:rgb(0, 64, 80);">spring boot 注解方式:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>    interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OptimisticLockerInnerInterceptor</span>());<br>    <span class="hljs-keyword">return</span> interceptor;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><font style="color:rgb(0, 64, 80);">在实体类的字段上加上</font>@Version<font style="color:rgb(0, 64, 80);">注解</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure><h3 id="5、分页插件"><a href="#5、分页插件" class="headerlink" title="5、分页插件"></a>5、分页插件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">mybatisPlusInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();<br>        <span class="hljs-type">PaginationInnerInterceptor</span> <span class="hljs-variable">paginationInnerInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>();<br>        paginationInnerInterceptor.setOverflow(<span class="hljs-literal">true</span>);<br>        paginationInnerInterceptor.setMaxLimit(<span class="hljs-number">500L</span>);<br>        mybatisPlusInterceptor.addInnerInterceptor(paginationInnerInterceptor);<br>        <span class="hljs-keyword">return</span> mybatisPlusInterceptor;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Page<User> page &#x3D; <font style="color:#cc7832;">new </font>Page&lt;&gt;(pn<font style="color:#cc7832;">, </font><font style="color:#6897bb;">3</font>)<font style="color:#cc7832;">;<br></font><font style="color:#9876aa;">userService</font>.page(page<font style="color:#cc7832;">, null</font>)<font style="color:#cc7832;">;</font></p><h3 id="6、逻辑删除"><a href="#6、逻辑删除" class="headerlink" title="6、逻辑删除"></a>6、逻辑删除</h3><p><font style="color:rgb(0, 64, 80);">步骤1: 配置</font></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">logic-delete-field:</span> <span class="hljs-string">flag</span> <span class="hljs-comment"># 全局逻辑删除的实体字段名(since 3.3.0, 配置后可以忽略不配置步骤2)</span><br>      <span class="hljs-attr">logic-delete-value:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br>      <span class="hljs-attr">logic-not-delete-value:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br></code></pre></td></tr></table></figure><p>步<font style="color:rgb(0, 64, 80);">骤 2: 实体类字段上加上</font>@TableLogic<font style="color:rgb(0, 64, 80);">注解</font></p><h3 id="7、条件构造器"><a href="#7、条件构造器" class="headerlink" title="7、条件构造器"></a>7、条件构造器</h3><h1 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h1><h2 id="1、前后端分离开发概念"><a href="#1、前后端分离开发概念" class="headerlink" title="1、前后端分离开发概念"></a>1、前后端分离开发概念</h2><h2 id="2、讲师管理模块（后端）"><a href="#2、讲师管理模块（后端）" class="headerlink" title="2、讲师管理模块（后端）"></a>2、讲师管理模块（后端）</h2><h3 id="一、讲师管理模块配置"><a href="#一、讲师管理模块配置" class="headerlink" title="一、讲师管理模块配置"></a><font style="color:rgb(0, 0, 0);">一、讲师管理模块配置</font></h3><p><font style="color:rgb(0, 0, 0);">1、在service下面service-edu模块中创建配置文件</font></p><p><font style="color:rgb(0, 0, 0);">resources目录下创建文件 application.properties</font>或者在resources目录下创建文件 <font style="background-color:rgb(239, 239, 239);">application.yml</font></p><p><font style="color:rgb(0, 0, 0);">2、创建MP代码生成器</font></p><h3 id="二、编写后台管理api接口"><a href="#二、编写后台管理api接口" class="headerlink" title="二、编写后台管理api接口"></a><font style="color:rgb(0, 0, 0);">二、编写后台管理api接口</font></h3><p><font style="color:rgb(0, 0, 0);">1、编写controller代码</font></p><p><font style="color:rgb(0, 0, 0);">2、创建SpringBoot配置类，配置包扫描</font></p><p><font style="color:rgb(0, 0, 0);">3、配置SQL执行性能分析插件</font></p><p><font style="color:rgb(0, 0, 0);">4、创建SpringBoot启动类</font></p><p><font style="color:rgb(0, 0, 0);">5、运行启动类 </font><a href="http://localhost:8001/eduservice/teacher/findAll">http://localhost:8001/eduservice/teacher/findAll</a></p><p><font style="color:rgb(0, 0, 0);">6、统一返回的json时间格式</font></p><h3 id="三、讲师逻辑删除功能"><a href="#三、讲师逻辑删除功能" class="headerlink" title="三、讲师逻辑删除功能"></a><font style="color:rgb(0, 0, 0);">三、讲师逻辑删除功能</font></h3><p><font style="color:rgb(0, 0, 0);">1、字段添加</font><font style="color:#bbb529;">@TableLogic</font></p><p><font style="color:rgb(0, 0, 0);">2、配置逻辑删除插件    MyBatisPlusConfig中配置</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 逻辑删除插件</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-keyword">public</span> ISqlInjector <span class="hljs-title function_">sqlInjector</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogicSqlInjector</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">3、EduTeacherController添加删除方法</font></p><p><font style="color:rgb(0, 0, 0);">4、使用postman测试删除</font></p><h3 id="四、跨域配置"><a href="#四、跨域配置" class="headerlink" title="四、跨域配置"></a><font style="color:rgb(0, 0, 0);">四、跨域配置</font></h3><p><font style="color:rgb(0, 0, 0);">1、什么是跨域</font></p><p><font style="color:rgb(0, 0, 0);">浏览器从一个域名的网页去请求另一个域名的资源时，</font><font style="color:rgb(255, 0, 0);">域名、端口、协议任一不同，都是跨域 </font><font style="color:rgb(0, 0, 0);">。前后端分离开发中，需要考虑ajax跨域的问题。</font></p><p><font style="color:rgb(0, 0, 0);">这里我们可以从服务端解决这个问题</font></p><p><font style="color:rgb(0, 0, 0);">2、配置</font></p><p><font style="color:rgb(0, 0, 0);">在Controller类上添加注解</font><font style="color:rgb(85, 85, 85);">@CrossOrigin</font> <font style="color:rgb(170, 85, 0);">&#x2F;&#x2F;跨域</font></p><h2 id="3、配置Swagger2生成API接口文档"><a href="#3、配置Swagger2生成API接口文档" class="headerlink" title="3、配置Swagger2生成API接口文档"></a>3、配置Swagger2生成API接口文档</h2><h3 id="一、Swagger2介绍"><a href="#一、Swagger2介绍" class="headerlink" title="一、Swagger2介绍"></a><font style="color:rgb(0, 0, 0);">一、Swagger2介绍</font></h3><h3 id="二、配置Swagger2"><a href="#二、配置Swagger2" class="headerlink" title="二、配置Swagger2"></a><font style="color:rgb(0, 0, 0);">二、配置Swagger2</font></h3><p><font style="color:rgb(0, 0, 0);">1、创建common模块，在guli-parent下创建模块common</font></p><p><font style="color:rgb(0, 0, 0);">2、在common中引入相关依赖</font></p><p><font style="color:rgb(0, 0, 0);">3、在common下面创建子模块service-base</font></p><p><font style="color:rgb(0, 0, 0);">3、在模块service-base中，创建swagger的配置类</font></p><p><font style="color:rgb(0, 0, 0);">4、在模块service模块中引入service-base</font></p><p><font style="color:rgb(0, 0, 0);">5、在service-edu启动类上添加注解 扫描包，进行测试 </font><a href="http://localhost:8001/swagger-ui.html#/">http://localhost:8001/swagger-ui.htm</a>l</p><p><font style="color:rgb(0, 0, 0);">6、API模型?</font></p><p><font style="color:rgb(0, 0, 0);">7、定义接口说明和参数说明</font></p><p><font style="color:rgb(0, 0, 0);">定义在类上：@Api</font></p><p><font style="color:rgb(0, 0, 0);">定义在方法上：@ApiOperation</font></p><p><font style="color:rgb(0, 0, 0);">定义在参数上：@ApiParam</font></p><h2 id="4、统一返回结果对象"><a href="#4、统一返回结果对象" class="headerlink" title="4、统一返回结果对象"></a>4、统一返回结果对象</h2><h3 id="一、统一返回数据格式"><a href="#一、统一返回数据格式" class="headerlink" title="一、统一返回数据格式"></a><font style="color:rgb(0, 0, 0);">一、统一返回数据格式</font></h3><h3 id="二、创建统一结果返回类"><a href="#二、创建统一结果返回类" class="headerlink" title="二、创建统一结果返回类"></a><font style="color:rgb(0, 0, 0);">二、创建统一结果返回类</font></h3><p><font style="color:rgb(0, 0, 0);">1、在common模块下创建子模块common-utils</font></p><p><font style="color:rgb(0, 0, 0);">2、创建接口定义返回码   </font></p><p><font style="color:rgb(0, 0, 0);"> ResultCode.java</font></p><p><font style="color:rgb(0, 0, 0);">4、创建结果类   </font></p><p><font style="color:rgb(0, 0, 0);">R.java</font></p><h3 id="三、统一返回结果使用"><a href="#三、统一返回结果使用" class="headerlink" title="三、统一返回结果使用"></a><font style="color:rgb(0, 0, 0);">三、统一返回结果使用</font></h3><p><font style="color:rgb(0, 0, 0);">1、在service模块中添加依赖</font></p><p><font style="color:rgb(0, 0, 0);">2、修改Controller中的返回结果</font></p><h2 id="5、分页和条件查询接口开发"><a href="#5、分页和条件查询接口开发" class="headerlink" title="5、分页和条件查询接口开发"></a>5、分页和条件查询接口开发</h2><h3 id="一、分页"><a href="#一、分页" class="headerlink" title="一、分页"></a><font style="color:rgb(0, 0, 0);">一、分页</font></h3><p>1、MyBatisPlusConfig中配置分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页插件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title function_">paginationInterceptor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInterceptor</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>2、分页Controller方法</p><p>TeacherAdminController中添加分页方法</p><p>3、Swagger中测试</p><h3 id="二、条件查询"><a href="#二、条件查询" class="headerlink" title="二、条件查询"></a>二、条件查询</h3><p>根据讲师名称name，讲师头衔level、讲师入驻时间gmt_create（时间段）查询</p><p>1、创建查询对象</p><p>创建com.wx.edu.query包，创建TeacherQuery.java查询对象</p><p>2、service</p><p>接口</p><p>实现</p><p>3、controller</p><p>TeacherAdminController中修改 pageList方法：</p><p>增加参数TeacherQuery teacherQuery，非必选</p><p>4、Swagger中测试</p><h2 id="6、新增和修改讲师接口开发"><a href="#6、新增和修改讲师接口开发" class="headerlink" title="6、新增和修改讲师接口开发"></a>6、新增和修改讲师接口开发</h2><h3 id="一、自动填充封装"><a href="#一、自动填充封装" class="headerlink" title="一、自动填充封装"></a><font style="color:rgb(0, 0, 0);">一、自动填充封装</font></h3><p><font style="color:rgb(0, 0, 0);">1、在service-base模块中添加</font></p><p><font style="color:rgb(0, 0, 0);">创建包handler，创建自动填充类 MyMetaObjectHandler</font></p><p><font style="color:rgb(0, 0, 0);">2、在实体类添加自动填充注解</font><font style="color:#bbb529;">@TableField</font>(fill &#x3D; FieldFill.<em><font style="color:#9876aa;">INSERT</font></em>)</p><h3 id="二、controller方法定义"><a href="#二、controller方法定义" class="headerlink" title="二、controller方法定义"></a><font style="color:rgb(0, 0, 0);">二、controller方法定义</font></h3><p><font style="color:rgb(0, 0, 0);">1、新增</font></p><p><font style="color:rgb(0, 0, 0);">2、根据id查询</font></p><p><font style="color:rgb(0, 0, 0);">3、根据id修改 需要将id传入</font></p><h2 id="8、统一异常处理"><a href="#8、统一异常处理" class="headerlink" title="8、统一异常处理"></a>8、统一异常处理</h2><h3 id="一、什么是统一异常处理"><a href="#一、什么是统一异常处理" class="headerlink" title="一、什么是统一异常处理"></a><font style="color:rgb(0, 0, 0);">一、什么是统一异常处理</font></h3><p><font style="color:rgb(0, 0, 0);">1、制造异常</font></p><p><font style="color:rgb(0, 0, 0);">2、什么是统一异常处理</font></p><p><font style="color:rgb(0, 0, 0);">我们想让异常结果也显示为统一的返回结果对象，并且统一处理系统的异常信息，那么需要统一异常处理</font></p><h3 id="二、统一异常处理"><a href="#二、统一异常处理" class="headerlink" title="二、统一异常处理"></a><font style="color:rgb(0, 0, 0);">二、统一异常处理</font></h3><p><font style="color:rgb(0, 0, 0);">1、创建统一异常处理器</font></p><p><font style="color:rgb(0, 0, 0);">在service-base中创建统一异常处理类GlobalExceptionHandler.java：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 统一异常处理类</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <br>    <span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(Exception e)</span>&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.error();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">2、测试</font></p><p><font style="color:rgb(0, 0, 0);">返回统一错误结果</font></p><h3 id="三、处理特定异常"><a href="#三、处理特定异常" class="headerlink" title="三、处理特定异常"></a><font style="color:rgb(0, 0, 0);">三、处理特定异常</font></h3><p><font style="color:rgb(0, 0, 0);">1、添加异常处理方法</font></p><p><font style="color:rgb(0, 0, 0);">GlobalExceptionHandler.java中添加</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(ArithmeticException e)</span>&#123;<br>  e.printStackTrace();<br>  <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;执行了自定义异常&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">2、测试</font></p><h3 id="四、自定义异常"><a href="#四、自定义异常" class="headerlink" title="四、自定义异常"></a><font style="color:rgb(0, 0, 0);">四、自定义异常</font></h3><p><font style="color:rgb(0, 0, 0);">1、创建自定义异常类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <br>     <span class="hljs-meta">@ApiModelProperty(value = &quot;状态码&quot;)</span><br>     <span class="hljs-keyword">private</span> Integer code;<br>     <span class="hljs-keyword">private</span> String msg;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">2、业务中需要的位置抛出EduException</font></p><p><font style="color:rgb(0, 0, 0);">3、</font><font style="color:rgb(0, 0, 0);">添加异常处理方法</font></p><p><font style="color:rgb(0, 0, 0);">GlobalExceptionHandler.java中添加</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler(EduException.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> R <span class="hljs-title function_">error</span><span class="hljs-params">(EduException e)</span>&#123;<br>    e.printStackTrace();<br>    <span class="hljs-keyword">return</span> R.error().message(e.getMsg()).code(e.getCode());<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">4、测试</font></p><h2 id="9、统一日志处理"><a href="#9、统一日志处理" class="headerlink" title="9、统一日志处理"></a>9、统一日志处理</h2><h3 id="一、日志"><a href="#一、日志" class="headerlink" title="一、日志"></a>一、日志</h3><p>1、配置日志级别</p><p>日志记录器（Logger）的行为是分等级的。如下表所示：</p><p>分为：OFF、FATAL、<strong>ERROR、WARN、INFO、DEBUG</strong>、ALL</p><p>默认情况下，spring boot从控制台打印出来的日志级别只有INFO及以上级别，可以配置日志级别</p><h1 id="设置日志级别"><a href="#设置日志级别" class="headerlink" title="设置日志级别"></a>设置日志级别</h1><p>logging.level.root&#x3D;WARN</p><p>这种方式只能将日志打印在控制台上</p><h3 id="二、Logback日志"><a href="#二、Logback日志" class="headerlink" title="二、Logback日志"></a>二、Logback日志</h3><p><font style="color:#595959;">spring boot内部使用Logback作为日志实现的框架。Logback和log4j非常相似，如果你对log4j很熟悉，那对logback很快就会得心应手。</font></p><p><font style="color:#595959;">logback相对于log4j的一些优点：</font><a href="https://blog.csdn.net/caisini_vc/article/details/48551287"><font style="color:#595959;">https://blog.csdn.net/caisini_vc&#x2F;article&#x2F;details&#x2F;48551287</font></a></p><p>1、配置logback日志</p><p>删除application.properties中的日志配置</p><p>安装idea彩色日志插件：grep-console</p><p>resources 中创建 logback-spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>  <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;10 seconds&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br>    <span class="hljs-comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- de<span class="hljs-doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>logback<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;log.path&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;F:/edu/log&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 彩色日志 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- boldMagenta:粗红--&gt;</span><br>    <span class="hljs-comment">&lt;!-- cyan:青色 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- white:白色 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- magenta:洋红 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%yellow(%date&#123;yyyy-MM-dd HH:mm:ss&#125;) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br>        <span class="hljs-comment">&lt;!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 设置字符集 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_info.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 每天日志归档路径以及格式 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/info/log-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录info级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_warn.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/warn/log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>warn<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;log.path&#125;/log_error.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--日志文件输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span> <span class="hljs-comment">&lt;!-- 此处设置字符集 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/error/log-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--日志文件保留天数--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>15<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。</span><br><span class="hljs-comment">        &lt;logger&gt;仅有一个name属性，</span><br><span class="hljs-comment">        一个可选的level和一个可选的addtivity属性。</span><br><span class="hljs-comment">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="hljs-comment">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="hljs-comment">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="hljs-comment">        第一种把&lt;root level=&quot;INFO&quot;&gt;改成&lt;root level=&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="hljs-comment">        第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别：</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-comment">&lt;!--开发环境:打印控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--可以输出项目中的debug日志，包括mybatis的sql日志--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wx&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> /&gt;</span><br><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="hljs-comment">            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG</span><br><span class="hljs-comment">            可以包含零个或多个appender元素。</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--生产环境:输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pro&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR_FILE&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN_FILE&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、将错误日志输出到文件</p><p>GlobalExceptionHandler.java 类上添加注解** @Slf4j**</p><p>异常输出语句 </p><p>log.error(e.getMessage());</p><p>3、将日志堆栈信息输出到文件</p><p>定义工具类</p><p>edu-framework-common下创建util包，创建ExceptionUtil.java工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionUtil</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">pw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>            pw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(sw);<br><br>            <span class="hljs-comment">//将出错的栈信息输出到printWriter中</span><br>            e.printStackTrace(pw);<br>            pw.flush();<br>            sw.flush();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (sw != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    sw.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e1) &#123;<br>                    e1.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pw != <span class="hljs-literal">null</span>) &#123;<br>                pw.close();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sw.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">调用</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">log.error(ExceptionUtil.getMessage(e));<br></code></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">EduException中创建toString方法</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EduException&#123;&quot;</span> +<br>        <span class="hljs-string">&quot;message=&quot;</span> + <span class="hljs-built_in">this</span>.getMessage() +<br>        <span class="hljs-string">&quot;, code=&quot;</span> + code +<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><h2 id="1、前端开发和前端开发工具"><a href="#1、前端开发和前端开发工具" class="headerlink" title="1、前端开发和前端开发工具"></a>1、前端开发和前端开发工具</h2><h3 id="一、前端开发"><a href="#一、前端开发" class="headerlink" title="一、前端开发"></a>一、前端开发</h3><p>前端工程师“Front-End-Developer”源自于美国。大约从2005年开始正式的前端工程师角色被行业所认可，到了2010年，互联网开始全面进入移动时代，前端开发的工作越来越重要。</p><p>最初所有的开发工作都是由后端工程师完成的，随着业务越来越繁杂，工作量变大，于是我们将项目中的可视化部分和一部分交互功能的开发工作剥离出来，形成了前端开发。</p><p>由于互联网行业的急速发展，导致了在不同的国家，有着截然不同的分工体制。</p><p>在日本和一些人口比较稀疏的国家，例如加拿大、澳洲等，流行“Full-Stack Engineer”，也就是我们通常所说的全栈工程师。通俗点说就是一个人除了完成前端开发和后端开发工作以外，有的公司从产品设计到项目开发再到后期运维可能都是同一个人，甚至可能还要负责UI、配动画，也可以是扫地、擦窗、写文档、维修桌椅等等。</p><p>而在美国等互联网环境比较发达的国家项目开发的分工协作更为明确，整个项目开发分为前端、中间层和后端三个开发阶段，这三个阶段分别由三个或者更多的人来协同完成。</p><p>国内的大部分互联网公司只有前端工程师和后端工程师，中间层的工作有的由前端来完成，有的由后端来完成。</p><p>PRD（产品原型-产品经理） - PSD（视觉设计-UI工程师） - HTML&#x2F;CSS&#x2F;JavaScript（PC&#x2F;移动端网页，实现网页端的视觉展示和交互-前端工程师）</p><h3 id="二、下载和安装VS-Code"><a href="#二、下载和安装VS-Code" class="headerlink" title="二、下载和安装VS Code"></a><font style="color:rgb(0, 0, 0);">二、下载和安装VS Code</font></h3><p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h3 id="三、初始设置"><a href="#三、初始设置" class="headerlink" title="三、初始设置"></a><font style="color:rgb(0, 0, 0);">三、初始设置</font></h3><p>1、中文界面配置</p><p>首先安装中文插件：Chinese (Simplified) Language Pack for Visual Studio Code</p><p>右下角弹出是否重启vs，点击“yes”</p><p>有些机器重启后如果界面没有变化，则 点击 左边栏Manage -&gt; Command Paletet…【Ctrl+Shift+p】</p><p>在搜索框中输入“configure display language”，回车</p><p>打开locale.json文件，修改文件下的属性 “locale”:”zh-cn” </p><p>{</p><pre><code class="hljs">// 定义 VS Code 的显示语言。// 请参阅 [https://go.microsoft.com/fwlink/?LinkId=761051](https://go.microsoft.com/fwlink/?LinkId=761051)，了解支持的语言列表。&quot;locale&quot;:&quot;zh-cn&quot; // 更改将在重新启动 VS Code 之后生效。</code></pre><p>}</p><p>重启vs</p><p>2、插件安装</p><p>为方便后续开发，建议安装如下插件（红色矩形框标记的插件）</p><p><img src="/2023/02/21/Spring/SpringBoot2/image-1.png"></p><p>3、创建项目</p><p>vscode本身没有新建项目的选项，所以要先创建一个空的文件夹，如project_xxxx。</p><p>然后打开vscode，再在vscode里面选择 File -&gt; Open Folder 打开文件夹</p><p>4、保存工作区</p><p>打开文件夹后，选择“文件 -&gt; 将工作区另存为…”，为工作区文件起一个名字，存储在刚才的文件夹下即可</p><p>5、新建文件夹和网页</p><p>6、预览网页</p><p>以文件路径方式打开网页预览</p><p>需要安装“open in browser”插件：</p><p>文件右键 -&gt; Open In Default Browser</p><p>以服务器方式打开网页预览</p><p>需要安装“Live Server”插件：</p><p>文件右键 -&gt; Open with Live Server</p><p>7、设置字体大小</p><p>左边栏Manage -&gt; settings -&gt; 搜索 “font” -&gt; Font size</p><p>8、开启完整的Emmet语法支持</p><p>设置中搜索 Emmet：启用如下选项，必要时重启vs</p><p><img src="/2023/02/21/Spring/SpringBoot2/image-2.png"></p><h2 id="2、ES6入门"><a href="#2、ES6入门" class="headerlink" title="2、ES6入门"></a>2、ES6入门</h2><h3 id="一、ECMAScript-6-简介"><a href="#一、ECMAScript-6-简介" class="headerlink" title="一、ECMAScript 6 简介"></a>一、ECMAScript 6 简介</h3><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><p>1、ECMAScript 和 JavaScript 的关系</p><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）</p><p>2、ES6 与 ECMAScript 2015 的关系</p><p>ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？</p><p>2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。</p><p>ES6 的第一个版本，在 2015 年 6 月发布，正式名称是《ECMAScript 2015 标准》（简称 ES2015）。</p><p>2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。</p><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><p>ES标准中不包含 DOM 和 BOM的定义，只涵盖基本数据类型、关键字、语句、运算符、内建对象、内建函数等通用语法。</p><p>本部分只学习前端开发中ES6的最少必要知识，方便后面项目开发中对代码的理解。</p><p>1、let声明变量</p><p><font style="color:#D46B08;">    &#x2F;&#x2F; var 声明的变量没有局部作用域</font></p><p><font style="color:#D46B08;">    &#x2F;&#x2F; let 声明的变量  有局部作用域</font></p><p><font style="color:#D46B08;">    &#x2F;&#x2F; var 可以声明多次</font></p><p><font style="color:#D46B08;">    &#x2F;&#x2F; let 只能声明一次</font></p><p><font style="color:rgb(0, 0, 0);">2、const声明常量（只读变量）</font></p><p><font style="color:#D46B08;">&#x2F;&#x2F; 1、声明之后不允许改变</font></p><p><font style="color:#D46B08;">&#x2F;&#x2F; 2、一但声明必须初始化，否则会报错</font></p><p><font style="color:rgb(0, 0, 0);">3、</font><font style="color:rgb(51, 51, 51);">解构赋值</font></p><p><font style="color:rgb(51, 51, 51);">解构赋值是对赋值运算符的扩展。</font></p><p><font style="color:rgb(51, 51, 51);">他是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。</font></p><p><font style="color:rgb(51, 51, 51);">在代码书写上简洁且易读，语义更加清晰明了；也方便了复杂对象中数据字段获取。</font></p><p><font style="background-color:rgb(245, 245, 245);">&#x2F;&#x2F;1、数组解构</font></p><p><font style="background-color:rgb(245, 245, 245);">&#x2F;&#x2F; 传统</font><font style="background-color:rgb(245, 245, 245);"></font></p><p><font style="background-color:rgb(245, 245, 245);">let</font><font style="background-color:rgb(245, 245, 245);"> </font><font style="background-color:rgb(245, 245, 245);">a</font><font style="background-color:rgb(245, 245, 245);"> &#x3D; </font><font style="background-color:rgb(245, 245, 245);">1</font><font style="background-color:rgb(245, 245, 245);">, </font><font style="background-color:rgb(245, 245, 245);">b</font><font style="background-color:rgb(245, 245, 245);"> &#x3D; </font><font style="background-color:rgb(245, 245, 245);">2</font><font style="background-color:rgb(245, 245, 245);">, </font><font style="background-color:rgb(245, 245, 245);">c</font><font style="background-color:rgb(245, 245, 245);"> &#x3D; </font><font style="background-color:rgb(245, 245, 245);">3</font><font style="background-color:rgb(245, 245, 245);"></font></p><p><font style="background-color:rgb(245, 245, 245);">console.log(a, b, c)</font><font style="background-color:rgb(245, 245, 245);"></font></p><p><font style="color:#D46B08;background-color:rgb(245, 245, 245);">&#x2F;&#x2F; ES6</font></p><p><font style="color:#D46B08;background-color:rgb(245, 245, 245);">let</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);"> [</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">x</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">, </font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">y</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">, </font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">z</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">] &#x3D; [</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">1</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">, </font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">2</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">, </font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">3</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);">]</font><font style="color:#D46B08;background-color:rgb(245, 245, 245);"></font></p><p><font style="color:#D46B08;background-color:rgb(245, 245, 245);">console.log(x, y, z)</font></p><p>&#x2F;&#x2F;2、对象解构</p><p><font style="color:#D46B08;">let user &#x3D; {name: ‘Helen’, age: 18}</font></p><p>&#x2F;&#x2F; 传统</p><p>let name1 &#x3D; user.name</p><p>let age1 &#x3D; user.age</p><p>console.log(name1, age1)</p><p><font style="color:#D46B08;">&#x2F;&#x2F; ES6</font></p><p><font style="color:#D46B08;">let { name, age } &#x3D;  user</font>&#x2F;&#x2F;注意：结构的变量必须是user中的属性</p><p>console.log(name, age)</p><p><font style="color:rgb(0, 0, 0);">4、模板字符串</font><font style="color:rgb(0, 0, 0);"></font></p><p><font style="color:rgb(51, 51, 51);">模板字符串相当于加强版的字符串，用反引号 </font><font style="color:rgb(51, 51, 51);background-color:rgb(236, 234, 230);">&#96;</font><font style="color:rgb(51, 51, 51);">,除了作为普通字符串，还可以用来定义多行字符串，还可以在字符串中加入变量和表达式。</font><br><font style="color:#D46B08;">&#x2F;&#x2F; 1、多行字符串</font></p><p><font style="color:#D46B08;">&#x2F; &#x2F;2、字符串插入变量和表达式。变量名写在 ${} 中，${} 中可以放入 JavaScript 表达式。</font></p><p><font style="color:#D46B08;">&#x2F;&#x2F; 3、字符串中调用函数</font></p><p><font style="color:rgb(0, 0, 0);">5、声明对象简写</font></p><p><font style="color:#D46B08;">const age &#x3D; 12</font></p><p><font style="color:#D46B08;">const name &#x3D; “Amy”</font></p><p>&#x2F;&#x2F; 传统</p><p>const person1 &#x3D; {age: age, name: name}</p><p>console.log(person1)</p><p><font style="color:#D46B08;">&#x2F;&#x2F; ES6</font></p><p><font style="color:#D46B08;">const person2 &#x3D; {age, name}</font></p><p>console.log(person2) &#x2F;&#x2F;{age: 12, name: “Amy”}</p><p><font style="color:rgb(0, 0, 0);">6、定义方法简写</font></p><p>&#x2F;&#x2F; 传统</p><p>const person1 &#x3D; {</p><pre><code class="hljs">sayHi:function()&#123;    console.log(&quot;Hi&quot;)&#125;</code></pre><p>}</p><p>person1.sayHi();&#x2F;&#x2F;“Hi”</p><p><font style="color:#D46B08;">&#x2F;&#x2F; ES6</font></p><p><font style="color:#D46B08;">const person2 &#x3D; {</font></p><p><font style="color:#D46B08;">    sayHi(){</font></p><p><font style="color:#D46B08;">        console.log(“Hi”)</font></p><p><font style="color:#D46B08;">    }</font></p><p><font style="color:#D46B08;">}</font></p><p><font style="color:#D46B08;">person2.sayHi()  &#x2F;&#x2F;“Hi”</font></p><p><font style="color:rgb(0, 0, 0);">7、对象拓展运算符</font></p><p><font style="color:#D46B08;">&#x2F;&#x2F; 1、拷贝对象</font></p><p>let person1 &#x3D; {name: “Amy”, age: 15}</p><p>let someone &#x3D; { …person1 }</p><p>console.log(someone)  &#x2F;&#x2F;{name: “Amy”, age: 15}</p><p><font style="color:#D46B08;">&#x2F;&#x2F; 2、合并对象</font></p><p>let age &#x3D; {age: 15}</p><p>let name &#x3D; {name: “Amy”}</p><p>let person2 &#x3D; {…age, …name}</p><p>console.log(person2)  &#x2F;&#x2F;{age: 15, name: “Amy”}</p><p><font style="color:rgb(0, 0, 0);">8、箭头函数</font></p><p><font style="color:rgb(0, 0, 0);">箭头函数提供了一种更加简洁的函数书写方式。基本语法是：</font></p><p><font style="color:rgb(102, 102, 0);">参数</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">&#x3D;&gt;</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">函数体</font></p><p>箭头函数多用于匿名函数的定义</p><p>&#x2F;&#x2F; 传统</p><p>var f1 &#x3D; function(a){</p><pre><code class="hljs">return a</code></pre><p>}</p><p>console.log(f1(1))</p><p><font style="color:#D46B08;">&#x2F;&#x2F; ES6</font></p><p><font style="color:#D46B08;">var f2 &#x3D; a &#x3D;&gt; a</font></p><p>console.log(f2(1))</p><p><font style="color:#D46B08;">&#x2F;&#x2F; 当箭头函数没有参数或者有多个参数，要用 () 括起来。</font></p><p><font style="color:#D46B08;">&#x2F;&#x2F; 当箭头函数函数体有多行语句，用 {} 包裹起来，表示代码块，</font></p><p><font style="color:#D46B08;">&#x2F;&#x2F; 当只有一行语句，并且需要返回结果时，可以省略 {} , 结果会自动返回。</font></p><p>var f3 &#x3D; (a,b) &#x3D;&gt; {</p><pre><code class="hljs">let result = a+breturn result</code></pre><p>}</p><p>console.log(f3(6,2))  &#x2F;&#x2F; 8</p><p>&#x2F;&#x2F; 前面代码相当于：</p><p><font style="color:#D46B08;">var f4 &#x3D; (a,b) &#x3D;&gt; a+b</font></p><h2 id="3、Vue"><a href="#3、Vue" class="headerlink" title="3、Vue"></a>3、Vue</h2><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>1、Vue.js 是什么</p><p>Vue (读音 &#x2F;vjuː&#x2F;，类似于 view) 是一套用于构建用户界面的渐进式框架。</p><p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>官方网站：<a href="https://cn.vuejs.org/">https://cn.vuejs.org</a></p><p>2、初始Vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &#123;&#123;&#125;&#125; 插值表达式，绑定vue中的data数据 --&gt;</span><br>    &#123;&#123;message&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;vue.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建一个vue对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<span class="hljs-comment">//绑定vue作用的范围</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;<span class="hljs-comment">//定义页面中显示的模型数据</span></span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello Vue!&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这就是声明式渲染：<font style="color:rgb(52, 73, 94);">Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</font></p><p><font style="color:rgb(0, 0, 0);">这里的核心思想就是没有繁琐的DOM操作，例如jQuery中，我们需要先找到div节点，获取到DOM对象，然后进行一系列的节点操作</font></p><p>3、<strong>在vs code中创建代码片段：</strong></p><p>文件 &#x3D;&gt;  首选项 &#x3D;&gt; 用户代码片段 &#x3D;&gt; 新建全局代码片段&#x2F;或文件夹代码片段：vue-html.code-snippets</p><p><font style="color:rgb(255, 0, 0);">注意：制作代码片段的时候，字符串中如果包含文件中复制过来的“Tab”键的空格，要换成“空格键”的空格</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;<br>&quot;vue htm&quot;: &#123;<br>&quot;scope&quot;: &quot;html&quot;,<br>&quot;prefix&quot;: &quot;vuehtml&quot;,<br>&quot;body&quot;: [<br>&quot;<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>&quot;,<br>&quot;<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">en</span>\&quot;&gt;</span>&quot;,<br>&quot;&quot;,<br>&quot;<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">UTF-8</span>\&quot;&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">viewport</span>\&quot; <span class="hljs-attr">content</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">width</span>=<span class="hljs-string">device-width,</span> <span class="hljs-attr">initial-scale</span>=<span class="hljs-string">1.0\</span>&quot;&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">X-UA-Compatible</span>\&quot; <span class="hljs-attr">content</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">ie</span>=<span class="hljs-string">edge\</span>&quot;&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>&quot;,<br>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>&quot;,<br>&quot;&quot;,<br>&quot;<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">app</span>\&quot;&gt;</span>&quot;,<br>&quot;&quot;,<br>&quot;    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">\</span>&quot;<span class="hljs-attr">vue.min.js</span>\&quot;&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;,<br>&quot;    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>&quot;,<br>&quot;        new Vue(&#123;&quot;,<br>&quot;            el: &#x27;#app&#x27;,&quot;,<br>&quot;            data: &#123;&quot;,<br>&quot;                $1&quot;,<br>&quot;            &#125;&quot;,<br>&quot;        &#125;)&quot;,<br>&quot;    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&quot;,<br>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>&quot;,<br>&quot;&quot;,<br>&quot;<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>&quot;,<br>],<br>&quot;description&quot;: &quot;my vue template in html&quot;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、基本语法-1"><a href="#二、基本语法-1" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><p>1、基本数据渲染和指令</p><p> v-bind 特性被称为指令。指令带有前缀 v-</p>除了使用插值表达式{{}}进行数据渲染，也可以使用 v-bind指令，它的简写的形式就是一个冒号（:）<p>2、双向数据绑定</p><p>双向数据绑定和单向数据绑定：使用 v-model 进行双向数据绑定</p><p>3、事件</p><p>使用 v-on 进行事件处理，v-on:click 表示处理鼠标点击事件，事件调用的方法定义在 vue 对象声明的 methods 节点中</p><p><font style="color:rgb(170, 85, 0);"><!-- v-on 指令的简写形式 @ --></font></p><p>4、修饰符</p><p>修饰符 (Modifiers) 是以半角句号（.）指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</p><p>例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</p><p>即阻止事件原本的默认行为</p><p>5、条件渲染</p><p>v-if 、v-show：条件指令</p><p><em>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</em></p><p><em>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</em></p><p><em>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</em></p><p><em>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</em></p><p>6、列表渲染</p><p>v-for：列表循环指令</p><p> <font style="color:rgb(170, 85, 0);"><!-- 如果想获取索引，则使用index关键字，注意，圆括号中的index必须放在后面 --></font></p><h2 id="4、Vue"><a href="#4、Vue" class="headerlink" title="4、Vue"></a>4、Vue</h2><h3 id="一、组件（重点）"><a href="#一、组件（重点）" class="headerlink" title="一、组件（重点）"></a>一、组件（重点）</h3><p>组件（Component）是 Vue.js 最强大的功能之一。</p><p>组件可以扩展 HTML 元素，封装可重用的代码。</p><p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p><p><img src="/2023/02/21/Spring/SpringBoot2/image-3.png"></p><p>1、局部组件</p><p>2、全局组件</p><h3 id="二、实例生命周期"><a href="#二、实例生命周期" class="headerlink" title="二、实例生命周期"></a>二、实例生命周期</h3><h3 id="三、路由"><a href="#三、路由" class="headerlink" title="三、路由"></a>三、路由</h3><p>Vue.js 路由允许我们通过不同的 URL 访问不同的内容。</p><p>通过 Vue.js 可以实现多视图的单页Web应用（single page web application，SPA）。</p><p>Vue.js 路由需要载入 vue-router 库</p><h3 id="四、axios"><a href="#四、axios" class="headerlink" title="四、axios"></a>四、axios</h3><p>axios是独立于vue的一个项目，基于promise用于浏览器和node.js的http客户端</p><p>在浏览器中可以帮助我们完成 ajax请求的发送</p><p>在node.js中可以向远程接口发送请求</p><p><font style="color:rgb(255, 0, 0);">注意：测试时需要开启后端服务器，并且后端开启跨域访问权限</font></p><h3 id="五、element-ui："><a href="#五、element-ui：" class="headerlink" title="五、element-ui："></a>五、element-ui：</h3><p>element-ui 是饿了么前端出品的基于 Vue.js的 后台组件库，方便程序员进行页面快速布局和构建</p><p>官网： <a href="http://element-cn.eleme.io/#/zh-CN">http://element-cn.eleme.io/#/zh-CN</a></p><p>关于.sync的扩展阅读</p><p><a href="https://www.jianshu.com/p/d42c508ea9de">https://www.jianshu.com/p/d42c508ea9de</a></p><h2 id="5、Node"><a href="#5、Node" class="headerlink" title="5、Node"></a>5、Node</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>1、什么是Node.js</p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js是一个事件驱动I&#x2F;O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p>2、Node.js有什么用</p><p>如果你是一个前端程序员，你不懂得像PHP、Python或Ruby等动态编程语言，然后你想创建自己的服务，那么Node.js是一个非常好的选择。</p><p>Node.js 是运行在服务端的 JavaScript，如果你熟悉Javascript，那么你将会很容易的学会Node.js。</p><p>当然，如果你是后端程序员，想部署一些高性能的服务，那么学习Node.js也是一个非常好的选择。</p><h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>1、下载</p><p>官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>中文网：<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p>LTS：长期支持版本</p><p>Current：最新版</p><p>2、安装</p><p>3、查看版本</p><p>node -v</p><h3 id="三、快速入门"><a href="#三、快速入门" class="headerlink" title="三、快速入门"></a>三、快速入门</h3><p>1、创建文件夹nodejs</p><p>2、控制台程序</p><p>浏览器的内核包括两部分核心：</p><p>DOM渲染引擎；</p><p>js解析器（js引擎）</p><p>js运行在浏览器中的内核中的js引擎内部</p><p>Node.js是脱离浏览器环境运行的JavaScript程序，基于V8 引擎（Chrome 的 JavaScript的引擎）</p><p>3、服务器端应用开发（了解）</p><h1 id="dya04"><a href="#dya04" class="headerlink" title="dya04"></a>dya04</h1><h2 id="06-NPM包管理器"><a href="#06-NPM包管理器" class="headerlink" title="06-NPM包管理器"></a>06-NPM包管理器</h2><h3 id="一、简介-1"><a href="#一、简介-1" class="headerlink" title="一、简介"></a>一、简介</h3><p>1、什么是NPM</p><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于前端的Maven 。</p><p>2、NPM工具的安装位置</p><p>我们通过npm 可以很方便地下载js库，管理前端工程。</p><p>Node.js默认安装的npm包和工具的位置：Node.js目录\node_modules</p><p>在这个目录下你可以看见 npm目录，npm本身就是被NPM包管理器管理的一个工具，说明 Node.js已经集成了npm工具</p><h3 id="二、使用npm管理项目"><a href="#二、使用npm管理项目" class="headerlink" title="二、使用npm管理项目"></a>二、使用npm管理项目</h3><p>1、创建文件夹npm</p><p>2、项目初始化</p><p>#建立一个空文件夹，在命令提示符进入该文件夹  执行命令初始化</p><p>npm init</p><p>#按照提示输入相关信息，如果是用默认值则直接回车即可。</p><p>#name: 项目名称</p><p>#version: 项目版本号</p><p>#description: 项目描述</p><p>#keywords: {Array}关键词，便于用户搜索到我们的项目</p><p>#最后会生成package.json文件，这个是包的配置文件，相当于maven的pom.xml</p><p>#我们之后也可以根据需要进行修改。</p><p><font style="color:#D46B08;">#如果想直接生成 package.json 文件，那么可以使用命令</font></p><p><font style="color:#D46B08;">npm init -y</font></p><p>2、修改npm镜像</p><p>NPM官方的管理的包都是从 <a href="http://npmjs.com/">http://npmjs.com</a>下载的，但是这个网站在国内速度很慢。</p><p>这里推荐使用淘宝 NPM 镜像 <a href="http://npm.taobao.org/">http://npm.taobao.org/</a> ，淘宝 NPM 镜像是一个完整 npmjs.com 镜像，同步频率目前为 10分钟一次，以保证尽量与官方服务同步。</p><p>设置镜像地址：</p><p><font style="color:#D46B08;">npm config set registry </font><a href="https://registry.npm.taobao.org/"><font style="color:#D46B08;">https://registry.npm.taobao.org</font></a><font style="color:#D46B08;"> </font></p><p>#查看npm配置信息</p><p><font style="color:#D46B08;">npm config list</font></p><p>3、npm install命令的使用</p><p>4、其它命令</p><h2 id="07-Babel"><a href="#07-Babel" class="headerlink" title="07-Babel"></a>07-Babel</h2><h3 id="一、简介-2"><a href="#一、简介-2" class="headerlink" title="一、简介"></a>一、简介</h3><p>Babel是一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行执行。</p><p>这意味着，你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持。</p><h3 id="二、安装-1"><a href="#二、安装-1" class="headerlink" title="二、安装"></a>二、安装</h3><p>安装命令行转码工具</p><p>Babel提供babel-cli工具，用于命令行转码。它的安装命令如下：</p><p>npm install –global babel-cli</p><p>#查看是否安装成功</p><p>babel –version</p><h3 id="三、Babel的使用"><a href="#三、Babel的使用" class="headerlink" title="三、Babel的使用"></a>三、Babel的使用</h3><p>1、初始化项目</p><p>npm init -y</p><p>2、创建文件</p><p>&#x2F;&#x2F; 转码前</p><p>&#x2F;&#x2F; 定义数据</p><p>let input &#x3D; [1, 2, 3]</p><p>&#x2F;&#x2F; 将数组的每个元素 +1</p><p>input &#x3D; input.map(item &#x3D;&gt; item + 1)</p><p>console.log(input)</p><p>3、配置.babelrc</p><p>presets字段设定转码规则，将es2015规则加入 .babelrc：</p><p>{</p><pre><code class="hljs">&quot;presets&quot;: [    &quot;es2015&quot;],&quot;plugins&quot;: []</code></pre><p>}</p><p>4、安装转码器</p><p>在项目中安装</p><p>npm install –save-dev babel-preset-es2015</p><p>5、转码</p><h1 id="转码结果写入一个文件"><a href="#转码结果写入一个文件" class="headerlink" title="转码结果写入一个文件"></a>转码结果写入一个文件</h1><p>mkdir dist1</p><p><font style="color:#D46B08;"># –out-file 或 -o 参数指定输出文件</font></p><p>babel src&#x2F;example.js –out-file dist1&#x2F;compiled.js</p><h1 id="或者"><a href="#或者" class="headerlink" title="或者"></a>或者</h1><p>babel src&#x2F;example.js -o dist1&#x2F;compiled.js</p><h1 id="整个目录转码"><a href="#整个目录转码" class="headerlink" title="整个目录转码"></a>整个目录转码</h1><p>mkdir dist2</p><p><font style="color:#D46B08;"># –out-dir 或 -d 参数指定输出目录</font></p><p>babel src –out-dir dist2</p><h1 id="或者-1"><a href="#或者-1" class="headerlink" title="或者"></a>或者</h1><p>babel src -d dist2</p><h2 id="08-模块化"><a href="#08-模块化" class="headerlink" title="08-模块化"></a>08-模块化</h2><h3 id="一、模块化简介"><a href="#一、模块化简介" class="headerlink" title="一、模块化简介"></a>一、模块化简介</h3><p>1、模块化产生的背景</p><p>随着网站逐渐变成”互联网应用程序”，嵌入网页的Javascript代码越来越庞大，越来越复杂。</p><p>Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p><p>但是，Javascript不是一种模块化编程语言，它不支持”类”（class），包（package）等概念，更遑论”模块”（module）了。</p><p>2、什么是模块化开发</p><p>传统非模块化开发有如下的缺点：</p><p>命名冲突</p><p>文件依赖</p><p>模块化规范：</p><p>CommonJS模块化规范</p><p>ES6模块化规范</p><p>二、CommonJS模块规范</p><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><p>1、创建“module”文件夹</p><p>2、导出模块</p><p>&#x2F;&#x2F; 导出成员：</p><p><font style="color:#D46B08;">module.exports &#x3D; {</font></p><pre><code class="hljs">sum: sum,subtract: subtract,multiply: multiply,divide: divide</code></pre><p>}</p><p>3、导入模块</p><p><font style="color:#D46B08;">&#x2F;&#x2F;引入模块，注意：当前路径必须写 . &#x2F;</font></p><p><font style="color:#D46B08;">const m &#x3D; require(‘.&#x2F;四则运算.js’)</font></p><p>console.log(m)</p><p>const result1 &#x3D; m.sum(1, 2)</p><p>const result2 &#x3D; m.subtract(1, 2)</p><p>console.log(result1, result2)</p><p>4、运行程序</p><p><font style="color:#F5222D;">CommonJS使用 exports 和require 来导出、导入模块。</font></p><h3 id="三、ES6模块化规范"><a href="#三、ES6模块化规范" class="headerlink" title="三、ES6模块化规范"></a>三、ES6模块化规范</h3><p><font style="color:#F5222D;">ES6使用 export 和 import 来导出、导入模块。</font></p><p>1、导出模块</p><p>export function getList() {</p><p>2、导入模块</p><p>import { getList, save } from “.&#x2F;userApi.js”</p><p>getList()</p><p><font style="color:rgb(255, 0, 0);">注意：这时的程序无法运行的，因为ES6的模块化无法在Node.js中执行，需要用Babel编辑成ES5后再执行。</font></p><p>3、运行程序</p><h3 id="四、ES6模块化的另一种写法"><a href="#四、ES6模块化的另一种写法" class="headerlink" title="四、ES6模块化的另一种写法"></a>四、ES6模块化的另一种写法</h3><p>1、导出模块</p><p>export default {</p><pre><code class="hljs">getList() &#123;    console.log(&#39;获取数据列表2&#39;)&#125;,save() &#123;    console.log(&#39;保存数据2&#39;)&#125;</code></pre><p>}</p><p>2、导入模块</p><p>import user from “.&#x2F;userApi2.js”</p><p>user.getList()</p><p>user.save()</p><h2 id="09-Webpack"><a href="#09-Webpack" class="headerlink" title="09-Webpack"></a>09-Webpack</h2><h3 id="一、什么是Webpack"><a href="#一、什么是Webpack" class="headerlink" title="一、什么是Webpack"></a>一、什么是Webpack</h3><p>Webpack 是一个前端资源加载&#x2F;打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>从图中我们可以看出，Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。 </p><h3 id="二、Webpack安装"><a href="#二、Webpack安装" class="headerlink" title="二、Webpack安装"></a>二、Webpack安装</h3><p>1、全局安装</p><p>npm install -g webpack webpack-cli</p><p>2、安装后查看版本号</p><p>webpack -v</p><h3 id="三、初始化项目"><a href="#三、初始化项目" class="headerlink" title="三、初始化项目"></a>三、初始化项目</h3><h3 id="四、JS打包"><a href="#四、JS打包" class="headerlink" title="四、JS打包"></a>四、JS打包</h3><p>1、webpack目录下创建配置文件webpack.config.js</p><p>以下配置的意思是：读取当前项目目录下src文件夹中的main.js（入口文件）内容，分析资源依赖，把相关的js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">//Node.js内置模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>, <span class="hljs-comment">//配置入口文件</span><br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>), <span class="hljs-comment">//输出路径，__dirname：当前文件所在路径</span><br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js&#x27;</span> <span class="hljs-comment">//输出文件</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、命令行执行编译命令</p><p><font style="color:#D46B08;">webpack #有黄色警告</font></p><p><font style="color:#D46B08;">webpack –mode&#x3D;development #没有警告</font></p><p>#执行后查看bundle.js 里面包含了上面两个js文件的内容并惊醒了代码压缩</p><p>也可以配置项目的npm运行命令，修改package.json文件</p><p>“scripts”: {</p><pre><code class="hljs">//...,&quot;dev&quot;: &quot;webpack --mode=development&quot;</code></pre><p> }</p><p>运行npm命令执行打包</p><p>npm run dev</p><p>3、webpack目录下创建index.html</p><p>引用bundle.js</p><p>4、浏览器中查看index.html</p><h3 id="五、CSS打包"><a href="#五、CSS打包" class="headerlink" title="五、CSS打包"></a>五、CSS打包</h3><p>1、安装style-loader和 css-loader</p><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p><p>Loader 可以理解为是模块和资源的转换器。</p><p>首先我们需要安装相关Loader插件，css-loader 是将 css 装载到 javascript；style-loader 是让 javascript 认识css</p><p><font style="color:#D46B08;">npm install –save-dev style-loader css-loader </font></p><p>2、修改webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>); <span class="hljs-comment">//Node.js内置模块</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...,</span><br>  <span class="hljs-attr">output</span>: &#123;&#125;,<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,    <span class="hljs-comment">//打包规则应用到以css结尾的文件上</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、在src文件夹创建style.css</p><p>body{</p><pre><code class="hljs">background:pink;</code></pre><p>}</p><p>4、修改main.js </p><p>在第一行引入style.css</p><p>require(‘.&#x2F;style.css’);</p><p>5、浏览器中查看index.html</p><p>看看背景是不是变成粉色啦？</p><h2 id="10-vue-element-admin"><a href="#10-vue-element-admin" class="headerlink" title="10-vue-element-admin"></a>10-vue-element-admin</h2><h3 id="一、vue-element-admin"><a href="#一、vue-element-admin" class="headerlink" title="一、vue-element-admin"></a>一、vue-element-admin</h3><p>1、简介</p><p>而vue-element-admin是基于element-ui 的一套后台管理系统集成方案。</p><p>功能：<a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/#">https://panjiachen.github.io/vue-element-admin-site/zh/guide/#</a>功能</p><p>GitHub地址：<a href="https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></p><p>项目在线预览：<a href="https://panjiachen.gitee.io/vue-element-admin">https://panjiachen.gitee.io/vue-element-admin</a></p><p>2、安装</p><h1 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h1><h1 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h1><p>cd vue-element-admin-master</p><h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>npm install</p><h1 id="启动。执行后，浏览器自动弹出并访问http-localhost-9527"><a href="#启动。执行后，浏览器自动弹出并访问http-localhost-9527" class="headerlink" title="启动。执行后，浏览器自动弹出并访问http://localhost:9527/"></a>启动。执行后，浏览器自动弹出并访问<a href="http://localhost:9527/">http://localhost:9527/</a></h1><p>npm run dev</p><h3 id="二、vue-admin-template"><a href="#二、vue-admin-template" class="headerlink" title="二、vue-admin-template"></a>二、vue-admin-template</h3><p>1、简介</p><p>vueAdmin-template是基于vue-element-admin的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。</p><p>GitHub地址：<a href="https://github.com/PanJiaChen/vue-admin-template">https://github.com/PanJiaChen/vue-admin-template</a></p><p>建议：你可以在 vue-admin-template 的基础上进行二次开发，把 vue-element-admin当做工具箱，想要什么功能或者组件就去 vue-element-admin 那里复制过来。</p><p>2、安装</p><h1 id="解压压缩包-1"><a href="#解压压缩包-1" class="headerlink" title="解压压缩包"></a>解压压缩包</h1><h1 id="进入目录-1"><a href="#进入目录-1" class="headerlink" title="进入目录"></a>进入目录</h1><p>cd vue-admin-template-master</p><h1 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>npm install</p><h1 id="启动。执行后，浏览器自动弹出并访问http-localhost-9528"><a href="#启动。执行后，浏览器自动弹出并访问http-localhost-9528" class="headerlink" title="启动。执行后，浏览器自动弹出并访问http://localhost:9528/"></a>启动。执行后，浏览器自动弹出并访问<a href="http://localhost:9528/">http://localhost:9528/</a></h1><p>npm run dev</p><h2 id="11-后台系统前端项目创建"><a href="#11-后台系统前端项目创建" class="headerlink" title="11-后台系统前端项目创建"></a>11-后台系统前端项目创建</h2><h3 id="一、项目的创建和基本配置"><a href="#一、项目的创建和基本配置" class="headerlink" title="一、项目的创建和基本配置"></a>一、项目的创建和基本配置</h3><p>1、创建项目</p><p>将vue-admin-template-master重命名为edu-admin</p><p>2、修改项目信息</p><p>package.json</p><p>{</p><pre><code class="hljs">&quot;name&quot;: &quot;edu-admin&quot;,......&quot;description&quot;: &quot;在线教育后台管理系统&quot;,&quot;author&quot;: &quot;WxW&lt;1327569315@qq.com&gt;&quot;,......</code></pre><p>}</p><p>3、如果需要修改端口号</p><p>config&#x2F;index.js中修改</p><p>port: 9528</p><p>4、项目的目录结构</p><p>├── build &#x2F;&#x2F; 构建脚本</p><p>├── config &#x2F;&#x2F; 全局配置 </p><p>├── node_modules &#x2F;&#x2F; 项目依赖模块</p><p>├── src &#x2F;&#x2F;项目源代码</p><p>├── static &#x2F;&#x2F; 静态资源</p><p>└── package.jspon &#x2F;&#x2F; 项目信息和依赖配置</p><p>src </p><p>├── api &#x2F;&#x2F; 各种接口 </p><p>├── assets &#x2F;&#x2F; 图片等资源 </p><p>├── components &#x2F;&#x2F; 各种公共组件，非公共组件在各自view下维护 </p><p>├── icons &#x2F;&#x2F;svg icon </p><p>├── router &#x2F;&#x2F; 路由表 </p><p>├── store &#x2F;&#x2F; 存储 </p><p>├── styles &#x2F;&#x2F; 各种样式 </p><p>├── utils &#x2F;&#x2F; 公共工具，非公共工具，在各自view下维护 </p><p>├── views &#x2F;&#x2F; 各种layout</p><p>├── App.vue &#x2F;&#x2F;<em><strong>项目顶层组件</strong></em> </p><p>├── main.js &#x2F;&#x2F;<em><strong>项目入口文件</strong></em></p><p>└── permission.js &#x2F;&#x2F;认证入口</p><p>5、运行项目</p><p>npm run dev</p><h3 id="二、登录页修改"><a href="#二、登录页修改" class="headerlink" title="二、登录页修改"></a>二、登录页修改</h3><p>src&#x2F;views&#x2F;login&#x2F;index.vue（登录组件）</p><p>4行</p><h3 class="title">  在线教育后台管理系统</h3><p>28行</p><p>&lt;el-button :loading&#x3D;”loading” type&#x3D;”primary” style&#x3D;”width:100%;” @click.native.prevent&#x3D;”handleLogin”&gt;</p><pre><code class="hljs">登录</code></pre></el-button><h3 id="三、页面零星修改"><a href="#三、页面零星修改" class="headerlink" title="三、页面零星修改"></a>三、页面零星修改</h3><p>1、标题</p><p>index.html（项目的html入口）</p><p>2、国际化设置</p><p>打开 src&#x2F;main.js（项目的js入口），第7行，修改语言为 zh-CN，使用中文语言环境，例如：日期时间组件</p><p>import locale from ‘element-ui&#x2F;lib&#x2F;locale&#x2F;lang&#x2F;zh-CN’ &#x2F;&#x2F; lang i18n</p><p>3、icon</p><p>复制 favicon.ico 到根目录</p><p>4、导航栏文字</p><p>src&#x2F;views&#x2F;layout&#x2F;components（当前项目的布局组件）</p><p>src&#x2F;views&#x2F;layout&#x2F;components&#x2F;Navbar.vue</p><p>13行</p><el-dropdown-item><pre><code class="hljs">首页</code></pre></el-dropdown-item><p>17行</p><p>&lt;span style&#x3D;”display:block;” @click&#x3D;”logout”&gt;退出</span></p><p>5、面包屑文字</p><p>src&#x2F;components（可以在很多项目中复用的通用组件）</p><p>src&#x2F;components&#x2F;Breadcrumb&#x2F;index.vue</p><p>38行</p><p>meta: { title: ‘首页’ }</p><p>四、Eslint语法规范型检查</p><p>1、ESLint简介</p><p>JavaScript 是一个动态的弱类型语言，在开发中比较容易出错。因为没有编译程序，为了寻找 JavaScript 代码错误通常需要在执行过程中不断调适。</p><p>ESLint 是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。让程序员在编码的过程中发现问题而不是在执行的过程中。</p><p>2、语法规则</p><p>ESLint 内置了一些规则，也可以在使用过程中自定义规则。</p><p>本项目的语法规则包括：两个字符缩进，必须使用单引号，不能使用双引号，语句后不可以写分号，代码段之间必须有一个空行等。</p><p>3、确认开启语法检查</p><p>打开 config&#x2F;index.js，配置是否开启语法检查</p><p>useEslint: true,</p><p>可以关闭语法检查，建议开启，养成良好的编程习惯。</p><p>4、ESLint插件安装</p><p>vs code的ESLint插件，能帮助我们自动整理代码格式 </p><h1 id="day05"><a href="#day05" class="headerlink" title="day05"></a>day05</h1><h2 id="1、项目中的路由"><a href="#1、项目中的路由" class="headerlink" title="1、项目中的路由"></a>1、项目中的路由</h2><h3 id="一、后台系统路由实现分析"><a href="#一、后台系统路由实现分析" class="headerlink" title="一、后台系统路由实现分析"></a>一、后台系统路由实现分析</h3><p>1、入口文件中调用路由</p><p>src&#x2F;main.js</p><p>……</p><p>import router from ‘.&#x2F;router’ &#x2F;&#x2F;引入路由模块</p><p>……</p><p>new Vue({</p><p>  el: ‘#app’,</p><p>  router, &#x2F;&#x2F;挂载路由</p><p>  store,</p><p>  render: h &#x3D;&gt; h(App)</p><p>})</p><p>2、路由模块中定义路由</p><p>src&#x2F;router&#x2F;index.js</p><p>……</p><p>export const constantRouterMap &#x3D; [</p><p>  ……</p><p>]</p><p>export default new Router({</p><p>  ……</p><p>  routes: constantRouterMap</p><p>})  </p><h3 id="二、教育学院路由定义"><a href="#二、教育学院路由定义" class="headerlink" title="二、教育学院路由定义"></a>二、教育学院路由定义</h3><p>1、复制icon图标</p><p>将vue-element-admin&#x2F;src&#x2F;icons&#x2F;svg 中的图标复制到 edu-admin项目中</p><p>2、修改路由</p><p>修改 src&#x2F;router&#x2F;index.js 文件，重新定义constantRouterMap</p><p>注意：每个路由的name不能相同</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> constantRouterMap = [<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/login/index&#x27;</span>), <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/404&#x27;</span>), <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;,<br><br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/dashboard&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dashboard&#x27;</span>,<br>    <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">children</span>: [&#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;dashboard&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/dashboard/index&#x27;</span>),<br>      <span class="hljs-attr">meta</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;在线教育后台首页&#x27;</span>,<span class="hljs-attr">icon</span>:<span class="hljs-string">&#x27;dashboard&#x27;</span>&#125;<br>    &#125;]<br>  &#125;,<br>  &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/teacher&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/teacher/table&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;讲师管理&#x27;</span>,<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;讲师管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span> &#125;,<br>      <span class="hljs-attr">children</span>: [<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;table&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;讲师列表&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/list&#x27;</span>),<br>          <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;讲师列表&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;save&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;添加讲师&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/save&#x27;</span>),<br>          <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;添加讲师&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;edit/:id&#x27;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;修改讲师&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/teacher/save&#x27;</span>),<br>          <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;修改讲师&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;,<br>          <span class="hljs-attr">hidden</span>:<span class="hljs-literal">true</span><br>        &#125;,<br>      ]<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><p>3、创建vue组件</p><p>在src&#x2F;views文件夹下创建以下文件夹和文件</p><p><img src="/2023/02/21/Spring/SpringBoot2/image-4.png"></p><h2 id="2、使用nginx配置后台多服务器api"><a href="#2、使用nginx配置后台多服务器api" class="headerlink" title="2、使用nginx配置后台多服务器api"></a>2、使用nginx配置后台多服务器api</h2><h3 id="一、配置nginx反向代理"><a href="#一、配置nginx反向代理" class="headerlink" title="一、配置nginx反向代理"></a>一、配置nginx反向代理</h3><p>1、安装window版的nginx</p><p>将nginx-1.12.0.zip解压到开发目录中</p><p>2、配置nginx代理</p><p>在Nginx中配置对应的微服务服务器地址即可</p><p>注意：最好修改默认的 80端口到81</p><p>http { </p><p>server {</p><pre><code class="hljs">    listen       81;  ...</code></pre><p>}</p><p>server {</p><pre><code class="hljs">listen       9001;server_name  localhost;location ~ /eduservice/ &#123;proxy_pass http://localhost:8001;&#125;location ~ /eduoss/ &#123;proxy_pass http://localhost:8002;&#125;&#125;</code></pre><p>3、重启nginx</p><p>nginx -s reload</p><h3 id="二、配置开发环境"><a href="#二、配置开发环境" class="headerlink" title="二、配置开发环境"></a>二、配置开发环境</h3><p>1、修改config&#x2F;dev.env.js</p><p><font style="color:#d4d4d4;background-color:#1e1e1e;">  </font><font style="color:#9cdcfe;background-color:#1e1e1e;">BASE_API:</font><font style="color:#ce9178;background-color:#1e1e1e;">‘“<a href="http://localhost:9001/">http://localhost:9001</a>“‘</font></p><h2 id="3、讲师管理列表组件"><a href="#3、讲师管理列表组件" class="headerlink" title="3、讲师管理列表组件"></a>3、讲师管理列表组件</h2><h3 id="一、分页列表"><a href="#一、分页列表" class="headerlink" title="一、分页列表"></a>一、分页列表</h3><p>1、定义api</p><p>创建文件 src&#x2F;api&#x2F;edu&#x2F;teacher.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <br>    <span class="hljs-comment">//条件查询讲师带分页</span><br>    <span class="hljs-title function_">getTeacherListPage</span>(<span class="hljs-params">current,limit,teacherQuery</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/pageTeacherCondition/<span class="hljs-subst">$&#123;current&#125;</span>/<span class="hljs-subst">$&#123;limit&#125;</span>`</span>,<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>                <span class="hljs-attr">data</span>:teacherQuery<br>              &#125;)<br>    &#125;,<br>    <span class="hljs-comment">//删除讲师</span><br>    <span class="hljs-title function_">deleteTeacherId</span>(<span class="hljs-params">id</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>        &#125;)<br>    &#125;,<br>     <span class="hljs-comment">//新增讲师</span><br>     <span class="hljs-title function_">addTeacher</span>(<span class="hljs-params">teacher</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/addTeacher`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-attr">data</span>: teacher<br>        &#125;)<br>    &#125;,<br>    <span class="hljs-comment">//根据id查询讲师</span><br>    <span class="hljs-title function_">getTeacherById</span>(<span class="hljs-params">id</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/getTeacherById/<span class="hljs-subst">$&#123;id&#125;</span>`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>        &#125;)<br>    &#125;,<br>    <span class="hljs-comment">//修改讲师</span><br>    <span class="hljs-title function_">updateTeacher</span>(<span class="hljs-params">teacher</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">`/eduservice/teacher/updateTeacher`</span>,<br>            <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-attr">data</span>: teacher<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// export function getList(params) &#123;</span><br><span class="hljs-comment">//   return request(&#123;</span><br><span class="hljs-comment">//     url: &#x27;/table/list&#x27;,</span><br><span class="hljs-comment">//     method: &#x27;get&#x27;,</span><br><span class="hljs-comment">//     params</span><br><span class="hljs-comment">//   &#125;)</span><br><span class="hljs-comment">// &#125;</span><br><br></code></pre></td></tr></table></figure><p>2、初始化vue组件</p><p>src&#x2F;views&#x2F;edu&#x2F;teacher&#x2F;list.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;!--查询表单--&gt;<br>    &lt;el-form :inline=&quot;true&quot; class=&quot;demo-form-inline&quot;&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-input v-model=&quot;teacherQuery.name&quot; placeholder=&quot;讲师名&quot; /&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item&gt;<br>        &lt;el-select<br>          v-model=&quot;teacherQuery.level&quot;<br>          clearable<br>          placeholder=&quot;讲师头衔&quot;<br>        &gt;<br>          &lt;el-option :value=&quot;1&quot; label=&quot;高级讲师&quot; /&gt;<br>          &lt;el-option :value=&quot;2&quot; label=&quot;首席讲师&quot; /&gt;<br>        &lt;/el-select&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;添加时间&quot;&gt;<br>        &lt;el-date-picker<br>          v-model=&quot;teacherQuery.begin&quot;<br>          type=&quot;datetime&quot;<br>          placeholder=&quot;选择开始时间&quot;<br>          value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;<br>          default-time=&quot;00:00:00&quot;<br>        /&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;el-form-item&gt;<br>        &lt;el-date-picker<br>          v-model=&quot;teacherQuery.end&quot;<br>          type=&quot;datetime&quot;<br>          placeholder=&quot;选择 截止时间&quot;<br>          value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;<br>          default-time=&quot;00:00:00&quot;<br>        /&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;getList()&quot;<br>        &gt;查询&lt;/el-button<br>      &gt;<br>      &lt;el-button type=&quot;default&quot; @click=&quot;resetData()&quot;&gt;清空&lt;/el-button&gt;<br>    &lt;/el-form&gt;<br><br>    &lt;!-- 表格 --&gt;<br>    &lt;el-table :data=&quot;list&quot; border fit highlight-current-row&gt;<br>      &lt;el-table-column label=&quot;序号&quot; width=&quot;70&quot; align=&quot;center&quot;&gt;<br>        &lt;template slot-scope=&quot;scope&quot;&gt;<br>          &#123;&#123; (page - 1) * limit + scope.$index + 1 &#125;&#125;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br><br>      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;80&quot; /&gt;<br><br>      &lt;el-table-column label=&quot;头衔&quot; width=&quot;80&quot;&gt;<br>        &lt;template slot-scope=&quot;scope&quot;&gt;<br>          &#123;&#123; scope.row.level === 1 ? &quot;高级讲师&quot; : &quot;首席讲师&quot; &#125;&#125;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br><br>      &lt;el-table-column prop=&quot;intro&quot; label=&quot;资历&quot; /&gt;<br><br>      &lt;el-table-column prop=&quot;gmtCreate&quot; label=&quot;添加时间&quot; width=&quot;160&quot; /&gt;<br><br>      &lt;el-table-column prop=&quot;sort&quot; label=&quot;排序&quot; width=&quot;60&quot; /&gt;<br><br>      &lt;el-table-column label=&quot;操作&quot; width=&quot;200&quot; align=&quot;center&quot;&gt;<br>        &lt;template slot-scope=&quot;scope&quot;&gt;<br>          &lt;router-link :to=&quot;&#x27;/teacher/edit/&#x27; + scope.row.id&quot;&gt;<br>            &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; icon=&quot;el-icon-edit&quot;<br>              &gt;修改&lt;/el-button<br>            &gt;<br>          &lt;/router-link&gt;<br>          &lt;el-button<br>            type=&quot;danger&quot;<br>            size=&quot;mini&quot;<br>            icon=&quot;el-icon-delete&quot;<br>            @click=&quot;removeDataById(scope.row.id)&quot;<br>            &gt;删除&lt;/el-button<br>          &gt;<br>        &lt;/template&gt;<br>      &lt;/el-table-column&gt;<br>    &lt;/el-table&gt;<br><br>    &lt;!-- 分页 --&gt;<br>    &lt;el-pagination<br>      :current-page=&quot;page&quot;<br>      :page-size=&quot;limit&quot;<br>      :total=&quot;total&quot;<br>      style=&quot;padding: 30px 0; text-align: center&quot;<br>      layout=&quot;total, prev, pager, next, jumper&quot;<br>      @current-change=&quot;getList&quot;<br>    /&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import teacher from &quot;@/api/edu/teacher&quot;<br><br>export default &#123;<br>  // data:&#123;<br><br>  // &#125;,<br>  data() &#123;<br>    return &#123;<br>      list: [],<br>      page: 1,<br>      limit: 10,<br>      total: 0,<br>      teacherQuery: &#123;&#125;,<br>    &#125;<br>  &#125;,<br>  created() &#123;<br>    this.getList()<br>  &#125;,<br>  methods: &#123;<br>    getList(page = 1) &#123;<br>      this.page = page<br>      teacher<br>        .getTeacherListPage(this.page, this.limit, this.teacherQuery)<br>        .then((response) =&gt; &#123;<br>          this.list = response.data.rows<br>          this.total = response.data.total<br>        &#125;)<br>    &#125;,<br>    resetData() &#123;<br>      this.teacherQuery = &#123;&#125;<br>      this.getList()<br>    &#125;,<br>    removeDataById(id) &#123;<br>      this.$confirm(&quot;此操作将永久删除该讲师数据, 是否继续?&quot;, &quot;提示&quot;, &#123;<br>        confirmButtonText: &quot;确定&quot;,<br>        cancelButtonText: &quot;取消&quot;,<br>        type: &quot;warning&quot;,<br>      &#125;)<br>        .then(() =&gt; &#123;<br>          teacher.deleteTeacherId(id)<br>          .then((response) =&gt; &#123;<br>            this.$message(&#123;<br>              type: &quot;success&quot;,<br>              message: &quot;删除成功!&quot;,<br>            &#125;)<br>            this.getList()<br>          &#125;)<br>        &#125;)<br>    &#125;,<br>  &#125;,<br>&#125;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><p>3、定义data</p><p>4、定义methods</p><p>5、表格渲染</p><p>6、分页组件</p><p>7、顶部查询表单</p><p><strong><font style="color:rgb(255, 0, 0);">注意：</font></strong></p><p><font style="color:rgb(0, 0, 0);">element-ui的 date-picker组件默认绑定的时间值是默认世界标准时间，和中国时间差8小时</font></p><p><font style="color:rgb(255, 0, 0);">设置 value-format&#x3D;”yyyy-MM-dd HH:mm:ss” 改变绑定的值</font></p><h3 id="二、删除"><a href="#二、删除" class="headerlink" title="二、删除"></a>二、删除</h3><p>1、定义api</p><p>src&#x2F;api&#x2F;edu&#x2F;teacher.js</p><p>2、定义methods</p><p>src&#x2F;views&#x2F;edu&#x2F;teacher&#x2F;list.vue</p><p>使用MessageBox 弹框组件</p><h2 id="4、讲师管理表单组件"><a href="#4、讲师管理表单组件" class="headerlink" title="4、讲师管理表单组件"></a>4、讲师管理表单组件</h2><h3 id="一、新增"><a href="#一、新增" class="headerlink" title="一、新增"></a>一、新增</h3><p>1、定义api</p><p> src&#x2F;api&#x2F;edu&#x2F;teacher.js</p><p>2、初始化组件</p><p>src&#x2F;views&#x2F;edu&#x2F;teacher&#x2F;save.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;app-container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">label-width</span>=<span class="hljs-string">&quot;120px&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师名称&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.name&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师排序&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-input-number</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.sort&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">controls-position</span>=<span class="hljs-string">&quot;right&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:min</span>=<span class="hljs-string">&quot;0&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师头衔&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.level&quot;</span> <span class="hljs-attr">clearable</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;高级讲师&quot;</span> /&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;首席讲师&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师资历&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.career&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;讲师简介&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;teacher.intro&quot;</span> <span class="hljs-attr">:rows</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;textarea&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 讲师头像：TODO --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;saveBtnDisabled&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;saveOrUpdate&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          &gt;</span>保存&lt;/el-button</span><br><span class="language-xml">        &gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> teacherApi <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/edu/teacher&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">teacher</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">sort</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">level</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">career</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">intro</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">avatar</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">saveBtnDisabled</span>:<span class="hljs-literal">false</span>  <span class="hljs-comment">// 保存按钮是否禁用</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">watch</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    $route(to,<span class="hljs-keyword">from</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//判断路径有id值,做修改</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//从路径获取id值</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">const</span> id = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">id</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//调用根据id查询的方法</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInfo</span>(id)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//路径没有id值，做添加</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//清空表单</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span> = &#123;&#125;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">saveOrUpdate</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span>.<span class="hljs-property">id</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">saveTeacher</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;<span class="hljs-keyword">else</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateTeacher</span>()</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">saveTeacher</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        teacherApi.<span class="hljs-title function_">addTeacher</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span>)</span></span><br><span class="language-javascript"><span class="language-xml">          .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.$message(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;success&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;添加成功!&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/teacher/table&#x27;</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">getInfo</span>(<span class="hljs-params">id</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        teacherApi.<span class="hljs-title function_">getTeacherById</span>(id)</span></span><br><span class="language-javascript"><span class="language-xml">          .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span> = response.<span class="hljs-property">data</span>.<span class="hljs-property">teacher</span></span></span><br><span class="language-javascript"><span class="language-xml">          &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">updateTeacher</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        teacherApi.<span class="hljs-title function_">updateTeacher</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">teacher</span>)</span></span><br><span class="language-javascript"><span class="language-xml">          .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span>=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-variable language_">this</span>.$message(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;success&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;修改成功!&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/teacher/table&#x27;</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>3、实现新增功能</p><p>引入teacher api模块</p><h3 id="二、回显"><a href="#二、回显" class="headerlink" title="二、回显"></a>二、回显</h3><h3 id="三、修改"><a href="#三、修改" class="headerlink" title="三、修改"></a>三、修改</h3><h3 id="四、存在问题"><a href="#四、存在问题" class="headerlink" title="四、存在问题"></a>四、存在问题</h3><p>vue-router导航切换 时，如果两个路由都渲染同个组件，组件会重（chong）用,</p><p>组件的生命周期钩子（created）不会再被调用, 使得组件的一些数据无法根据 path的改变得到更新</p><p>因此：</p><p>1、我们可以在watch中监听路由的变化，当路由变化时，重新调用created中的内容</p><p>2、在init方法中我们判断路由的变化，如果是修改路由，则从api获取表单数据，</p><pre><code class="hljs">  如果是新增路由，则重新初始化表单数据</code></pre><h2 id="5、后端业务的灵活优化"><a href="#5、后端业务的灵活优化" class="headerlink" title="5、后端业务的灵活优化"></a>5、后端业务的灵活优化</h2><h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><h2 id="1、阿里云存储OSS"><a href="#1、阿里云存储OSS" class="headerlink" title="1、阿里云存储OSS"></a>1、阿里云存储OSS</h2><h3 id="一、对象存储OSS"><a href="#一、对象存储OSS" class="headerlink" title="一、对象存储OSS"></a>一、对象存储OSS</h3><p>为了解决海量数据存储与弹性扩容，项目中我们采用云存储的解决方案- 阿里云OSS。 </p><p>1、开通“对象存储OSS”服务</p><p>（1）申请阿里云账号</p><p>（2）实名认证</p><p>（3）开通“对象存储OSS”服务</p><p>（4）进入管理控制台</p><p>2、创建Bucket</p><p>选择：标准存储、公共读、不开通</p><h3 id="二、使用SDK"><a href="#二、使用SDK" class="headerlink" title="二、使用SDK"></a>二、使用SDK</h3><h2 id="2、后端集成OSS"><a href="#2、后端集成OSS" class="headerlink" title="2、后端集成OSS"></a>2、后端集成OSS</h2><h3 id="一、新建云存储微服务"><a href="#一、新建云存储微服务" class="headerlink" title="一、新建云存储微服务"></a>一、新建云存储微服务</h3><p>1、在service模块下创建子模块service-oss</p><p>2、pom</p><dependencies><!--        阿里云oss依赖--><pre><code class="hljs">    &lt;dependency&gt;        &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;        &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><!--        日期工具栏依赖--><pre><code class="hljs">    &lt;dependency&gt;        &lt;groupId&gt;joda-time&lt;/groupId&gt;        &lt;artifactId&gt;joda-time&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><p>3、配置application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#服务端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8002</span><br><span class="hljs-comment">#服务名</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">service-oss</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#环境设置：dev、test、prod</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#阿里云 OSS</span><br><span class="hljs-comment">#不同的服务器，地址不同</span><br><span class="hljs-attr">aliyun.oss.file.endpoint</span>=<span class="hljs-string">oss-cn-guangzhou.aliyuncs.com</span><br><span class="hljs-attr">aliyun.oss.file.keyid</span>=<span class="hljs-string">***</span><br><span class="hljs-attr">aliyun.oss.file.keysecret</span>=<span class="hljs-string">***</span><br><span class="hljs-comment">#bucket可以在控制台创建，也可以使用java代码创建</span><br><span class="hljs-attr">aliyun.oss.file.bucketname</span>=<span class="hljs-string">edu-mus1c</span><br></code></pre></td></tr></table></figure><p>spring boot 会默认加载org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration这个类，</p><p>而DataSourceAutoConfiguration类使用了@Configuration注解向spring注入了dataSource bean，又因为项目（oss模块）中并没有关于dataSource相关的配置信息，所以当spring创建dataSource bean时因缺少相关的信息就会报错。</p><p>解决办法：</p><p>方法1、在@SpringBootApplication注解上加上exclude，解除自动加载DataSourceAutoConfiguration</p><p>@SpringBootApplication(exclude &#x3D; DataSourceAutoConfiguration.class)</p><h3 id="二、实现文件上传"><a href="#二、实现文件上传" class="headerlink" title="二、实现文件上传"></a>二、实现文件上传</h3><p>1、从配置文件读取常量</p><p>创建常量读取工具类：ConstantPropertiesUtil.java</p><p>使用@Value读取application.properties里的配置内容</p><p>用spring的 InitializingBean 的 afterPropertiesSet 来初始化配置信息，这个方法将在所有的属性被初始化后调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConstantPropertiesUtils</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.endpoint&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String endpoint;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String keyId;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String keySecret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String bucketName;<br><br>    <span class="hljs-comment">//定义公开静态常量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String END_POIND;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_ID;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String ACCESS_KEY_SECRET;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String BUCKET_NAME;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        END_POIND = endpoint;<br>        ACCESS_KEY_ID = keyId;<br>        ACCESS_KEY_SECRET = keySecret;<br>        BUCKET_NAME = bucketName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、文件上传</p><p>创建Service接口：OssService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OssService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadFileAvatar</span><span class="hljs-params">(MultipartFile multipartFile)</span> &#123;<br>        <span class="hljs-comment">// 工具类获取值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">endpoint</span> <span class="hljs-operator">=</span> ConstantPropertiesUtils.END_POIND;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeyId</span> <span class="hljs-operator">=</span> ConstantPropertiesUtils.ACCESS_KEY_ID;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">accessKeySecret</span> <span class="hljs-operator">=</span> ConstantPropertiesUtils.ACCESS_KEY_SECRET;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">bucketName</span> <span class="hljs-operator">=</span> ConstantPropertiesUtils.BUCKET_NAME;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建OSSClient实例。</span><br>            <span class="hljs-type">OSS</span> <span class="hljs-variable">ossClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);<br>            <span class="hljs-comment">//获取上传文件输入流</span><br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span>multipartFile.getInputStream();<br>            <span class="hljs-comment">//获取文件名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> multipartFile.getOriginalFilename();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            fileName = uuid+fileName;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">datePath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTime</span>().toString(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>);<br>            fileName = datePath+<span class="hljs-string">&quot;/&quot;</span>+fileName;<br><br>            <span class="hljs-comment">//调用oss方法实现上传</span><br>            <span class="hljs-comment">//第一个参数  Bucket名称</span><br>            <span class="hljs-comment">//第二个参数  上传到oss文件路径和文件名称   aa/bb/1.jpg</span><br>            <span class="hljs-comment">//第三个参数  上传文件输入流</span><br>            ossClient.putObject(bucketName,fileName,inputStream);<br>            <span class="hljs-comment">// 关闭OSSClient。</span><br>            ossClient.shutdown();<br><br>            <span class="hljs-comment">//https://edu-mus1c.oss-cn-guangzhou.aliyuncs.com/1.png</span><br>            String url=<span class="hljs-string">&quot;https://&quot;</span>+bucketName+<span class="hljs-string">&quot;.&quot;</span>+endpoint+<span class="hljs-string">&quot;/&quot;</span>+fileName;;<br>            <span class="hljs-keyword">return</span> url;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、控制层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduoss/fileoss&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OssController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OssService ossService;<br><br>    <span class="hljs-meta">@ApiOperation(&quot;头像上传&quot;)</span><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">uploadOssFile</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> ossService.uploadFileAvatar(file);<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;url&quot;</span>,url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、重启oss服务</p><p>5、Swagger中测试文件上传</p><p>6、配置nginx反向代理</p><p>将接口地址加入nginx配置</p><p>location ~ &#x2F;eduoss&#x2F; {</p><pre><code class="hljs">proxy_pass http://localhost:8002;</code></pre><p>}</p><h2 id="3、前端整合上传组件"><a href="#3、前端整合上传组件" class="headerlink" title="3、前端整合上传组件"></a>3、前端整合上传组件</h2><h3 id="一、前端整合图片上传组件"><a href="#一、前端整合图片上传组件" class="headerlink" title="一、前端整合图片上传组件"></a>一、前端整合图片上传组件</h3><p>1、复制头像上传组件</p><p>从vue-element-admin复制组件：</p><p>vue-element-admin&#x2F;src&#x2F;components&#x2F;ImageCropper</p><p>vue-element-admin&#x2F;src&#x2F;components&#x2F;PanThumb</p><p>2、前端添加文件上传组件</p><p>src&#x2F;views&#x2F;edu&#x2F;teacher&#x2F;save.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;!-- 讲师头像 --&gt;<br>     &lt;el-form-item label=&quot;讲师头像&quot;&gt;<br><br>         &lt;!-- 头衔缩略图 --&gt;<br>         &lt;pan-thumb :image=&quot;teacher.avatar&quot;/&gt;<br>         &lt;!-- 文件上传按钮 --&gt;<br>         &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-upload&quot; @click=&quot;imagecropperShow=true&quot;&gt;更换头像<br>         &lt;/el-button&gt;<br><br>         &lt;!--<br>     v-show：是否显示上传组件<br>     :key：类似于id，如果一个页面多个图片上传控件，可以做区分<br>     :url：后台上传的url地址<br>     @close：关闭上传组件<br>     @crop-upload-success：上传成功后的回调 <br>       &lt;input type=&quot;file&quot; name=&quot;file&quot;/&gt;<br>     --&gt;<br>         &lt;image-cropper<br>                       v-show=&quot;imagecropperShow&quot;<br>                       :width=&quot;300&quot;<br>                       :height=&quot;300&quot;<br>                       :key=&quot;imagecropperKey&quot;<br>                       :url=&quot;BASE_API+&#x27;/eduoss/fileoss&#x27;&quot;<br>                       field=&quot;file&quot;<br>                       @close=&quot;close&quot;<br>                       @crop-upload-success=&quot;cropSuccess&quot;/&gt;<br>     &lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure><p>3、引入组件模块</p><p>import ImageCropper from ‘@&#x2F;components&#x2F;ImageCropper’</p><p>import PanThumb from ‘@&#x2F;components&#x2F;PanThumb’</p><p>4、声明组件</p><p>export default {</p><p>  components: {ImageCropper,PanThumb},</p><p>5、js脚本实现上传和图片回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">data() &#123;<br>  return &#123;<br>    ...<br>    imagecropperShow:false, //上传弹框组件是否显示<br>    imagecropperKey:0,<br>    BASE_API:process.env.BASE_API,<br>    saveBtnDisabled:false  // 保存按钮是否禁用<br>  &#125;;<br>  ...<br>  methods: &#123;<br>    close()&#123;<br>      this.imagecropperShow=false <br>      // 上传成功后，重新打开上传组件时初始化组件，否则显示上一次的上传结果<br>      this.imagecropperKey = this.imagecropperKey+1<br>    &#125;,<br>      cropSuccess(data)&#123;<br>        this.imagecropperShow=false<br>        //上传之后接口返回图片地址<br>        this.teacher.avatar = data.url<br>        // 上传成功后，重新打开上传组件时初始化组件，否则显示上一次的上传结果<br>        this.imagecropperKey = this.imagecropperKey+1<br>      &#125;,<br>...<br></code></pre></td></tr></table></figure><h2 id="1、EasyExcel读写Excel的基本使用"><a href="#1、EasyExcel读写Excel的基本使用" class="headerlink" title="1、EasyExcel读写Excel的基本使用"></a>1、EasyExcel读写Excel的基本使用</h2><h3 id="一、Excel导入导出的应用场景"><a href="#一、Excel导入导出的应用场景" class="headerlink" title="一、Excel导入导出的应用场景"></a>一、Excel导入导出的应用场景</h3><p>1、数据导入：减轻录入工作量</p><p>2、数据导出：统计信息归档</p><p>3、数据传输：异构系统之间数据传输</p><h3 id="二、EasyExcel简介"><a href="#二、EasyExcel简介" class="headerlink" title="二、EasyExcel简介"></a>二、EasyExcel简介</h3><p>1、EasyExcel特点</p><p>Java领域解析、生成Excel比较有名的框架有Apache poi、jxl等。但他们都存在一个严重的问题就是非常的耗内存。如果你的系统并发量不大的话可能还行，但是一旦并发上来后一定会OOM或者JVM频繁的full gc。</p><p>EasyExcel是阿里巴巴开源的一个excel处理框架，以使用简单、节省内存著称。EasyExcel能大大减少占用内存的主要原因是在解析Excel时没有将文件数据一次性全部加载到内存中，而是从磁盘上一行行读取数据，逐个解析。</p><p>EasyExcel采用一行一行的解析模式，并将一行的解析结果以观察者的模式通知处理（AnalysisEventListener）。</p><h2 id="2、Excel写"><a href="#2、Excel写" class="headerlink" title="2、Excel写"></a>2、Excel写</h2><h3 id="一、创建项目，实现EasyExcel对Excel写操作"><a href="#一、创建项目，实现EasyExcel对Excel写操作" class="headerlink" title="一、创建项目，实现EasyExcel对Excel写操作"></a>一、创建项目，实现EasyExcel对Excel写操作</h3><p>1、创建一个普通的maven项目</p><p>项目名：excel-easydemo</p><p>2、pom中引入xml相关依赖</p><dependencies><pre><code class="hljs">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;easyexcel&lt;/artifactId&gt;    &lt;version&gt;2.1.1&lt;/version&gt;&lt;/dependency&gt;</code></pre></dependencies><p>3、创建实体类</p><p>设置表头和添加的数据字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoData</span> &#123;<br>    <span class="hljs-comment">//设置excel表头名称</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;学生编号&quot;,index = 0)</span><br>    <span class="hljs-keyword">private</span> Integer sno;<br>    <span class="hljs-meta">@ExcelProperty(value = &quot;学生姓名&quot;,index = 1)</span><br>    <span class="hljs-keyword">private</span> String sname;<br>&#125;<br></code></pre></td></tr></table></figure><p>4 、实现写操作</p><p>（1）创建方法循环设置要添加到Excel的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建方法返回list集合</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;DemoData&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>    List&lt;DemoData&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-type">DemoData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoData</span>();<br>        data.setSno(i);<br>        data.setSname(<span class="hljs-string">&quot;lucy&quot;</span>+i);<br>        list.add(data);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）实现最终的添加操作（写法一）</p><p><font style="color:#808080;">&#x2F;&#x2F;实现excel写的操作<br></font><font style="color:#808080;">        &#x2F;&#x2F;1 设置写入文件夹地址和excel文件名称<br></font><font style="color:#808080;">&#x2F;&#x2F;        String filename &#x3D; “F:\write.xlsx”;<br></font><font style="color:#808080;">        &#x2F;&#x2F;2 调用easyexcel里面的方法实现写操作<br></font><font style="color:#808080;">        &#x2F;&#x2F;write方法两个参数：第一个参数文件路径名称，第二个参数实体类class<br></font><font style="color:#808080;">&#x2F;&#x2F;        EasyExcel.write(filename,DemoData.class).sheet(“学生列表”).doWrite(getData());</font></p><h2 id="3、Excel读"><a href="#3、Excel读" class="headerlink" title="3、Excel读"></a>3、Excel读</h2><h3 id="一、实现EasyExcel对Excel读操作"><a href="#一、实现EasyExcel对Excel读操作" class="headerlink" title="一、实现EasyExcel对Excel读操作"></a>一、实现EasyExcel对Excel读操作</h3><p>1、创建实体类</p><p>2、创建读取操作的监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;DemoData&gt; &#123;<br>    <span class="hljs-comment">//一行一行读取excel内容</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(DemoData data, AnalysisContext analysisContext)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;****&quot;</span>+data);<br>    &#125;<br>    <span class="hljs-comment">//读取表头内容</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;表头：&quot;</span>+headMap);<br>    &#125;<br>    <span class="hljs-comment">//读取完成之后</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、调用实现最终的读取</p><pre><code class="hljs">    &lt;font style=&quot;color:#808080;&quot;&gt;//实现excel读操作  </code></pre><p></font><font style="color:#808080;">&#x2F;&#x2F;        String filename &#x3D; “F:\write.xlsx”;<br></font><font style="color:#808080;">&#x2F;&#x2F;        EasyExcel.read(filename,DemoData.class,new ExcelListener()).sheet().doRead();</font></p><h2 id="4、前端页面的实现"><a href="#4、前端页面的实现" class="headerlink" title="4、前端页面的实现"></a>4、前端页面的实现</h2><h3 id="一、Excel模板"><a href="#一、Excel模板" class="headerlink" title="一、Excel模板"></a>一、Excel模板</h3><p>1、编辑Excel模板</p><p>2、将文件上传至阿里云OSS</p><h3 id="二、配置路由"><a href="#二、配置路由" class="headerlink" title="二、配置路由"></a>二、配置路由</h3><p>1、添加路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/subject&#x27;</span>,<br>   <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>   <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/subject/list&#x27;</span>,<br>   <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;课程分类管理&#x27;</span>,<br>   <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程分类管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span> &#125;,<br>   <span class="hljs-attr">children</span>: [<br>     &#123;<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>       <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;课程分类列表&#x27;</span>,<br>       <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/object/list&#x27;</span>),<br>       <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程分类列表&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>     &#125;,<br>     &#123;<br>       <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;save&#x27;</span>,<br>       <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;添加课程分类&#x27;</span>,<br>       <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/object/save&#x27;</span>),<br>       <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;添加课程分类&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>     &#125;<br>   ]<br> &#125;,<br></code></pre></td></tr></table></figure><p>2、添加vue组件</p><h3 id="三、表单组件save-vue"><a href="#三、表单组件save-vue" class="headerlink" title="三、表单组件save.vue"></a>三、表单组件save.vue</h3><p>1、js定义数据</p><p>2、template</p><p>3、js上传方法</p><p>4、回调函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;el-form label-width=&quot;120px&quot;&gt;<br>      &lt;el-form-item label=&quot;信息描述&quot;&gt;<br>        &lt;el-tag type=&quot;info&quot;&gt;excel模版说明&lt;/el-tag&gt;<br>        &lt;el-tag&gt;<br>          &lt;i class=&quot;el-icon-download&quot; /&gt;<br>          &lt;a :href=&quot;&#x27;/static/01.xlsx&#x27;&quot;&gt;点击下载模版&lt;/a&gt;<br>        &lt;/el-tag&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;选择Excel&quot;&gt;<br>        &lt;el-upload<br>          ref=&quot;upload&quot;<br>          :auto-upload=&quot;false&quot;<br>          :on-success=&quot;fileUploadSuccess&quot;<br>          :on-error=&quot;fileUploadError&quot;<br>          :disabled=&quot;importBtnDisabled&quot;<br>          :limit=&quot;1&quot;<br>          :action=&quot;BASE_API + &#x27;/eduservice/subject/addSubject&#x27;&quot;<br>          name=&quot;file&quot;<br>          accept=&quot;application/vnd.ms-excel&quot;<br>        &gt;<br>          &lt;el-button slot=&quot;trigger&quot; size=&quot;small&quot; type=&quot;primary&quot;<br>            &gt;选取文件&lt;/el-button<br>          &gt;<br>          &lt;el-button<br>            :loading=&quot;loading&quot;<br>            style=&quot;margin-left: 10px&quot;<br>            size=&quot;small&quot;<br>            type=&quot;success&quot;<br>            @click=&quot;submitUpload&quot;<br>            &gt;上传到服务器&lt;/el-button<br>          &gt;<br>        &lt;/el-upload&gt;<br>      &lt;/el-form-item&gt;<br>    &lt;/el-form&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      BASE_API: process.env.BASE_API, // 接口API地址<br>      importBtnDisabled: false, // 按钮是否禁用,<br>      loading: false<br>    &#125;;<br>  &#125;,<br>  created() &#123;<br><br>  &#125;,<br>  methods: &#123;<br>    //点击按钮上传文件到接口里面<br>    submitUpload() &#123;<br>      this.importBtnDisabled = true;<br>      this.loading = true;<br>      // js: document.getElementById(&quot;upload&quot;).submit()<br>      this.$refs.upload.submit();<br>    &#125;,<br>    //上传成功<br>    fileUploadSuccess(response) &#123;<br>      //提示信息<br>      this.loading = false;<br>      this.$message(&#123;<br>        type: &quot;success&quot;,<br>        message: &quot;添加课程分类成功&quot;,<br>      &#125;);<br>      //跳转课程分类列表<br>      //路由跳转<br>      this.$router.push(&#123;path: &quot;/subject/list&quot; &#125;);<br>    &#125;,<br>    //上传失败<br>    fileUploadError() &#123;<br>      this.loading = false;<br>      this.$message(&#123;<br>        type: &quot;error&quot;,<br>        message: &quot;添加课程分类失败&quot;,<br>      &#125;);<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="5、课程分类管理接口"><a href="#5、课程分类管理接口" class="headerlink" title="5、课程分类管理接口"></a>5、课程分类管理接口</h2><h3 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h3><p>1、service-edu模块配置依赖</p><p><font style="color:#e8bf6a;"><dependency><br></font><font style="color:#e8bf6a;">    <groupId></font>com.alibaba<font style="color:#e8bf6a;"></groupId><br></font><font style="color:#e8bf6a;">    <artifactId></font>easyexcel<font style="color:#e8bf6a;"></artifactId><br></font><font style="color:#e8bf6a;">    <version></font>2.1.1<font style="color:#e8bf6a;"></version><br></font><font style="color:#e8bf6a;"></dependency></font></p><h3 id="二、业务处理"><a href="#二、业务处理" class="headerlink" title="二、业务处理"></a>二、业务处理</h3><p>1、EduSubjectController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/eduservice/subject&quot;)</span><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduSubjectController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> EduSubjectService eduSubjectService;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/addSubject&quot;)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">addSubject</span><span class="hljs-params">(MultipartFile file)</span>&#123;<br>        eduSubjectService.saveSubject(file,eduSubjectService);<br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getAllSubject&quot;)</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">getAllSubject</span><span class="hljs-params">()</span>&#123;<br>        List&lt;OneSubject&gt; list = eduSubjectService.getAllOneTwoSubject();<br>        <span class="hljs-keyword">return</span> R.ok().data(<span class="hljs-string">&quot;list&quot;</span>,list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、创建和Excel对应的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubjectData</span> &#123;<br>    <span class="hljs-meta">@ExcelProperty(index = 0)</span><br>    <span class="hljs-meta">@TableId(type = IdType.ID_WORKER_STR)</span><br>    <span class="hljs-keyword">private</span> String oneSubjectName;<br>    <span class="hljs-meta">@ExcelProperty(index = 1)</span><br>    <span class="hljs-keyword">private</span> String twoSubjectName;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、EduSubjectService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduSubjectServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;EduSubjectMapper, EduSubject&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EduSubjectService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveSubject</span><span class="hljs-params">(MultipartFile file,EduSubjectService subjectService)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> file.getInputStream();<br>            EasyExcel.read(inputStream, SubjectData.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SubjectExcelListener</span>(subjectService)).sheet().doRead();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;OneSubject&gt; <span class="hljs-title function_">getAllOneTwoSubject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1 查询所有一级分类  parentid = 0</span><br>        QueryWrapper&lt;EduSubject&gt; wrapperOne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapperOne.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        List&lt;EduSubject&gt; oneSubjectList = baseMapper.selectList(wrapperOne);<br><br>        <span class="hljs-comment">//2 查询所有二级分类  parentid != 0</span><br>        QueryWrapper&lt;EduSubject&gt; wrapperTwo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapperTwo.ne(<span class="hljs-string">&quot;parent_id&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        List&lt;EduSubject&gt; twoSubjectList = baseMapper.selectList(wrapperTwo);<br><br>        <span class="hljs-comment">//创建list集合，用于存储最终封装数据</span><br>        List&lt;OneSubject&gt; finalSubjectList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//3 封装一级分类</span><br>        <span class="hljs-comment">//查询出来所有的一级分类list集合遍历，得到每个一级分类对象，获取每个一级分类对象值，</span><br>        <span class="hljs-comment">//封装到要求的list集合里面 List&lt;OneSubject&gt; finalSubjectList</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; oneSubjectList.size(); i++) &#123; <span class="hljs-comment">//遍历oneSubjectList集合</span><br>            <span class="hljs-comment">//得到oneSubjectList每个eduSubject对象</span><br>            <span class="hljs-type">EduSubject</span> <span class="hljs-variable">eduSubject</span> <span class="hljs-operator">=</span> oneSubjectList.get(i);<br>            <span class="hljs-comment">//把eduSubject里面值获取出来，放到OneSubject对象里面</span><br>            <span class="hljs-type">OneSubject</span> <span class="hljs-variable">oneSubject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OneSubject</span>();<br><span class="hljs-comment">//            oneSubject.setId(eduSubject.getId());</span><br><span class="hljs-comment">//            oneSubject.setTitle(eduSubject.getTitle());</span><br>            <span class="hljs-comment">//eduSubject值复制到对应oneSubject对象里面</span><br>            BeanUtils.copyProperties(eduSubject,oneSubject);<br>            <span class="hljs-comment">//多个OneSubject放到finalSubjectList里面</span><br>            finalSubjectList.add(oneSubject);<br><br>            <span class="hljs-comment">//在一级分类循环遍历查询所有的二级分类</span><br>            <span class="hljs-comment">//创建list集合封装每个一级分类的二级分类</span><br>            List&lt;TwoSubject&gt; twoFinalSubjectList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">//遍历二级分类list集合</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; m &lt; twoSubjectList.size(); m++) &#123;<br>                <span class="hljs-comment">//获取每个二级分类</span><br>                <span class="hljs-type">EduSubject</span> <span class="hljs-variable">tSubject</span> <span class="hljs-operator">=</span> twoSubjectList.get(m);<br>                <span class="hljs-comment">//判断二级分类parentid和一级分类id是否一样</span><br>                <span class="hljs-keyword">if</span>(tSubject.getParentId().equals(eduSubject.getId())) &#123;<br>                    <span class="hljs-comment">//把tSubject值复制到TwoSubject里面，放到twoFinalSubjectList里面</span><br>                    <span class="hljs-type">TwoSubject</span> <span class="hljs-variable">twoSubject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TwoSubject</span>();<br>                    BeanUtils.copyProperties(tSubject,twoSubject);<br>                    twoFinalSubjectList.add(twoSubject);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//把一级下面所有二级分类放到一级分类里面</span><br>            oneSubject.setChildren(twoFinalSubjectList);<br>        &#125;<br>        <span class="hljs-keyword">return</span> finalSubjectList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>4、创建读取Excel监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubjectExcelListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;SubjectData&gt; &#123;<br><br>    <span class="hljs-comment">//因为SubjectExcelListener不能交给spring进行管理，需要自己new，不能注入其他对象</span><br>    <span class="hljs-comment">//不能实现数据库操作</span><br>    <span class="hljs-keyword">public</span> EduSubjectService subjectService;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubjectExcelListener</span><span class="hljs-params">()</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SubjectExcelListener</span><span class="hljs-params">(EduSubjectService subjectService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.subjectService = subjectService;<br>    &#125;<br><br>    <span class="hljs-comment">//读取excel内容，一行一行进行读取</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(SubjectData subjectData, AnalysisContext analysisContext)</span> &#123;<br>        <span class="hljs-keyword">if</span>(subjectData == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EduException</span>(<span class="hljs-number">20001</span>,<span class="hljs-string">&quot;文件数据为空&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//一行一行读取，每次读取有两个值，第一个值一级分类，第二个值二级分类</span><br>        <span class="hljs-comment">//判断一级分类是否重复</span><br>        <span class="hljs-type">EduSubject</span> <span class="hljs-variable">existOneSubject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.existOneSubject(subjectService, subjectData.getOneSubjectName());<br>        <span class="hljs-keyword">if</span>(existOneSubject == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//没有相同一级分类，进行添加</span><br>            existOneSubject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EduSubject</span>();<br>            existOneSubject.setParentId(<span class="hljs-string">&quot;0&quot;</span>);<br>            existOneSubject.setTitle(subjectData.getOneSubjectName());<span class="hljs-comment">//一级分类名称</span><br>            subjectService.save(existOneSubject);<br>        &#125;<br><br>        <span class="hljs-comment">//获取一级分类id值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pid</span> <span class="hljs-operator">=</span> existOneSubject.getId();<br><br>        <span class="hljs-comment">//添加二级分类</span><br>        <span class="hljs-comment">//判断二级分类是否重复</span><br>        <span class="hljs-type">EduSubject</span> <span class="hljs-variable">existTwoSubject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.existTwoSubject(subjectService, subjectData.getTwoSubjectName(), pid);<br>        <span class="hljs-keyword">if</span>(existTwoSubject == <span class="hljs-literal">null</span>) &#123;<br>            existTwoSubject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EduSubject</span>();<br>            existTwoSubject.setParentId(pid);<br>            existTwoSubject.setTitle(subjectData.getTwoSubjectName());<span class="hljs-comment">//二级分类名称</span><br>            subjectService.save(existTwoSubject);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//判断一级分类不能重复添加</span><br>    <span class="hljs-keyword">private</span> EduSubject <span class="hljs-title function_">existOneSubject</span><span class="hljs-params">(EduSubjectService subjectService,String name)</span> &#123;<br>        QueryWrapper&lt;EduSubject&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;title&quot;</span>,name);<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-type">EduSubject</span> <span class="hljs-variable">oneSubject</span> <span class="hljs-operator">=</span> subjectService.getOne(wrapper);<br>        <span class="hljs-keyword">return</span> oneSubject;<br>    &#125;<br><br>    <span class="hljs-comment">//判断二级分类不能重复添加</span><br>    <span class="hljs-keyword">private</span> EduSubject <span class="hljs-title function_">existTwoSubject</span><span class="hljs-params">(EduSubjectService subjectService,String name,String pid)</span> &#123;<br>        QueryWrapper&lt;EduSubject&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        wrapper.eq(<span class="hljs-string">&quot;title&quot;</span>,name);<br>        wrapper.eq(<span class="hljs-string">&quot;parent_id&quot;</span>,pid);<br>        <span class="hljs-type">EduSubject</span> <span class="hljs-variable">twoSubject</span> <span class="hljs-operator">=</span> subjectService.getOne(wrapper);<br>        <span class="hljs-keyword">return</span> twoSubject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6、分类列表展示"><a href="#6、分类列表展示" class="headerlink" title="6、分类列表展示"></a>6、分类列表展示</h2><h3 id="一、前端实现"><a href="#一、前端实现" class="headerlink" title="一、前端实现"></a>一、前端实现</h3><p>1、参考 views&#x2F;tree&#x2F;index.vue</p><p>2、创建api</p><p>api&#x2F;edu&#x2F;subject.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <br>    <span class="hljs-comment">//条件查询讲师带分页</span><br>    <span class="hljs-title function_">getSubjectList</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>                <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/eduservice/subject/getAllSubject&#x27;</span>,<br>                <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>              &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、list.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div class=&quot;app-container&quot;&gt;<br>    &lt;el-input v-model=&quot;filterText&quot; placeholder=&quot;Filter keyword&quot; style=&quot;margin-bottom:30px;&quot; /&gt;<br><br>    &lt;el-tree<br>      ref=&quot;tree2&quot;<br>      :data=&quot;data2&quot;<br>      :props=&quot;defaultProps&quot;<br>      :filter-node-method=&quot;filterNode&quot;<br>      class=&quot;filter-tree&quot;<br>      default-expand-all<br>    /&gt;<br><br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import subject from &#x27;@/api/edu/subject&#x27;<br>export default &#123;<br><br>  data() &#123;<br>    return &#123;<br>      filterText: &#x27;&#x27;,<br>      data2: [],<br>      defaultProps: &#123;<br>        children: &#x27;children&#x27;,<br>        label: &#x27;title&#x27;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  created()&#123;<br>    this.getAllSubjectList()<br>  &#125;,<br>  watch: &#123;<br>    filterText(val) &#123;<br>      this.$refs.tree2.filter(val)<br>    &#125;<br>  &#125;,<br><br>  methods: &#123;<br>    getAllSubjectList()&#123;<br>      subject.getSubjectList()<br>        .then(response=&gt;&#123;<br>            this.data2=response.data.list<br>        &#125;)<br>    &#125;,<br>    filterNode(value, data) &#123;<br>      if (!value) return true<br>      return data.title.toLowerCase().indexOf(value.toLowerCase()) !== -1<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br><br></code></pre></td></tr></table></figure><h3 id="二、后端实现"><a href="#二、后端实现" class="headerlink" title="二、后端实现"></a>二、后端实现</h3><p>1、创建vo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//一级分类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OneSubject</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-comment">//一个一级分类有多个二级分类</span><br>    <span class="hljs-keyword">private</span> List&lt;TwoSubject&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二级分类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoSubject</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String title;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、创建controller</p><p>3、创建service</p><h3 id="三、优化前端过滤功能"><a href="#三、优化前端过滤功能" class="headerlink" title="三、优化前端过滤功能"></a>三、优化前端过滤功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">methods: &#123;<br>   ...<br>   filterNode(value, data) &#123;<br>     if (!value) return true<br>     return data.title.toLowerCase().indexOf(value.toLowerCase()) !== -1<br>   &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h1 id="day07"><a href="#day07" class="headerlink" title="day07"></a>day07</h1><h2 id="1、课程发布表单-步骤导航"><a href="#1、课程发布表单-步骤导航" class="headerlink" title="1、课程发布表单-步骤导航"></a>1、课程发布表单-步骤导航</h2><h3 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h3><h3 id="二、配置路由-1"><a href="#二、配置路由-1" class="headerlink" title="二、配置路由"></a>二、配置路由</h3><p>1、添加路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/course&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">Layout</span>,<br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/course/list&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;课程管理&#x27;</span>,<br>  <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程管理&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;example&#x27;</span> &#125;,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;课程列表&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/list&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;课程列表&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;table&#x27;</span> &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;save&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;添加课程&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/info&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;添加课程&#x27;</span>, <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;tree&#x27;</span> &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;info/:id&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCourseInfoEdit&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/info&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑课程基本信息&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>      <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;chapter/:id&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCourseChapterEdit&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/chapter&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编辑课程大纲&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>      <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;publish/:id&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;EduCoursePublishEdit&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/edu/course/publish&#x27;</span>),<br>      <span class="hljs-attr">meta</span>: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;发布课程&#x27;</span>, <span class="hljs-attr">noCache</span>: <span class="hljs-literal">true</span> &#125;,<br>      <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>2、添加vue组件</p><p><img src="/2023/02/21/Spring/SpringBoot2/image-5.png"></p><h3 id="三、整合步骤条组件"><a href="#三、整合步骤条组件" class="headerlink" title="三、整合步骤条组件"></a>三、整合步骤条组件</h3><p>1、课程信息页面</p><p><font style="color:rgb(0, 0, 0);">info.vue</font></p><p><font style="color:rgb(0, 0, 0);"></font></p><p>2、课程大纲页面</p><p>chapter.vue</p><p>3、课程发布页面</p><p>publish.vue</p><h2 id="2、编辑课程基本信息"><a href="#2、编辑课程基本信息" class="headerlink" title="2、编辑课程基本信息"></a>2、编辑课程基本信息</h2><h3 id="一、后台api"><a href="#一、后台api" class="headerlink" title="一、后台api"></a>一、后台api</h3><p>1、定义form表单对象</p><p>EduCourse.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@ApiModel(value=&quot;EduCourse对象&quot;, description=&quot;课程&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EduCourse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程ID&quot;)</span><br>    <span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.ID_WORKER_STR)</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程讲师ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String teacherId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程专业/二级分类id&quot;)</span><br>    <span class="hljs-keyword">private</span> String subjectId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程专业父级/一级分类ID&quot;)</span><br>    <span class="hljs-keyword">private</span> String subjectParentId;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程标题&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程销售价格，设置为0则可免费观看&quot;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal price;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;总课时&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer lessonNum;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程封面图片路径&quot;)</span><br>    <span class="hljs-keyword">private</span> String cover;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;销售数量&quot;)</span><br>    <span class="hljs-keyword">private</span> Long buyCount;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;浏览数量&quot;)</span><br>    <span class="hljs-keyword">private</span> Long viewCount;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;乐观锁&quot;)</span><br>    <span class="hljs-keyword">private</span> Long version;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;课程状态 Draft未发布  Normal已发布&quot;)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;逻辑删除 1（true）已删除， 0（false）未删除&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer isDeleted;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br>    <span class="hljs-keyword">private</span> Date gmtCreate;<br><br>    <span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br>    <span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date gmtModified;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>2、修改CourseDescription主键生成策略</p><p> @TableId(value &#x3D; “id”, type &#x3D; IdType.ID_WORKER_STR)</p><p>3、定义常量</p><p>4、定义控制层接口</p><p>5、定义业务层方法</p><p>6、Swagger测试</p><h3 id="二、前端实现"><a href="#二、前端实现" class="headerlink" title="二、前端实现"></a>二、前端实现</h3><p>1、定义api</p><p>2、组件模板</p><p>3、组件js</p><h2 id="3、课程分类多级联动的实现"><a href="#3、课程分类多级联动的实现" class="headerlink" title="3、课程分类多级联动的实现"></a>3、课程分类多级联动的实现</h2><h3 id="一、需求-1"><a href="#一、需求-1" class="headerlink" title="一、需求"></a>一、需求</h3><h3 id="二、获取一级分类"><a href="#二、获取一级分类" class="headerlink" title="二、获取一级分类"></a>二、获取一级分类</h3><p>1、组件数据定义</p><p>定义在data中</p><p>2、组件模板</p><p>3、组件脚本</p><h3 id="三、级联显示二级分类"><a href="#三、级联显示二级分类" class="headerlink" title="三、级联显示二级分类"></a>三、级联显示二级分类</h3><p>1、组件模板</p><p>2、注册change事件</p><p>在一级分类的<el-select>组件中注册change事件</p><p>3、定义change事件方法</p><h2 id="4、讲师下拉列表"><a href="#4、讲师下拉列表" class="headerlink" title="4、讲师下拉列表"></a>4、讲师下拉列表</h2><h3 id="一、前端实现-1"><a href="#一、前端实现-1" class="headerlink" title="一、前端实现"></a>一、前端实现</h3><p>1、组件模板</p><p>2、定义api</p><p>api&#x2F;edu&#x2F;teacher.js</p><p>组件中引入teacher api</p><p>3、组件脚本</p><p>定义data</p><p>表单初始化时获取讲师列表</p><h2 id="5、富文本编辑器Tinymce"><a href="#5、富文本编辑器Tinymce" class="headerlink" title="5、富文本编辑器Tinymce"></a>5、富文本编辑器Tinymce</h2><h3 id="一、Tinymce可视化编辑器"><a href="#一、Tinymce可视化编辑器" class="headerlink" title="一、Tinymce可视化编辑器"></a>一、Tinymce可视化编辑器</h3><p>参考</p><p><a href="https://panjiachen.gitee.io/vue-element-admin/#/components/tinymce">https://panjiachen.gitee.io/vue-element-admin/#/components/tinymce</a></p><p><a href="https://panjiachen.gitee.io/vue-element-admin/#/example/create">https://panjiachen.gitee.io/vue-element-admin/#/example/create</a></p><h3 id="二、组件初始化"><a href="#二、组件初始化" class="headerlink" title="二、组件初始化"></a>二、组件初始化</h3><p>Tinymce是一个传统javascript插件，默认不能用于Vue.js因此需要做一些特殊的整合步骤</p><p>1、复制脚本库</p><p>将脚本库复制到项目的static目录下（在vue-element-admin-master的static路径下）</p><p>2、配置html变量</p><p>在 edu-admin&#x2F;build&#x2F;webpack.dev.conf.js 中添加配置</p><p>使在html页面中可是使用这里定义的BASE_URL变量</p><p>3、引入js脚本</p><p>在edu-admin&#x2F;index.html 中引入js脚本</p><script src=<%= BASE_URL %>/tinymce4.7.5/tinymce.min.js></script><script src=<%= BASE_URL %>/tinymce4.7.5/langs/zh_CN.js></script><h3 id="三、组件引入"><a href="#三、组件引入" class="headerlink" title="三、组件引入"></a>三、组件引入</h3><p>为了让Tinymce能用于Vue.js项目，vue-element-admin-master对Tinymce进行了封装，下面我们将它引入到我们的课程信息页面</p><p>1、复制组件</p><p>src&#x2F;components&#x2F;Tinymce</p><p>2、引入组件</p><p>课程信息组件中引入 Tinymce</p><p>import Tinymce from ‘@&#x2F;components&#x2F;Tinymce’</p><p>export default {</p><p>  components: { Tinymce },</p><p>  ……</p><p>}</p><p>3、组件模板</p><!-- 课程简介--><el-form-item label="课程简介"><pre><code class="hljs">&lt;tinymce :height=&quot;300&quot; v-model=&quot;courseInfo.description&quot;/&gt;</code></pre></el-form-item><p>4、组件样式</p><p>在info.vue文件的最后添加如下代码，调整上传图片按钮的高度</p><style scoped>.tinymce-container {  line-height: 29px;}</style><p>5、图片的base64编码</p><p>Tinymce中的图片上传功能直接存储的是图片的base64编码，因此无需图片服务器</p><h2 id="6、课程封面"><a href="#6、课程封面" class="headerlink" title="6、课程封面"></a>6、课程封面</h2><h3 id="一、整合上传组件"><a href="#一、整合上传组件" class="headerlink" title="一、整合上传组件"></a>一、整合上传组件</h3><p>参考 <a href="http://element-cn.eleme.io/#/zh-CN/component/upload">http://element-cn.eleme.io/#/zh-CN/component/upload</a> 用户头像上传</p><p>1、上传默认封面</p><p>创建文件夹cover，上传默认的课程封面</p><p>2、定义默认封面</p><p>3、定义data数据</p><p>BASE_API: process.env.BASE_API &#x2F;&#x2F; 接口API地址</p><p>4、组件模板</p><p>在info.vue中添加上传组件模板</p><p>5、结果回调</p><h3 id="二、修改后端api"><a href="#二、修改后端api" class="headerlink" title="二、修改后端api"></a>二、修改后端api</h3><p>1、修改上传controller</p><p>添加host可选参数</p><p>2、综合测试</p><h2 id="7、课程信息回显"><a href="#7、课程信息回显" class="headerlink" title="7、课程信息回显"></a>7、课程信息回显</h2><h3 id="一、后端实现"><a href="#一、后端实现" class="headerlink" title="一、后端实现"></a>一、后端实现</h3><p>1、业务层</p><p>接口：CourseService.java</p><p>CourseInfoForm getCourseInfoFormById(String id);</p><p>实现：CourseServiceImpl.java</p><p>2、web层</p><p>3、Swagger中测试</p><h3 id="二、前端实现-1"><a href="#二、前端实现-1" class="headerlink" title="二、前端实现"></a>二、前端实现</h3><p>1、定义api</p><p>api&#x2F;edu&#x2F;course.js</p><p>2、组件js</p><h3 id="三、解决级联下拉菜单回显问题"><a href="#三、解决级联下拉菜单回显问题" class="headerlink" title="三、解决级联下拉菜单回显问题"></a>三、解决级联下拉菜单回显问题</h3><p>1、数据库中增加冗余列</p><p>2、pojo中增加属性</p><p>entity.Course.java</p><p>form.CourseInfo.java</p><p>3、vue组件中绑定数据</p><p>edu&#x2F;course&#x2F;infoinfo.vue</p><p>4、修改init方法</p><p>5、修改fetchCourseInfoById方法</p><h2 id="8、更新课程信息"><a href="#8、更新课程信息" class="headerlink" title="8、更新课程信息"></a>8、更新课程信息</h2><h3 id="一、后端实现-1"><a href="#一、后端实现-1" class="headerlink" title="一、后端实现"></a>一、后端实现</h3><p>1、业务层</p><p>接口：CourseService.java</p><p>实现：CourseServiceImpl.java</p><p>2、web层</p><h3 id="二、前端实现-2"><a href="#二、前端实现-2" class="headerlink" title="二、前端实现"></a>二、前端实现</h3><p>1、定义api</p><p>course.js</p><p>2、组件js</p><p>info.vue</p><h1 id="day08"><a href="#day08" class="headerlink" title="day08"></a>day08</h1><h2 id="1、课程大纲列表显示"><a href="#1、课程大纲列表显示" class="headerlink" title="1、课程大纲列表显示"></a>1、课程大纲列表显示</h2><h3 id="一、后端实现-2"><a href="#一、后端实现-2" class="headerlink" title="一、后端实现"></a>一、后端实现</h3><p>1、定义vo</p><p>ChapterVo</p><p>2、服务层</p><p>3、web层</p><h3 id="二、前端实现-3"><a href="#二、前端实现-3" class="headerlink" title="二、前端实现"></a>二、前端实现</h3><p>1、定义api</p><p>2、定义组件脚本</p><p>3、定义组件模板</p><p>4、定义样式</p><h2 id="2、章节管理后端接口开发"><a href="#2、章节管理后端接口开发" class="headerlink" title="2、章节管理后端接口开发"></a>2、章节管理后端接口开发</h2><h3 id="一、新增章节"><a href="#一、新增章节" class="headerlink" title="一、新增章节"></a>一、新增章节</h3><p>web层</p><h3 id="二、根据id查询"><a href="#二、根据id查询" class="headerlink" title="二、根据id查询"></a>二、根据id查询</h3><p>web层</p><h3 id="三、更新"><a href="#三、更新" class="headerlink" title="三、更新"></a>三、更新</h3><p>web层</p><h3 id="四、删除"><a href="#四、删除" class="headerlink" title="四、删除"></a>四、删除</h3><p>1、web层</p><p>2、Service</p><h2 id="3、章节管理前端页面实现"><a href="#3、章节管理前端页面实现" class="headerlink" title="3、章节管理前端页面实现"></a>3、章节管理前端页面实现</h2><h3 id="一、定义api"><a href="#一、定义api" class="headerlink" title="一、定义api"></a>一、定义api</h3><h3 id="二、新增章节页面功能"><a href="#二、新增章节页面功能" class="headerlink" title="二、新增章节页面功能"></a>二、新增章节页面功能</h3><p>1、定义data数据</p><p>2、添加章节按钮</p><p>3、章节表单dialog</p><p>4、添加章节methods</p><h3 id="三、修改章节信息"><a href="#三、修改章节信息" class="headerlink" title="三、修改章节信息"></a>三、修改章节信息</h3><p>1、编辑章节按钮</p><p>2、定义编辑方法</p><p>3、定义更新方法</p><h3 id="四、删除章节"><a href="#四、删除章节" class="headerlink" title="四、删除章节"></a>四、删除章节</h3><p>1、按钮</p><p>2、定义删除方法</p><h2 id="1、课时管理后端开发"><a href="#1、课时管理后端开发" class="headerlink" title="1、课时管理后端开发"></a>1、课时管理后端开发</h2><h2 id="2、课时管理前端开发"><a href="#2、课时管理前端开发" class="headerlink" title="2、课时管理前端开发"></a>2、课时管理前端开发</h2><h2 id="1、课程最终发布前端"><a href="#1、课程最终发布前端" class="headerlink" title="1、课程最终发布前端"></a>1、课程最终发布前端</h2><h2 id="2、课程最终发布后端"><a href="#2、课程最终发布后端" class="headerlink" title="2、课程最终发布后端"></a>2、课程最终发布后端</h2><h1 id="day09"><a href="#day09" class="headerlink" title="day09"></a>day09</h1><h2 id="1、课程列表和课程删除"><a href="#1、课程列表和课程删除" class="headerlink" title="1、课程列表和课程删除"></a>1、课程列表和课程删除</h2><h3 id="一、后端实现-3"><a href="#一、后端实现-3" class="headerlink" title="一、后端实现"></a>一、后端实现</h3><p>1、定义搜索对象</p><p>CourseQuery</p><p>2、定义service方法</p><p>3、定义web层方法</p><h3 id="二、前端分页查询列表"><a href="#二、前端分页查询列表" class="headerlink" title="二、前端分页查询列表"></a>二、前端分页查询列表</h3><p>1、定义api</p><p>course.js</p><p>2、组件中的js</p><p>src&#x2F;views&#x2F;edu&#x2F;list.vue</p><p>3、组件模板</p><p>4、css的定义</p><h3 id="三、后端实现"><a href="#三、后端实现" class="headerlink" title="三、后端实现"></a>三、后端实现</h3><p>1、web层</p><p>定义删除api方法：CourseController.java</p><p>2、service层</p><p>如果用户确定删除，则首先删除video记录，然后删除chapter记录，最后删除Course记录</p><p>2.1、在VideoService中定义根据courseId删除video业务方法</p><p>2.2、在ChapterService中定义根据courseId删除chapter业务方法</p><p>2.3、删除当前course记录</p><h3 id="四、前端实现"><a href="#四、前端实现" class="headerlink" title="四、前端实现"></a>四、前端实现</h3><p>1、定义api</p><p>course.js中添加删除方法</p><p>2、修改删除按钮</p><p>3、编写删除方法</p><h2 id="2、阿里云视频点播"><a href="#2、阿里云视频点播" class="headerlink" title="2、阿里云视频点播"></a>2、阿里云视频点播</h2><h2 id="3、整合阿里云视频点播"><a href="#3、整合阿里云视频点播" class="headerlink" title="3、整合阿里云视频点播"></a>3、整合阿里云视频点播</h2>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h1><h3 id="1、什么是MVC"><a href="#1、什么是MVC" class="headerlink" title="1、什么是MVC"></a>1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程：<br>用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器</p><h3 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h3><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台servlet</p></blockquote><h3 id="3、SpringMVC的特点"><a href="#3、SpringMVC的特点" class="headerlink" title="3、SpringMVC的特点"></a>3、SpringMVC的特点</h3><ul><li><strong>Spring 家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一处理</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="二、HelloWorld"><a href="#二、HelloWorld" class="headerlink" title="二、HelloWorld"></a>二、HelloWorld</h1><h3 id="1、开发环境"><a href="#1、开发环境" class="headerlink" title="1、开发环境"></a>1、开发环境</h3><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat7</p><p>Spring版本：5.3.1</p><h3 id="2、创建maven工程"><a href="#2、创建maven工程" class="headerlink" title="2、创建maven工程"></a>2、创建maven工程</h3><h5 id="a-添加web模块"><a href="#a-添加web模块" class="headerlink" title="a&gt;添加web模块"></a>a&gt;添加web模块</h5><h5 id="b-打包方式：war"><a href="#b-打包方式：war" class="headerlink" title="b&gt;打包方式：war"></a>b&gt;打包方式：war</h5><h5 id="c-引入依赖"><a href="#c-引入依赖" class="headerlink" title="c&gt;引入依赖"></a>c&gt;引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- SpringMVC --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- ServletAPI --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠传递性导入。</p><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-0.png"></p><h3 id="3、配置web-xml"><a href="#3、配置web-xml" class="headerlink" title="3、配置web.xml"></a>3、配置web.xml</h3><p>注册SpringMVC的前端控制器DispatcherServlet</p><h5 id="a-默认配置方式"><a href="#a-默认配置方式" class="headerlink" title="a&gt;默认配置方式"></a>a&gt;默认配置方式</h5><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name>-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-扩展配置方式"><a href="#b-扩展配置方式" class="headerlink" title="b&gt;扩展配置方式"></a>b&gt;扩展配置方式</h5><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment"> 作为框架的核心组件，在启动过程中有大量的初始化操作要做</span><br><span class="hljs-comment">而这些操作放在第一次请求时才执行会严重影响访问速度</span><br><span class="hljs-comment">因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span><br><span class="hljs-comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span><br><span class="hljs-comment">        但是/不能匹配.jsp请求路径的请求</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p><url-pattern>标签中使用&#x2F;和&#x2F;*的区别：</p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写法</p></blockquote><h3 id="4、创建请求控制器"><a href="#4、创建请求控制器" class="headerlink" title="4、创建请求控制器"></a>4、创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、创建springMVC的配置文件"><a href="#5、创建springMVC的配置文件" class="headerlink" title="5、创建springMVC的配置文件"></a>5、创建springMVC的配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 自动扫描包 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;order&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateEngine&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateResolver&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图前缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span><br>    <br>                    <span class="hljs-comment">&lt;!-- 视图后缀 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.html&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;templateMode&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;HTML5&quot;</span>/&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;characterEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">   处理静态资源，例如html、js、css、jpg</span><br><span class="hljs-comment">  若只设置该标签，则只能访问静态资源，其他请求则无法访问</span><br><span class="hljs-comment">  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;defaultCharset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;supportedMediaTypes&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>text/html<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>application/json<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6、测试HelloWorld"><a href="#6、测试HelloWorld" class="headerlink" title="6、测试HelloWorld"></a>6、测试HelloWorld</h3><h5 id="a-实现对首页的访问"><a href="#a-实现对首页的访问" class="headerlink" title="a&gt;实现对首页的访问"></a>a&gt;实现对首页的访问</h5><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span><br><span class="hljs-comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span><br><span class="hljs-comment">// localhost:8080/springMVC/</span><br><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//设置视图名称</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-通过超链接跳转到指定页面"><a href="#b-通过超链接跳转到指定页面" class="headerlink" title="b&gt;通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h5><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">HelloWorld</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;target&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="三、-RequestMapping注解"><a href="#三、-RequestMapping注解" class="headerlink" title="三、@RequestMapping注解"></a>三、@RequestMapping注解</h1><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestMappingController</span> &#123;<br><br><span class="hljs-comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/test&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span><br><span class="hljs-meta">        method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;<a href="/GetMapping">@GetMapping </a> </p><p>处理post请求的映射–&gt;<a href="/PostMapping">@PostMapping </a> </p><p>处理put请求的映射–&gt;<a href="/PutMapping">@PutMapping </a> </p><p>处理delete请求的映射–&gt;<a href="/DeleteMapping">@DeleteMapping </a> </p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的params属性--&gt;/test<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(</span><br><span class="hljs-meta">        value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span><br><span class="hljs-meta">        ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span><br><span class="hljs-meta">        ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestMapping</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用<strong>时，只能使用&#x2F;</strong>&#x2F;xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;deleteUser&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRest</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;id:&quot;</span>+id+<span class="hljs-string">&quot;,username:&quot;</span>+username);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终输出的内容为--&gt;id:1,username:admin</span><br></code></pre></td></tr></table></figure><h1 id="四、SpringMVC获取请求参数"><a href="#四、SpringMVC获取请求参数" class="headerlink" title="四、SpringMVC获取请求参数"></a>四、SpringMVC获取请求参数</h1><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--&gt;/testParam<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam "></a>3、<a href="/RequestParam">@RequestParam </a></h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="4、-RequestHeader"><a href="#4、-RequestHeader" class="headerlink" title="4、@RequestHeader "></a>4、<a href="/RequestHeader">@RequestHeader </a></h3><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同<a href="/RequestParam">@RequestParam </a> </p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue "></a>5、<a href="/CookieValue">@CookieValue </a></h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同<a href="/RequestParam">@RequestParam </a> </p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    性别：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    邮箱：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testpojo&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPOJO</span><span class="hljs-params">(User user)</span>&#123;<br>    System.out.println(user);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br><span class="hljs-comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;, email=&#x27;123@qq.com&#x27;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="五、域对象共享数据"><a href="#五、域对象共享数据" class="headerlink" title="五、域对象共享数据"></a>五、域对象共享数据</h1><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testServletAPI&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testServletAPI</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,servletAPI&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelAndView&quot;)</span><br><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">testModelAndView</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ModelAndView有Model和View的功能</span><br><span class="hljs-comment">     * Model主要用于向请求域共享数据</span><br><span class="hljs-comment">     * View主要用于设置视图，实现页面跳转</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mav</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>    <span class="hljs-comment">//向请求域共享数据</span><br>    mav.addObject(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelAndView&quot;</span>);<br>    <span class="hljs-comment">//设置视图，实现页面跳转</span><br>    mav.setViewName(<span class="hljs-string">&quot;success&quot;</span>);<br>    <span class="hljs-keyword">return</span> mav;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModel&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModel</span><span class="hljs-params">(Model model)</span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Model&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>&#123;<br>    map.put(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,Map&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testModelMap&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testModelMap</span><span class="hljs-params">(ModelMap modelMap)</span>&#123;<br>    modelMap.addAttribute(<span class="hljs-string">&quot;testScope&quot;</span>, <span class="hljs-string">&quot;hello,ModelMap&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">public interface Model&#123;&#125;<br>public class ModelMap extends LinkedHashMap&lt;String, Object&gt; &#123;&#125;<br>public class ExtendedModelMap extends ModelMap implements Model &#123;&#125;<br>public class BindingAwareModelMap extends ExtendedModelMap &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testSession&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testSession</span><span class="hljs-params">(HttpSession session)</span>&#123;<br>    session.setAttribute(<span class="hljs-string">&quot;testSessionScope&quot;</span>, <span class="hljs-string">&quot;hello,session&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testApplication&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testApplication</span><span class="hljs-params">(HttpSession session)</span>&#123;<br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">application</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    application.setAttribute(<span class="hljs-string">&quot;testApplicationScope&quot;</span>, <span class="hljs-string">&quot;hello,application&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="六、SpringMVC的视图"><a href="#六、SpringMVC的视图" class="headerlink" title="六、SpringMVC的视图"></a>六、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testHello&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testHello</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-1.png"></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testForward&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testForward</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-2.png"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRedirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRedirect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/testHello&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-3.png"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">path：设置处理的请求地址</span><br><span class="hljs-comment">view-name：设置请求地址所对应的视图名称</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testView&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;success&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote><h1 id="七、RESTful"><a href="#七、RESTful" class="headerlink" title="七、RESTful"></a>七、RESTful</h1><h3 id="1、RESTful简介"><a href="#1、RESTful简介" class="headerlink" title="1、RESTful简介"></a>1、RESTful简介</h3><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h5 id="a-资源"><a href="#a-资源" class="headerlink" title="a&gt;资源"></a>a&gt;资源</h5><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h5 id="b-资源的表述"><a href="#b-资源的表述" class="headerlink" title="b&gt;资源的表述"></a>b&gt;资源的表述</h5><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h5 id="c-状态转移"><a href="#c-状态转移" class="headerlink" title="c&gt;状态转移"></a>c&gt;状态转移</h5><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资源的表述，来间接实现操作资源的目的。</p><h3 id="2、RESTful的实现"><a href="#2、RESTful的实现" class="headerlink" title="2、RESTful的实现"></a>2、RESTful的实现</h3><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th>操作</th><th>传统方式</th><th>REST风格</th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h3 id="3、HiddenHttpMethodFilter"><a href="#3、HiddenHttpMethodFilter" class="headerlink" title="3、HiddenHttpMethodFilter"></a>3、HiddenHttpMethodFilter</h3><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将 POST 请求转换为 DELETE 或 PUT 请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字符集的 </li><li>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作 </li><li>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作： </li><li></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">String paramValue = request.getParameter(this.methodParam);<br></code></pre></td></tr></table></figure><blockquote></blockquote><h1 id="八、RESTful案例"><a href="#八、RESTful案例" class="headerlink" title="八、RESTful案例"></a>八、RESTful案例</h1><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p><ul><li>搭建环境 </li><li>准备实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mvc.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br><br>   <span class="hljs-keyword">private</span> Integer id;<br>   <span class="hljs-keyword">private</span> String lastName;<br><br>   <span class="hljs-keyword">private</span> String email;<br>   <span class="hljs-comment">//1 male, 0 female</span><br>   <span class="hljs-keyword">private</span> Integer gender;<br>   <br>   <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> id;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.id = id;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> lastName;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLastName</span><span class="hljs-params">(String lastName)</span> &#123;<br>      <span class="hljs-built_in">this</span>.lastName = lastName;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> email;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>      <span class="hljs-built_in">this</span>.email = email;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> gender;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(Integer gender)</span> &#123;<br>      <span class="hljs-built_in">this</span>.gender = gender;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(Integer id, String lastName, String email, Integer gender)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.id = id;<br>      <span class="hljs-built_in">this</span>.lastName = lastName;<br>      <span class="hljs-built_in">this</span>.email = email;<br>      <span class="hljs-built_in">this</span>.gender = gender;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>准备dao模拟数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.mvc.dao;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">import</span> com.atguigu.mvc.bean.Employee;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EmployeeDao</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="hljs-literal">null</span>;<br>   <br>   <span class="hljs-keyword">static</span>&#123;<br>      employees = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer, Employee&gt;();<br><br>      employees.put(<span class="hljs-number">1001</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1001</span>, <span class="hljs-string">&quot;E-AA&quot;</span>, <span class="hljs-string">&quot;aa@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>      employees.put(<span class="hljs-number">1002</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1002</span>, <span class="hljs-string">&quot;E-BB&quot;</span>, <span class="hljs-string">&quot;bb@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>      employees.put(<span class="hljs-number">1003</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1003</span>, <span class="hljs-string">&quot;E-CC&quot;</span>, <span class="hljs-string">&quot;cc@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>      employees.put(<span class="hljs-number">1004</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1004</span>, <span class="hljs-string">&quot;E-DD&quot;</span>, <span class="hljs-string">&quot;dd@163.com&quot;</span>, <span class="hljs-number">0</span>));<br>      employees.put(<span class="hljs-number">1005</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-number">1005</span>, <span class="hljs-string">&quot;E-EE&quot;</span>, <span class="hljs-string">&quot;ee@163.com&quot;</span>, <span class="hljs-number">1</span>));<br>   &#125;<br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">initId</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006</span>;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Employee employee)</span>&#123;<br>      <span class="hljs-keyword">if</span>(employee.getId() == <span class="hljs-literal">null</span>)&#123;<br>         employee.setId(initId++);<br>      &#125;<br>      employees.put(employee.getId(), employee);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> Collection&lt;Employee&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;<br>      <span class="hljs-keyword">return</span> employees.values();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> Employee <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span>&#123;<br>      <span class="hljs-keyword">return</span> employees.get(id);<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>&#123;<br>      employees.remove(id);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>&#x2F;</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>&#x2F;employee</td><td>GET</td></tr><tr><td>删除√</td><td>&#x2F;employee&#x2F;2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>&#x2F;toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>&#x2F;employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>&#x2F;employee&#x2F;2</td><td>GET</td></tr><tr><td>执行更新√</td><td>&#x2F;employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-配置view-controller"><a href="#a-配置view-controller" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;index&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-创建页面"><a href="#b-创建页面" class="headerlink" title="b&gt;创建页面"></a>b&gt;创建页面</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-控制器方法"><a href="#a-控制器方法" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeList</span><span class="hljs-params">(Model model)</span>&#123;<br>    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();<br>    model.addAttribute(<span class="hljs-string">&quot;employeeList&quot;</span>, employeeList);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_list&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-创建employee-list-html"><a href="#b-创建employee-list-html" class="headerlink" title="b&gt;创建employee_list.html"></a>b&gt;创建employee_list.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataTable&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>id<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>lastName<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>email<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>gender<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>options(<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-创建处理delete请求方式的表单"><a href="#a-创建处理delete请求方式的表单" class="headerlink" title="a&gt;创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delete_form&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;delete&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-删除超链接绑定点击事件"><a href="#b-删除超链接绑定点击事件" class="headerlink" title="b&gt;删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;deleteA&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteEmployee&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#dataTable&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//event表示当前事件</span></span><br><span class="language-javascript">            <span class="hljs-attr">deleteEmployee</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//通过id获取表单标签</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> delete_form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;delete_form&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-property">action</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">//提交表单</span></span><br><span class="language-javascript">                delete_form.<span class="hljs-title function_">submit</span>();</span><br><span class="language-javascript">                <span class="hljs-comment">//阻止超链接的默认跳转行为</span></span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="c-控制器方法"><a href="#c-控制器方法" class="headerlink" title="c&gt;控制器方法"></a>c&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">deleteEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;<br>    employeeDao.delete(id);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-配置view-controller-1"><a href="#a-配置view-controller-1" class="headerlink" title="a&gt;配置view-controller"></a>a&gt;配置view-controller</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:view-controller</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/toAdd&quot;</span> <span class="hljs-attr">view-name</span>=<span class="hljs-string">&quot;employee_add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:view-controller</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-创建employee-add-html"><a href="#b-创建employee-add-html" class="headerlink" title="b&gt;创建employee_add.html"></a>b&gt;创建employee_add.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Add Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-控制器方法-1"><a href="#a-控制器方法-1" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">addEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-修改超链接"><a href="#a-修改超链接" class="headerlink" title="a&gt;修改超链接"></a>a&gt;修改超链接</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="b-控制器方法"><a href="#b-控制器方法" class="headerlink" title="b&gt;控制器方法"></a>b&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmployeeById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> employeeDao.get(id);<br>    model.addAttribute(<span class="hljs-string">&quot;employee&quot;</span>, employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;employee_update&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-创建employee-update-html"><a href="#c-创建employee-update-html" class="headerlink" title="c&gt;创建employee_update.html"></a>c&gt;创建employee_update.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Update Employee<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/employee&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;put&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><br>    lastName:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    email:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span><br><span class="hljs-comment">        若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span><br><span class="hljs-comment">    --&gt;</span><br>    gender:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">th:field</span>=<span class="hljs-string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-控制器方法-2"><a href="#a-控制器方法-2" class="headerlink" title="a&gt;控制器方法"></a>a&gt;控制器方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateEmployee</span><span class="hljs-params">(Employee employee)</span>&#123;<br>    employeeDao.save(employee);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/employee&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八、HttpMessageConverter"><a href="#八、HttpMessageConverter" class="headerlink" title="八、HttpMessageConverter"></a>八、HttpMessageConverter</h1><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody "></a>1、<a href="/RequestBody">@RequestBody </a></h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">th:action</span>=<span class="hljs-string">&quot;@&#123;/testRequestBody&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestBody&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestBody</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String requestBody)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestBody);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testRequestEntity&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRequestEntity</span><span class="hljs-params">(RequestEntity&lt;String&gt; requestEntity)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;requestHeader:&quot;</span>+requestEntity.getHeaders());<br>    System.out.println(<span class="hljs-string">&quot;requestBody:&quot;</span>+requestEntity.getBody());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age&#x3D;0”, sec-ch-ua:”” Not A;Brand”;v&#x3D;”99”, “Chromium”;v&#x3D;”90”, “Google Chrome”;v&#x3D;”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080/">http://localhost:8080</a>“, user-agent:”Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;90.0.4430.93 Safari&#x2F;537.36”]<br>requestBody:username&#x3D;admin&amp;password&#x3D;123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody "></a>3、<a href="/ResponseBody">@ResponseBody </a></h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseBody&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testResponseBody</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.12.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;mvc:annotation-driven /&gt;<br></code></pre></td></tr></table></figure><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testResponseUser&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">testResponseUser</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1001</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/testAjax&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;testAjax&quot;</span>&gt;</span>testAjax<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;通过vue和axios处理点击事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;/static/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> vue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#app&quot;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">testAjax</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">axios</span>(&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">url</span>:event.<span class="hljs-property">target</span>.<span class="hljs-property">href</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">params</span>:&#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;admin&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123456&quot;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">data</span>);</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">                event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testAjax&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testAjax</span><span class="hljs-params">(String username, String password)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;username:&quot;</span>+username+<span class="hljs-string">&quot;,password:&quot;</span>+password);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello,ajax&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h1 id="九、文件上传和下载"><a href="#九、文件上传和下载" class="headerlink" title="九、文件上传和下载"></a>九、文件上传和下载</h1><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testDown&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取ServletContext对象</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-comment">//获取服务器中文件的真实路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;/static/img/1.jpg&quot;</span>);<br>    <span class="hljs-comment">//创建输入流</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(realPath);<br>    <span class="hljs-comment">//创建字节数组</span><br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[is.available()];<br>    <span class="hljs-comment">//将流读到字节数组中</span><br>    is.read(bytes);<br>    <span class="hljs-comment">//创建HttpHeaders对象设置响应头信息</span><br>    MultiValueMap&lt;String, String&gt; headers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    <span class="hljs-comment">//设置要下载方式以及下载文件的名字</span><br>    headers.add(<span class="hljs-string">&quot;Content-Disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=1.jpg&quot;</span>);<br>    <span class="hljs-comment">//设置响应状态码</span><br>    <span class="hljs-type">HttpStatus</span> <span class="hljs-variable">statusCode</span> <span class="hljs-operator">=</span> HttpStatus.OK;<br>    <span class="hljs-comment">//创建ResponseEntity对象</span><br>    ResponseEntity&lt;<span class="hljs-type">byte</span>[]&gt; responseEntity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(bytes, headers, statusCode);<br>    <span class="hljs-comment">//关闭输入流</span><br>    is.close();<br>    <span class="hljs-keyword">return</span> responseEntity;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>b&gt;在SpringMVC的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;multipartResolver&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>c&gt;控制器方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/testUp&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUp</span><span class="hljs-params">(MultipartFile photo, HttpSession session)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//获取上传的文件的文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> photo.getOriginalFilename();<br>    <span class="hljs-comment">//处理文件重名问题</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">hzName</span> <span class="hljs-operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>    fileName = UUID.randomUUID().toString() + hzName;<br>    <span class="hljs-comment">//获取服务器中photo目录的路径</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> session.getServletContext();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">photoPath</span> <span class="hljs-operator">=</span> servletContext.getRealPath(<span class="hljs-string">&quot;photo&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(photoPath);<br>    <span class="hljs-keyword">if</span>(!file.exists())&#123;<br>        file.mkdir();<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> photoPath + File.separator + fileName;<br>    <span class="hljs-comment">//实现上传功能</span><br>    photo.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalPath));<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:exclude-mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/testRequestEntity&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ref</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h1 id="十一、异常处理器"><a href="#十一、异常处理器" class="headerlink" title="十一、异常处理器"></a>十一、异常处理器</h1><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionMappings&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        properties的键表示处理器方法执行过程中出现的异常</span><br><span class="hljs-comment">        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span><br><span class="hljs-comment">        --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;exceptionAttribute&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@ControllerAdvice将当前类标识为异常处理的组件</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionController</span> &#123;<br><br>    <span class="hljs-comment">//@ExceptionHandler用于设置所标识方法处理的异常</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-comment">//ex表示当前请求处理中出现的异常对象</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleArithmeticException</span><span class="hljs-params">(Exception ex, Model model)</span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;ex&quot;</span>, ex);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;error&quot;</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebInit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定spring的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SpringConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定SpringMVC的配置类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WebConfig.class&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String[] getServletMappings() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/&quot;</span>&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Filter[] getServletFilters() &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">encodingFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterEncodingFilter</span>();<br>        encodingFilter.setEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        encodingFilter.setForceRequestEncoding(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">HiddenHttpMethodFilter</span> <span class="hljs-variable">hiddenHttpMethodFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HiddenHttpMethodFilter</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringConfig</span> &#123;<br><span class="hljs-comment">//ssm整合之后，spring的配置信息写在此类中</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//扫描组件</span><br><span class="hljs-meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span><br><span class="hljs-comment">//开启MVC注解驱动</span><br><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">//使用默认的servlet处理静态资源</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureDefaultServletHandling</span><span class="hljs-params">(DefaultServletHandlerConfigurer configurer)</span> &#123;<br>        configurer.enable();<br>    &#125;<br><br>    <span class="hljs-comment">//配置文件上传解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CommonsMultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsMultipartResolver</span>();<br>    &#125;<br><br>    <span class="hljs-comment">//配置拦截器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-type">FirstInterceptor</span> <span class="hljs-variable">firstInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirstInterceptor</span>();<br>        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//配置视图控制</span><br>    <br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span><br><span class="hljs-comment">        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <br>    <span class="hljs-comment">//配置异常映射</span><br>    <span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span><br><span class="hljs-comment">        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span><br><span class="hljs-comment">        Properties prop = new Properties();</span><br><span class="hljs-comment">        prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span><br><span class="hljs-comment">        //设置异常映射</span><br><span class="hljs-comment">        exceptionResolver.setExceptionMappings(prop);</span><br><span class="hljs-comment">        //设置共享异常信息的键</span><br><span class="hljs-comment">        exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span><br><span class="hljs-comment">        resolvers.add(exceptionResolver);</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">//配置生成模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ITemplateResolver <span class="hljs-title function_">templateResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">webApplicationContext</span> <span class="hljs-operator">=</span> ContextLoader.getCurrentWebApplicationContext();<br>        <span class="hljs-comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span><br>        <span class="hljs-type">ServletContextTemplateResolver</span> <span class="hljs-variable">templateResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextTemplateResolver</span>(<br>                webApplicationContext.getServletContext());<br>        templateResolver.setPrefix(<span class="hljs-string">&quot;/WEB-INF/templates/&quot;</span>);<br>        templateResolver.setSuffix(<span class="hljs-string">&quot;.html&quot;</span>);<br>        templateResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        templateResolver.setTemplateMode(TemplateMode.HTML);<br>        <span class="hljs-keyword">return</span> templateResolver;<br>    &#125;<br><br>    <span class="hljs-comment">//生成模板引擎并为模板引擎注入模板解析器</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SpringTemplateEngine <span class="hljs-title function_">templateEngine</span><span class="hljs-params">(ITemplateResolver templateResolver)</span> &#123;<br>        <span class="hljs-type">SpringTemplateEngine</span> <span class="hljs-variable">templateEngine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringTemplateEngine</span>();<br>        templateEngine.setTemplateResolver(templateResolver);<br>        <span class="hljs-keyword">return</span> templateEngine;<br>    &#125;<br><br>    <span class="hljs-comment">//生成视图解析器并未解析器注入模板引擎</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ViewResolver <span class="hljs-title function_">viewResolver</span><span class="hljs-params">(SpringTemplateEngine templateEngine)</span> &#123;<br>        <span class="hljs-type">ThymeleafViewResolver</span> <span class="hljs-variable">viewResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThymeleafViewResolver</span>();<br>        viewResolver.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        viewResolver.setTemplateEngine(templateEngine);<br>        <span class="hljs-keyword">return</span> viewResolver;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十三、SpringMVC执行流程"><a href="#十三、SpringMVC执行流程" class="headerlink" title="十三、SpringMVC执行流程"></a>十三、SpringMVC执行流程</h1><h3 id="1、SpringMVC常用组件"><a href="#1、SpringMVC常用组件" class="headerlink" title="1、SpringMVC常用组件"></a>1、SpringMVC常用组件</h3><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h3 id="2、DispatcherServlet初始化过程"><a href="#2、DispatcherServlet初始化过程" class="headerlink" title="2、DispatcherServlet初始化过程"></a>2、DispatcherServlet初始化过程</h3><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</p><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-4.png"></p><h5 id="a-初始化WebApplicationContext"><a href="#a-初始化WebApplicationContext" class="headerlink" title="a&gt;初始化WebApplicationContext"></a>a&gt;初始化WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">initWebApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">rootContext</span> <span class="hljs-operator">=</span><br>        WebApplicationContextUtils.getWebApplicationContext(getServletContext());<br>    <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.webApplicationContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// A context instance was injected at construction time -&gt; use it</span><br>        wac = <span class="hljs-built_in">this</span>.webApplicationContext;<br>        <span class="hljs-keyword">if</span> (wac <span class="hljs-keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;<br>            <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">cwac</span> <span class="hljs-operator">=</span> (ConfigurableWebApplicationContext) wac;<br>            <span class="hljs-keyword">if</span> (!cwac.isActive()) &#123;<br>                <span class="hljs-comment">// The context has not yet been refreshed -&gt; provide services such as</span><br>                <span class="hljs-comment">// setting the parent context, setting the application context id, etc</span><br>                <span class="hljs-keyword">if</span> (cwac.getParent() == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// The context instance was injected without an explicit parent -&gt; set</span><br>                    <span class="hljs-comment">// the root application context (if any; may be null) as the parent</span><br>                    cwac.setParent(rootContext);<br>                &#125;<br>                configureAndRefreshWebApplicationContext(cwac);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance was injected at construction time -&gt; see if one</span><br>        <span class="hljs-comment">// has been registered in the servlet context. If one exists, it is assumed</span><br>        <span class="hljs-comment">// that the parent context (if any) has already been set and that the</span><br>        <span class="hljs-comment">// user has performed any initialization such as setting the context id</span><br>        wac = findWebApplicationContext();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (wac == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// No context instance is defined for this servlet -&gt; create a local one</span><br>        <span class="hljs-comment">// 创建WebApplicationContext</span><br>        wac = createWebApplicationContext(rootContext);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.refreshEventReceived) &#123;<br>        <span class="hljs-comment">// Either the context is not a ConfigurableApplicationContext with refresh</span><br>        <span class="hljs-comment">// support or the context injected at construction time had already been</span><br>        <span class="hljs-comment">// refreshed -&gt; trigger initial onRefresh manually here.</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.onRefreshMonitor) &#123;<br>            <span class="hljs-comment">// 刷新WebApplicationContext</span><br>            onRefresh(wac);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.publishContext) &#123;<br>        <span class="hljs-comment">// Publish the context as a servlet context attribute.</span><br>        <span class="hljs-comment">// 将IOC容器在应用域共享</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> getServletContextAttributeName();<br>        getServletContext().setAttribute(attrName, wac);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-创建WebApplicationContext"><a href="#b-创建WebApplicationContext" class="headerlink" title="b&gt;创建WebApplicationContext"></a>b&gt;创建WebApplicationContext</h5><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> WebApplicationContext <span class="hljs-title function_">createWebApplicationContext</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ApplicationContext parent)</span> &#123;<br>    Class&lt;?&gt; contextClass = getContextClass();<br>    <span class="hljs-keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContextException</span>(<br>            <span class="hljs-string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +<br>            <span class="hljs-string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +<br>            <span class="hljs-string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 通过反射创建 IOC 容器对象</span><br>    <span class="hljs-type">ConfigurableWebApplicationContext</span> <span class="hljs-variable">wac</span> <span class="hljs-operator">=</span><br>        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);<br><br>    wac.setEnvironment(getEnvironment());<br>    <span class="hljs-comment">// 设置父容器</span><br>    wac.setParent(parent);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">configLocation</span> <span class="hljs-operator">=</span> getContextConfigLocation();<br>    <span class="hljs-keyword">if</span> (configLocation != <span class="hljs-literal">null</span>) &#123;<br>        wac.setConfigLocation(configLocation);<br>    &#125;<br>    configureAndRefreshWebApplicationContext(wac);<br><br>    <span class="hljs-keyword">return</span> wac;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-DispatcherServlet初始化策略"><a href="#c-DispatcherServlet初始化策略" class="headerlink" title="c&gt;DispatcherServlet初始化策略"></a>c&gt;DispatcherServlet初始化策略</h5><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(ApplicationContext context)</span> &#123;<br>   initMultipartResolver(context);<br>   initLocaleResolver(context);<br>   initThemeResolver(context);<br>   initHandlerMappings(context);<br>   initHandlerAdapters(context);<br>   initHandlerExceptionResolvers(context);<br>   initRequestToViewNameTranslator(context);<br>   initViewResolvers(context);<br>   initFlashMapManager(context);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、DispatcherServlet调用组件处理请求"><a href="#3、DispatcherServlet调用组件处理请求" class="headerlink" title="3、DispatcherServlet调用组件处理请求"></a>3、DispatcherServlet调用组件处理请求</h3><h5 id="a-processRequest"><a href="#a-processRequest" class="headerlink" title="a&gt;processRequest()"></a>a&gt;processRequest()</h5><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">failureCause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">previousLocaleContext</span> <span class="hljs-operator">=</span> LocaleContextHolder.getLocaleContext();<br>    <span class="hljs-type">LocaleContext</span> <span class="hljs-variable">localeContext</span> <span class="hljs-operator">=</span> buildLocaleContext(request);<br><br>    <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">previousAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>    <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> buildRequestAttributes(request, response, previousAttributes);<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br>    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestBindingInterceptor</span>());<br><br>    initContextHolders(request, localeContext, requestAttributes);<br><br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span><br>        doService(request, response);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (ServletException | IOException ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        failureCause = ex;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Request processing failed&quot;</span>, ex);<br>    &#125;<br><br>    <span class="hljs-keyword">finally</span> &#123;<br>        resetContextHolders(request, previousLocaleContext, previousAttributes);<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>            requestAttributes.requestCompleted();<br>        &#125;<br>        logResult(request, response, failureCause, asyncManager);<br>        publishRequestHandledEvent(request, response, startTime, failureCause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="b-doService"><a href="#b-doService" class="headerlink" title="b&gt;doService()"></a>b&gt;doService()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doService</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    logRequest(request);<br><br>    <span class="hljs-comment">// Keep a snapshot of the request attributes in case of an include,</span><br>    <span class="hljs-comment">// to be able to restore the original attributes after the include.</span><br>    Map&lt;String, Object&gt; attributesSnapshot = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;<br>        attributesSnapshot = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();<br>        <span class="hljs-keyword">while</span> (attrNames.hasMoreElements()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">attrName</span> <span class="hljs-operator">=</span> (String) attrNames.nextElement();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;<br>                attributesSnapshot.put(attrName, request.getAttribute(attrName));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Make framework objects available to handlers and view objects.</span><br>    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());<br>    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.localeResolver);<br>    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="hljs-built_in">this</span>.themeResolver);<br>    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flashMapManager != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">FlashMap</span> <span class="hljs-variable">inputFlashMap</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.flashMapManager.retrieveAndUpdate(request, response);<br>        <span class="hljs-keyword">if</span> (inputFlashMap != <span class="hljs-literal">null</span>) &#123;<br>            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));<br>        &#125;<br>        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FlashMap</span>());<br>        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="hljs-built_in">this</span>.flashMapManager);<br>    &#125;<br><br>    <span class="hljs-type">RequestPath</span> <span class="hljs-variable">requestPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;<br>        requestPath = ServletRequestPathUtils.parseAndCache(request);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 处理请求和响应</span><br>        doDispatch(request, response);<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Restore the original attribute snapshot, in case of an include.</span><br>            <span class="hljs-keyword">if</span> (attributesSnapshot != <span class="hljs-literal">null</span>) &#123;<br>                restoreAttributesAfterInclude(request, attributesSnapshot);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestPath != <span class="hljs-literal">null</span>) &#123;<br>            ServletRequestPathUtils.clearParsedRequestPath(request);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="c-doDispatch"><a href="#c-doDispatch" class="headerlink" title="c&gt;doDispatch()"></a>c&gt;doDispatch()</h5><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br>    <span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            processedRequest = checkMultipart(request);<br>            multipartRequestParsed = (processedRequest != request);<br><br>            <span class="hljs-comment">// Determine handler for the current request.</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            mappedHandler：调用链</span><br><span class="hljs-comment">                包含handler、interceptorList、interceptorIndex</span><br><span class="hljs-comment">            handler：浏览器发送的请求所匹配的控制器方法</span><br><span class="hljs-comment">            interceptorList：处理控制器方法的所有拦截器集合</span><br><span class="hljs-comment">            interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span><br><span class="hljs-comment">            */</span><br>            mappedHandler = getHandler(processedRequest);<br>            <span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>                noHandlerFound(processedRequest, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Determine handler adapter for the current request.</span><br>           <span class="hljs-comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span><br>            <span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br>            <span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET&quot;</span>.equals(method);<br>            <span class="hljs-keyword">if</span> (isGet || <span class="hljs-string">&quot;HEAD&quot;</span>.equals(method)) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// 调用拦截器的preHandle()</span><br>            <span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// Actually invoke the handler.</span><br>            <span class="hljs-comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span><br>            mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br>            <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            applyDefaultViewName(processedRequest, mv);<br>            <span class="hljs-comment">// 调用拦截器的postHandle()</span><br>            mappedHandler.applyPostHandle(processedRequest, response, mv);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>            dispatchException = ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>            <span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br>            <span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>            dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>        &#125;<br>        <span class="hljs-comment">// 后续处理：处理模型数据和渲染视图</span><br>        processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>        triggerAfterCompletion(processedRequest, response, mappedHandler,<br>                               <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br>            <span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br>            <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br>            <span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>                cleanupMultipart(processedRequest);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="d-processDispatchResult"><a href="#d-processDispatchResult" class="headerlink" title="d&gt;processDispatchResult()"></a>d&gt;processDispatchResult()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> HandlerExecutionChain mappedHandler, <span class="hljs-meta">@Nullable</span> ModelAndView mv,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> Exception exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">errorView</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (exception != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ModelAndViewDefiningException) &#123;<br>            logger.debug(<span class="hljs-string">&quot;ModelAndViewDefiningException encountered&quot;</span>, exception);<br>            mv = ((ModelAndViewDefiningException) exception).getModelAndView();<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (mappedHandler != <span class="hljs-literal">null</span> ? mappedHandler.getHandler() : <span class="hljs-literal">null</span>);<br>            mv = processHandlerException(request, response, handler, exception);<br>            errorView = (mv != <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Did the handler return a view to render?</span><br>    <span class="hljs-keyword">if</span> (mv != <span class="hljs-literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;<br>        <span class="hljs-comment">// 处理模型数据和渲染视图</span><br>        render(mv, request, response);<br>        <span class="hljs-keyword">if</span> (errorView) &#123;<br>            WebUtils.clearErrorRequestAttributes(request);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>            logger.trace(<span class="hljs-string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;<br>        <span class="hljs-comment">// Concurrent handling started during a forward</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Exception (if any) is already handled..</span><br>        <span class="hljs-comment">// 调用拦截器的afterCompletion()</span><br>        mappedHandler.triggerAfterCompletion(request, response, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、SpringMVC的执行流程"><a href="#4、SpringMVC的执行流程" class="headerlink" title="4、SpringMVC的执行流程"></a>4、SpringMVC的执行流程</h3><ol><li>用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。 </li><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</li></ol><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-5.png"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404错误</p><p><img src="/2022/04/29/Spring/SpringMVC%E7%AC%94%E8%AE%B0/image-6.png"></p><p>b) 存在则执行下面的流程</p><ol start="3"><li>根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。 </li><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。 </li><li>如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】 </li><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><ol start="7"><li>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。 </li><li>此时将开始执行拦截器的postHandle(…)方法【逆向】。 </li><li>根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model和View，来渲染视图。 </li><li>渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。 </li><li>将渲染结果返回给客户端。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
